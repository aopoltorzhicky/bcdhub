{
	"info": {
		"_postman_id": "f73e59c6-5ccb-482b-822e-65b020c45377",
		"name": "BCDhub Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "swagger",
			"item": [
				{
					"name": "swagger.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.info.description).to.eql(\"This is API description for Better Call Dev service.\");",
									"    pm.expect(responseJson.info.title).to.eql(\"Better Call Dev API\");",
									"    pm.expect(responseJson.info.contact).to.eql({",
									"        \"name\": \"Baking Bad Team\",",
									"        \"url\": \"https://baking-bad.org/docs\",",
									"        \"email\": \"hello@baking-bad.org\"",
									"    })",
									"    pm.expect(responseJson.info[\"x-logo\"]).to.eql({",
									"        \"altText\": \"Better Call Dev logo\",",
									"        \"href\": \"https://better-call.dev\",",
									"        \"url\": \"https://better-call.dev/img/logo_og.png\"",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/swagger.json",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"swagger.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "opg/:hash",
			"item": [
				{
					"name": "opg#transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.not.eql(0)",
									"",
									"    for (const operation of responseJson) {",
									"        pm.expect(operation.kind).to.eql(\"transaction\");",
									"        pm.expect(operation).to.have.property('timestamp');",
									"        pm.expect(operation).to.have.property('protocol');",
									"        pm.expect(operation).to.have.property('network');",
									"        pm.expect(operation).to.have.property('kind');",
									"        pm.expect(operation).to.have.property('status');",
									"        pm.expect(operation).to.have.property('internal');",
									"        pm.expect(operation).to.have.property('mempool');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/opg/ooRAfDhmSNiwEdGQi2M5qt27EVtBdh3WD7LX3Rpoet3BTUssKTT",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"opg",
								"ooRAfDhmSNiwEdGQi2M5qt27EVtBdh3WD7LX3Rpoet3BTUssKTT"
							]
						}
					},
					"response": []
				},
				{
					"name": "opg#origination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.not.eql(0)",
									"",
									"    for (const operation of responseJson) {",
									"        pm.expect(operation.kind).to.eql(\"origination\");",
									"        pm.expect(operation).to.have.property('timestamp');",
									"        pm.expect(operation).to.have.property('protocol');",
									"        pm.expect(operation).to.have.property('network');",
									"        pm.expect(operation).to.have.property('kind');",
									"        pm.expect(operation).to.have.property('status');",
									"        pm.expect(operation).to.have.property('internal');",
									"        pm.expect(operation).to.have.property('mempool');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/opg/op61Xu9HTbDsjWtYUpq29ZQ2NdmDgMzaxeBBmiuxJjfZA78VvsE",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"opg",
								"op61Xu9HTbDsjWtYUpq29ZQ2NdmDgMzaxeBBmiuxJjfZA78VvsE"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pick_random",
			"item": [
				{
					"name": "pick_random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const contract = pm.response.json();",
									"",
									"    pm.expect(contract).to.have.property('network');",
									"    pm.expect(contract).to.have.property('level');",
									"    pm.expect(contract).to.have.property('timestamp');",
									"    pm.expect(contract).to.have.property('hash');",
									"    pm.expect(contract).to.have.property('address');",
									"    pm.expect(contract).to.have.property('same_count');",
									"    pm.expect(contract).to.have.property('similar_count');",
									"    pm.expect(contract).to.have.property('tx_count');",
									"    pm.expect(contract).to.have.property('last_action');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/pick_random",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"pick_random"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "config",
			"item": [
				{
					"name": "config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const contract = pm.response.json();",
									"",
									"    pm.expect(contract).to.have.property('networks');",
									"    pm.expect(contract).to.have.property('rpc_endpoints');",
									"    pm.expect(contract).to.have.property('tzkt_endpoints');",
									"    pm.expect(contract).to.have.property('sentry_dsn');",
									"    pm.expect(contract).to.have.property('oauth_enabled');",
									"    pm.expect(contract).to.have.property('ga_enabled');",
									"    pm.expect(contract).to.have.property('mempool_enabled');",
									"    pm.expect(contract).to.have.property('sandbox_mode');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/config",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"config"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stats",
			"item": [
				{
					"name": "stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const stats = pm.response.json();",
									"",
									"    pm.expect(stats.length).to.not.eql(0)",
									"",
									"    for (const stat of stats) {",
									"        pm.expect(stat).to.have.property('network');",
									"        pm.expect(stat).to.have.property('hash');",
									"        pm.expect(stat).to.have.property('level');",
									"        pm.expect(stat).to.have.property('predecessor');",
									"        pm.expect(stat).to.have.property('chain_id');",
									"        pm.expect(stat).to.have.property('protocol');",
									"        pm.expect(stat).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "stats/mainnet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const stats = pm.response.json();",
									"",
									"    pm.expect(stats).to.have.property('contracts_count');",
									"    pm.expect(stats).to.have.property('operations_count');",
									"",
									"    pm.expect(stats.protocols).to.not.eql(0);",
									"",
									"    for (const proto of stats.protocols) {",
									"        pm.expect(proto).to.have.property('hash');",
									"        pm.expect(proto).to.have.property('network');",
									"        pm.expect(proto).to.have.property('start_level');",
									"        pm.expect(proto).to.have.property('end_level');",
									"        pm.expect(proto).to.have.property('alias');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats/mainnet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats",
								"mainnet"
							]
						}
					},
					"response": []
				},
				{
					"name": "stats/mainnet/series?name=contract",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.not.eql(0);",
									"",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats/mainnet/series?period=month&name=contract",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "name",
									"value": "contract"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "stats/mainnet/series?name=operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.not.eql(0);",
									"",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats/mainnet/series?period=month&name=operation",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "name",
									"value": "operation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "stats/mainnet/series?name=paid_storage_size_diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.not.eql(0);",
									"",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats/mainnet/series?period=month&name=paid_storage_size_diff",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "name",
									"value": "paid_storage_size_diff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "stats/mainnet/series?name=consumed_gas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.not.eql(0);",
									"",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/stats/mainnet/series?period=month&name=consumed_gas",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"stats",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "name",
									"value": "consumed_gas"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "head",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const head = pm.response.json();",
									"",
									"    pm.expect(head.length).to.not.eql(0);",
									"",
									"    for (const one of head) {",
									"        pm.expect(one).to.have.property('network');",
									"        pm.expect(one).to.have.property('level');",
									"        pm.expect(one).to.have.property('time');",
									"        pm.expect(one).to.have.property('protocol');",
									"        pm.expect(one).to.have.property('total');",
									"        pm.expect(one).to.have.property('contract_calls');",
									"        pm.expect(one).to.have.property('unique_contracts');",
									"        pm.expect(one).to.have.property('fa_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/head",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"head"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "slug",
			"item": [
				{
					"name": "slug/tzbtc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const slug = pm.response.json();",
									"",
									"    pm.expect(slug).to.eql({",
									"        \"alias\": \"tzBTC\",",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn\",",
									"        \"slug\": \"tzbtc\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/slug/tzbtc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"slug",
								"tzbtc"
							]
						}
					},
					"response": []
				},
				{
					"name": "slug/usdtz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const slug = pm.response.json();",
									"",
									"    pm.expect(slug).to.eql({",
									"        \"alias\": \"USDtz\",",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9\",",
									"        \"slug\": \"usdtz\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/slug/usdtz",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"slug",
								"usdtz"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "bigmap",
			"item": [
				{
					"name": "bigmap/mainnet/31",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const bigmap = pm.response.json();",
									"",
									"    pm.expect(bigmap.network).to.be.eql('mainnet');",
									"    pm.expect(bigmap.ptr).to.be.eql(31);",
									"",
									"    pm.expect(bigmap).to.have.property('address');",
									"    pm.expect(bigmap).to.have.property('active_keys');",
									"    pm.expect(bigmap).to.have.property('total_keys');",
									"",
									"    for (const typdef of bigmap.typedef) {",
									"        pm.expect(typdef).to.have.property('name');",
									"        pm.expect(typdef).to.have.property('type');",
									"",
									"        if (typdef.args !== undefined) {",
									"            for (const arg of typdef.args) {",
									"                pm.expect(arg).to.have.property('value');",
									"            }",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/31",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"31"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/31/count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/31/count",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"31",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/31/history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.ptr).to.be.eql(31);",
									"",
									"    pm.expect(response).to.have.property('address');",
									"    pm.expect(response).to.have.property('network');",
									"",
									"    for (item of response.items) {",
									"        pm.expect(item).to.have.property('action');",
									"        pm.expect(item).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/31/history",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"31",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/31/keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (item of response) {",
									"        pm.expect(item).to.have.property('count');",
									"        pm.expect(item).to.have.property('data');",
									"        pm.expect(item.data).to.have.property('key');",
									"        pm.expect(item.data).to.have.property('value');",
									"        pm.expect(item.data).to.have.property('key_hash');",
									"        pm.expect(item.data).to.have.property('key_string');",
									"        pm.expect(item.data).to.have.property('level');",
									"        pm.expect(item.data).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/31/keys",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"31",
								"keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/31/keys/:hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.key_hash).to.be.eql('exprtu6vJPJCkTXVHfqSY4e3WUVnRgozHnAZoFRrEyCE8XfHRi9LZm');",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"",
									"    pm.expect(response).to.have.property('key');",
									"    pm.expect(response).to.have.property('values');",
									"",
									"    for (const item of response.values) {",
									"        pm.expect(item).to.have.property('value');",
									"        pm.expect(item).to.have.property('level');",
									"        pm.expect(item).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/31/keys/exprtu6vJPJCkTXVHfqSY4e3WUVnRgozHnAZoFRrEyCE8XfHRi9LZm",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"31",
								"keys",
								"exprtu6vJPJCkTXVHfqSY4e3WUVnRgozHnAZoFRrEyCE8XfHRi9LZm"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const bigmap = pm.response.json();",
									"",
									"    pm.expect(bigmap.network).to.be.eql('mainnet');",
									"    pm.expect(bigmap.ptr).to.be.eql(32);",
									"",
									"    pm.expect(bigmap).to.have.property('address');",
									"    pm.expect(bigmap).to.have.property('active_keys');",
									"    pm.expect(bigmap).to.have.property('total_keys');",
									"",
									"    if (bigmap.typedef !== undefined) {",
									"        for (const typdef of bigmap.typedef) {",
									"            pm.expect(typdef).to.have.property('name');",
									"            pm.expect(typdef).to.have.property('type');",
									"",
									"            if (typdef.args !== undefined) {",
									"                for (const arg of typdef.args) {",
									"                    pm.expect(arg).to.have.property('value');",
									"                }",
									"            }",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/32",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/32/count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/32/count",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"32",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/32/history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.ptr).to.be.eql(32);",
									"",
									"    pm.expect(response).to.have.property('address');",
									"    pm.expect(response).to.have.property('network');",
									"",
									"    if (response.items !== undefined) {",
									"        for (item of response.items) {",
									"            pm.expect(item).to.have.property('action');",
									"            pm.expect(item).to.have.property('timestamp');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/32/history",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"32",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/32/keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    if (response.length > 0) {",
									"        for (item of response) {",
									"            pm.expect(item).to.have.property('count');",
									"            pm.expect(item).to.have.property('data');",
									"            pm.expect(item.data).to.have.property('key');",
									"            pm.expect(item.data).to.have.property('value');",
									"            pm.expect(item.data).to.have.property('key_hash');",
									"            pm.expect(item.data).to.have.property('key_string');",
									"            pm.expect(item.data).to.have.property('level');",
									"            pm.expect(item.data).to.have.property('timestamp');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/32/keys",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"32",
								"keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "bigmap/mainnet/32/keys/:hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.key_hash).to.be.eql('exprtoACaZ4Ppm1h5vW3BHEbCaqSJaNyKWCHrteHqHJc4PpGQzaZUM');",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"",
									"    pm.expect(response).to.have.property('key');",
									"    pm.expect(response).to.have.property('values');",
									"",
									"    for (const item of response.values) {",
									"        pm.expect(item).to.have.property('value');",
									"        pm.expect(item).to.have.property('level');",
									"        pm.expect(item).to.have.property('timestamp');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/bigmap/mainnet/32/keys/exprtoACaZ4Ppm1h5vW3BHEbCaqSJaNyKWCHrteHqHJc4PpGQzaZUM",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"bigmap",
								"mainnet",
								"32",
								"keys",
								"exprtoACaZ4Ppm1h5vW3BHEbCaqSJaNyKWCHrteHqHJc4PpGQzaZUM"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contracts",
			"item": [
				{
					"name": "contract/mainnet/tzbtc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.network).to.be.eql('mainnet');",
									"    pm.expect(response.address).to.be.eql('KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn');",
									"    pm.expect(response.alias).to.be.eql('tzBTC');",
									"    pm.expect(response.slug).to.be.eql('tzbtc');",
									"",
									"    pm.expect(response).to.have.property('level');",
									"    pm.expect(response).to.have.property('timestamp');",
									"    pm.expect(response).to.have.property('hash');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/code",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"code"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/operations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('operations');",
									"",
									"    for (const operation of response.operations) {",
									"        pm.expect(operation.network).to.be.eql('mainnet');",
									"        ",
									"        pm.expect(operation).to.have.property('content_index');",
									"        pm.expect(operation).to.have.property('timestamp');",
									"        pm.expect(operation).to.have.property('protocol');",
									"        pm.expect(operation).to.have.property('kind');",
									"        pm.expect(operation).to.have.property('status');",
									"        pm.expect(operation).to.have.property('internal');",
									"        pm.expect(operation).to.have.property('mempool');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/operations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"operations"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/migrations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (const migration of response) {        ",
									"        pm.expect(migration).to.have.property('level');",
									"        pm.expect(migration).to.have.property('timestamp');",
									"        pm.expect(migration).to.have.property('protocol');",
									"        pm.expect(migration).to.have.property('prev_protocol');",
									"        pm.expect(migration).to.have.property('kind');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/migrations",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"migrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/transfers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('total');",
									"    pm.expect(response.transfers.length).to.be.eql(10);",
									"",
									"    for (const transfer of response.transfers) {        ",
									"        pm.expect(transfer).to.have.property('indexed_time');",
									"        pm.expect(transfer).to.have.property('network');",
									"        pm.expect(transfer).to.have.property('contract');",
									"        pm.expect(transfer).to.have.property('initiator');",
									"        pm.expect(transfer).to.have.property('hash');",
									"        pm.expect(transfer).to.have.property('status');",
									"        pm.expect(transfer).to.have.property('timestamp');",
									"        pm.expect(transfer).to.have.property('level');",
									"        pm.expect(transfer).to.have.property('from');",
									"        pm.expect(transfer).to.have.property('to');",
									"        pm.expect(transfer).to.have.property('token_id');",
									"        pm.expect(transfer).to.have.property('amount');",
									"        pm.expect(transfer).to.have.property('counter');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/transfers?size=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"transfers"
							],
							"query": [
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (const token of response) {        ",
									"        pm.expect(token.network).to.be.eql('mainnet');",
									"",
									"        pm.expect(token).to.have.property('contract');",
									"        pm.expect(token).to.have.property('token_id');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/tokens",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/tokens/holders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (const address in response) {        ",
									"        pm.expect(address.length).to.be.eql(36);",
									"        pm.expect(response[address].startsWith(\"-\")).to.be.eql(false);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/tokens/holders?token_id=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"tokens",
								"holders"
							],
							"query": [
								{
									"key": "token_id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/kusd/tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (const token of response) {        ",
									"        pm.expect(token.network).to.be.eql('mainnet');",
									"",
									"        pm.expect(token).to.have.property('contract');",
									"        pm.expect(token).to.have.property('token_id');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV/tokens",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/kusd/tokens/holders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    for (const address in response) {        ",
									"        pm.expect(address.length).to.be.eql(36);",
									"        pm.expect(response[address].startsWith(\"-\")).to.be.eql(false);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV/tokens/holders?token_id=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV",
								"tokens",
								"holders"
							],
							"query": [
								{
									"key": "token_id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/similar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('count');",
									"",
									"    for (const contract of response.contracts) {        ",
									"        pm.expect(contract).to.have.property('network');",
									"        pm.expect(contract).to.have.property('level');",
									"        pm.expect(contract).to.have.property('timestamp');",
									"        pm.expect(contract).to.have.property('hash');",
									"        pm.expect(contract).to.have.property('address');",
									"        pm.expect(contract).to.have.property('similar_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/similar",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/entrypoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"",
									"    for (const entrypoint of response) {        ",
									"        pm.expect(entrypoint).to.have.property('schema');",
									"        pm.expect(entrypoint).to.have.property('name');",
									"        pm.expect(entrypoint).to.have.property('typedef');",
									"",
									"        for (const typedef of entrypoint.typedef) {",
									"            pm.expect(typedef).to.have.property('name');",
									"            pm.expect(typedef).to.have.property('type');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/entrypoints",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"entrypoints"
							]
						}
					},
					"response": []
				},
				{
					"name": "contract/mainnet/tzbtc/entrypoints/schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('schema');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('typedef');",
									"",
									"    for (const typedef of response.typedef) {",
									"        pm.expect(typedef).to.have.property('name');",
									"        pm.expect(typedef).to.have.property('type');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/contract/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/entrypoints/schema?entrypoint=getVersion",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"contract",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"entrypoints",
								"schema"
							],
							"query": [
								{
									"key": "entrypoint",
									"value": "getVersion"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "account/mainnet/tzbtc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const account = pm.response.json();",
									"",
									"    pm.expect(account.address).to.eql('KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn');",
									"    pm.expect(account.network).to.eql('mainnet');",
									"    pm.expect(account.alias).to.eql('tzBTC');",
									"",
									"    pm.expect(account).to.have.property('balance');",
									"    pm.expect(account).to.have.property('tx_count');",
									"    pm.expect(account).to.have.property('last_action');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/usdtz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const account = pm.response.json();",
									"",
									"    pm.expect(account.address).to.eql('KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9');",
									"    pm.expect(account.network).to.eql('mainnet');",
									"    pm.expect(account.alias).to.eql('USDtz');",
									"",
									"    pm.expect(account).to.have.property('balance');",
									"    pm.expect(account).to.have.property('tx_count');",
									"    pm.expect(account).to.have.property('last_action');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/tzbtc/metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const metadata = pm.response.json();",
									"",
									"    pm.expect(metadata.address).to.eql('KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn');",
									"    pm.expect(metadata.network).to.eql('mainnet');",
									"    pm.expect(metadata.name).to.eql('tzBTC');",
									"",
									"    pm.expect(metadata).to.have.property('description');",
									"    pm.expect(metadata).to.have.property('version');",
									"    pm.expect(metadata).to.have.property('license');",
									"    pm.expect(metadata).to.have.property('interfaces');",
									"    pm.expect(metadata).to.have.property('events');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/metadata",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/usdtz/metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const metadata = pm.response.json();",
									"",
									"    pm.expect(metadata.address).to.eql('KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9');",
									"    pm.expect(metadata.network).to.eql('mainnet');",
									"    pm.expect(metadata.name).to.eql('USDtz');",
									"",
									"    pm.expect(metadata).to.have.property('description');",
									"    pm.expect(metadata).to.have.property('version');",
									"    pm.expect(metadata).to.have.property('license');",
									"    pm.expect(metadata).to.have.property('interfaces');",
									"    pm.expect(metadata).to.have.property('events');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9/metadata",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/address/count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const balances = pm.response.json();",
									"",
									"    pm.expect(balances).to.have.property('KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn');",
									"    pm.expect(balances['KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn']).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/tz1SbC5uEwQ2114PhHooPhLr8T5NLEghbToz/count",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"tz1SbC5uEwQ2114PhHooPhLr8T5NLEghbToz",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/tzbtc/metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const metadata = pm.response.json();",
									"",
									"    pm.expect(metadata.address).to.eql(\"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn\");",
									"    pm.expect(metadata.network).to.eql(\"mainnet\");",
									"    pm.expect(metadata.name).to.eql(\"tzBTC\");",
									"    pm.expect(metadata.description).to.eql(\"Wrapped Bitcon\");",
									"    pm.expect(metadata.version).to.eql(\"0.1.0\");",
									"    pm.expect(metadata).to.have.property('license');",
									"    pm.expect(metadata.license).to.have.property('details');",
									"    pm.expect(metadata.license).to.have.property('name');",
									"    pm.expect(metadata.license.details).to.eql(\"MIT License\");",
									"    pm.expect(metadata.license.name).to.eql(\"MIT\");",
									"    pm.expect(metadata.interfaces).to.eql([",
									"        \"TZIP-7\",",
									"        \"TZIP-16\",",
									"        \"TZIP-20\"",
									"    ]);",
									"    pm.expect(metadata).to.have.property('events');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn/metadata",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "account/mainnet/tzbtc/token_balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response).to.have.property('balances');",
									"    pm.expect(response).to.have.property('total');",
									"",
									"    pm.expect(response.total).to.eql(1);",
									"    pm.expect(response.balances).to.length(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/account/mainnet/tz1ZAwyfujwED4yUhQAtc1eqm4gW5u2Xiw77/token_balances",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"account",
								"mainnet",
								"tz1ZAwyfujwED4yUhQAtc1eqm4gW5u2Xiw77",
								"token_balances"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tokens",
			"item": [
				{
					"name": "tokens/mainnet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response.tokens.length).to.be.greaterThan(0);",
									"",
									"    for (const token of response.tokens) {",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('level');",
									"        pm.expect(token).to.have.property('timestamp');",
									"        pm.expect(token).to.have.property('last_action');",
									"        pm.expect(token).to.have.property('address');",
									"        pm.expect(token).to.have.property('type');",
									"        pm.expect(token).to.have.property('balance');",
									"        pm.expect(token).to.have.property('tx_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet"
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/version/fa12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response.tokens.length).to.be.eql(10);",
									"",
									"    for (const token of response.tokens) {",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('level');",
									"        pm.expect(token).to.have.property('timestamp');",
									"        pm.expect(token).to.have.property('last_action');",
									"        pm.expect(token).to.have.property('address');",
									"        pm.expect(token).to.have.property('type');",
									"        pm.expect(token).to.have.property('balance');",
									"        pm.expect(token).to.have.property('tx_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/version/fa12?size=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"version",
								"fa12"
							],
							"query": [
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/version/fa2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response.tokens.length).to.be.eql(10);",
									"",
									"    for (const token of response.tokens) {",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('level');",
									"        pm.expect(token).to.have.property('timestamp');",
									"        pm.expect(token).to.have.property('last_action');",
									"        pm.expect(token).to.have.property('address');",
									"        pm.expect(token).to.have.property('type');",
									"        pm.expect(token).to.have.property('balance');",
									"        pm.expect(token).to.have.property('tx_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/version/fa2?size=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"version",
								"fa2"
							],
							"query": [
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/transfers/tzbtc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response.transfers.length).to.be.eql(10);",
									"",
									"    for (const transfer of response.transfers) {",
									"        pm.expect(transfer.network).to.be.eql('mainnet');",
									"        pm.expect(transfer.alias).to.be.eql('tzBTC');",
									"        pm.expect(transfer.token_id).to.be.eql(0);",
									"",
									"        pm.expect(transfer).to.have.property('indexed_time');",
									"        pm.expect(transfer).to.have.property('network');",
									"        pm.expect(transfer).to.have.property('contract');",
									"        pm.expect(transfer).to.have.property('initiator');",
									"        pm.expect(transfer).to.have.property('hash');",
									"        pm.expect(transfer).to.have.property('status');",
									"        pm.expect(transfer).to.have.property('timestamp');",
									"        pm.expect(transfer).to.have.property('level');",
									"        pm.expect(transfer).to.have.property('from');",
									"        pm.expect(transfer).to.have.property('to');",
									"        pm.expect(transfer).to.have.property('token_id');",
									"        pm.expect(transfer).to.have.property('amount');",
									"        pm.expect(transfer).to.have.property('counter');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/transfers/KT1DrJV8vhkdLEj76h1H9Q4irZDqAkMPo1Qf?token_id=0&size=10&contracts=KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"transfers",
								"KT1DrJV8vhkdLEj76h1H9Q4irZDqAkMPo1Qf"
							],
							"query": [
								{
									"key": "token_id",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "contracts",
									"value": "KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/tz1fCCyqjcmwNw5Vv1b7yVXPvJzL42KqxWxd/transfers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response).to.have.property(\"last_id\");",
									"",
									"    for (const transfer of response.transfers) {",
									"        pm.expect(transfer.network).to.be.eql('mainnet');",
									"        pm.expect(transfer.token_id).to.be.eql(0);",
									"",
									"        pm.expect(transfer).to.have.property('alias');",
									"        pm.expect(transfer).to.have.property('indexed_time');",
									"        pm.expect(transfer).to.have.property('network');",
									"        pm.expect(transfer).to.have.property('contract');",
									"        pm.expect(transfer).to.have.property('initiator');",
									"        pm.expect(transfer).to.have.property('hash');",
									"        pm.expect(transfer).to.have.property('status');",
									"        pm.expect(transfer).to.have.property('timestamp');",
									"        pm.expect(transfer).to.have.property('level');",
									"        pm.expect(transfer).to.have.property('from');",
									"        pm.expect(transfer).to.have.property('to');",
									"        pm.expect(transfer).to.have.property('token_id');",
									"        pm.expect(transfer).to.have.property('amount');",
									"        pm.expect(transfer).to.have.property('counter');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/transfers/tz1fCCyqjcmwNw5Vv1b7yVXPvJzL42KqxWxd?size=10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"transfers",
								"tz1fCCyqjcmwNw5Vv1b7yVXPvJzL42KqxWxd"
							],
							"query": [
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/transfers/usdtz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const response = pm.response.json();",
									"",
									"    pm.expect(response.total).to.be.greaterThan(0);",
									"    pm.expect(response.transfers.length).to.be.eql(10);",
									"",
									"    for (const transfer of response.transfers) {",
									"        pm.expect(transfer.network).to.be.eql('mainnet');",
									"        pm.expect(transfer.alias).to.be.eql('USDtz');",
									"        pm.expect(transfer.token_id).to.be.eql(0);",
									"",
									"        pm.expect(transfer).to.have.property('indexed_time');",
									"        pm.expect(transfer).to.have.property('network');",
									"        pm.expect(transfer).to.have.property('contract');",
									"        pm.expect(transfer).to.have.property('initiator');",
									"        pm.expect(transfer).to.have.property('hash');",
									"        pm.expect(transfer).to.have.property('status');",
									"        pm.expect(transfer).to.have.property('timestamp');",
									"        pm.expect(transfer).to.have.property('level');",
									"        pm.expect(transfer).to.have.property('from');",
									"        pm.expect(transfer).to.have.property('to');",
									"        pm.expect(transfer).to.have.property('token_id');",
									"        pm.expect(transfer).to.have.property('amount');",
									"        pm.expect(transfer).to.have.property('counter');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/transfers/KT1Puc9St8wdNoGtLiD2WXaHbWU7styaxYhD?token_id=0&size=10&contracts=KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"transfers",
								"KT1Puc9St8wdNoGtLiD2WXaHbWU7styaxYhD"
							],
							"query": [
								{
									"key": "token_id",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "contracts",
									"value": "KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/series/tzbtc?period=month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.be.greaterThan(0);",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/series?contract=KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn&period=month&token_id=0&slug=quipuswap",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "contract",
									"value": "KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn"
								},
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "token_id",
									"value": "0"
								},
								{
									"key": "slug",
									"value": "quipuswap"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/series/usdtz?period=month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.be.greaterThan(0);",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/series?contract=KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9&period=month&token_id=0&slug=quipuswap",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "contract",
									"value": "KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9"
								},
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "token_id",
									"value": "0"
								},
								{
									"key": "slug",
									"value": "quipuswap"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tokens/mainnet/series/ethtz?period=month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const series = pm.response.json();",
									"",
									"    pm.expect(series.length).to.be.greaterThan(0);",
									"    for (const part of series) {",
									"        pm.expect(part.length).to.eql(2);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/tokens/mainnet/series?contract=KT19at7rQUvyjxnZ2fBv7D9zc8rkyG7gAoU8&period=month&token_id=0&slug=quipuswap",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"tokens",
								"mainnet",
								"series"
							],
							"query": [
								{
									"key": "contract",
									"value": "KT19at7rQUvyjxnZ2fBv7D9zc8rkyG7gAoU8"
								},
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "token_id",
									"value": "0"
								},
								{
									"key": "slug",
									"value": "quipuswap"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dapps",
			"item": [
				{
					"name": "dapps/kolibri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"Kolibri\");",
									"    pm.expect(dapp.short_description).to.eql(\"Algorithmic stablecoin\");",
									"    pm.expect(dapp.full_description).to.eql(\"Kolibri is an Tezos based stablecoin built on Collateralized Debt Positions (CDPs) known as Ovens. Kolibri uses CDPs to collateralize a soft pegged USD-stable value asset, kUSD. Data is provided via the Harbinger Price Feed via the Oracle contract\");",
									"    pm.expect(dapp.website).to.eql(\"https://kolibri.finance/\");",
									"    pm.expect(dapp.slug).to.eql(\"kolibri\");",
									"    pm.expect(dapp.authors).to.eql([ \"Hover Labs\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://twitter.com/HoverEng\",",
									"        \"https://hover.engineering/\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql([\"FA1.2\"]);",
									"    pm.expect(dapp.categories).to.eql([\"Token\", \"Stable\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/kolibri/kolibri_logo.png\");",
									"    pm.expect(dapp.cover).to.eql( \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/kolibri/kolibri_cover.png\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/kolibri",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"kolibri"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/tzwrap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"WRAP Protocol\");",
									"    pm.expect(dapp.short_description).to.eql(\"Decentralized bridge between Ethereum and Tezos\");",
									"    pm.expect(dapp.full_description).to.eql(\"Through Wrap, users issue wTokens (wrapped tokens) which are representations of ERC20 and ERC721 tokens on the Tezos blockchain. wTokens can then be used on the Tezos blockchain, and their value is pegged to the original tokens. Wrap is a decentralized protocol, relying on a strong federation (the Signers Quorum) that guarantees the stability of the protocol, and a community of WRAP governance token holders.\");",
									"    pm.expect(dapp.website).to.eql(\"https://www.benderlabs.io/wrap\");",
									"    pm.expect(dapp.slug).to.eql(\"tzwrap\");",
									"    pm.expect(dapp.authors).to.eql([\"Bender Labs\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://twitter.com/BenderLabs\",",
									"        \"https://t.me/benderlabs\",",
									"        \"https://github.com/bender-labs\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql([\"FA2\"]);",
									"    pm.expect(dapp.categories).to.eql([\"Token\", \"Wrapped\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzwrap/tzwrap_logo.png\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzwrap/tzwrap_cover.png\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/tzwrap",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"tzwrap"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/objkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp).to.eql({",
									"        \"name\": \"objkt.com\",",
									"        \"short_description\": \"The largest NFT marketplace on Tezos.\",",
									"        \"full_description\": \"objkt.com is the first FA2 marketplace that aggregates tokens across contracts and provides a cohesive user interface to interact with and trade multimedia NFTs.\",",
									"        \"website\": \"https://objkt.com\",",
									"        \"slug\": \"objkt\",",
									"        \"authors\": [",
									"            \"objkt.com\"",
									"        ],",
									"        \"social_links\": [",
									"            \"https://twitter.com/objktcom\"",
									"        ],",
									"        \"interfaces\": null,",
									"        \"categories\": [",
									"            \"NFT\",",
									"            \"Marketplace\"",
									"        ],",
									"        \"soon\": false,",
									"        \"logo\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/objkt/objkt_logo.png\",",
									"        \"cover\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/objkt/objkt_cover.png\",",
									"        \"screenshots\": [{ \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/objkt/objkt_screen_1.png\", \"type\": \"desktop\" }, { \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/objkt/objkt_screen_2.png\", \"type\": \"desktop\" }, { \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/objkt/objkt_screen_3.png\", \"type\": \"desktop\" }],",
									"        \"contracts\": [",
									"            {",
									"                \"network\": \"mainnet\",",
									"                \"address\": \"KT1XjcRq5MLAzMKQ3UHsrue2SeU2NbxUrzmU\",",
									"                \"alias\": \"objkt.bid English\",",
									"                \"release_date\": \"2021-07-05T16:44:02Z\"",
									"            },",
									"            {",
									"                \"network\": \"mainnet\",",
									"                \"address\": \"KT1QJ71jypKGgyTNtXjkCAYJZNhCKWiHuT2r\",",
									"                \"release_date\": \"2021-07-05T16:45:02Z\"",
									"            },",
									"            {",
									"                \"network\": \"mainnet\",",
									"                \"address\": \"KT1FvqJwEDWb1Gwc55Jd1jjTHRVWbYKUUpyq\",",
									"                \"release_date\": \"2021-06-30T20:47:26Z\"",
									"            }",
									"        ]",
									"    }",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/objkt",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"objkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/tzbutton",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp).to.eql({",
									"  \"name\": \"TzButton\",",
									"  \"short_description\": \"Tezos-blockchain based game\",",
									"  \"full_description\": \"The TzButton experiment is controlled by a smart contract deployed on the Tezos blockchain. Whenever anyone presses the button three things will happen:\\n1. You will add 0.2 tez to the smart contract’s balance\\n2. The address of the sender will become the leader\\n3. The countdown is reset\\n\\nThe address that is the leader after the countdown expired will be eligible to withdraw the total balance on the smart contract.\",",
									"  \"website\": \"https://tzbutton.io/\",",
									"  \"slug\": \"tzbutton\",",
									"  \"authors\": [",
									"    \"AirGap\"",
									"  ],",
									"  \"social_links\": [",
									"    \"https://t.me/AirGap\",",
									"    \"https://www.instagram.com/airgap.it/\",",
									"    \"https://twitter.com/AirGap_it\",",
									"    \"https://www.youtube.com/channel/UCV2_m3sCXtxLeRWrQo8uvxg\",",
									"    \"https://github.com/airgap-it/airgap-wallet\",",
									"    \"https://www.reddit.com/r/AirGap\"",
									"  ],",
									"  \"interfaces\": [],",
									"  \"categories\": [",
									"    \"Game\",",
									"    \"Social\"",
									"  ],",
									"  \"soon\": false,",
									"  \"logo\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbutton/tzbutton_logo.png\",",
									"  \"cover\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbutton/tzbutton_cover.png\",",
									"  \"screenshots\": [",
									"    {",
									"      \"type\": \"desktop\",",
									"      \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbutton/tzbutton_screen_1.png\"",
									"    },",
									"    {",
									"      \"type\": \"desktop\",",
									"      \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbutton/tzbutton_screen_2.png\"",
									"    }",
									"  ],",
									"  \"contracts\": [",
									"    {",
									"      \"network\": \"mainnet\",",
									"      \"address\": \"KT1H28iie4mW9LmmJeYLjH6zkC8wwSmfHf5P\",",
									"      \"alias\": \"TzButton\",",
									"      \"release_date\": \"2020-12-17T11:56:00Z\"",
									"    }",
									"  ]",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/tzbutton",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"tzbutton"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/stakerdao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp).to.eql({",
									"  \"name\": \"StakerDAO\",",
									"  \"short_description\": \"A platform for governing financial assets\",",
									"  \"full_description\": \"The StakerDAO community builds and manages products for on-chain governance, cross-chain synthetics, and tokenized real-world assets. StakerDAO is a new kind of organization: it is both a corporation – Staker Services Ltd based in the Cayman Islands – and a decentralized autonomous organization (DAO). The STKR equity token is built on the FA 1.x token standard on Tezos. Actions taken by StakerDAO are transparent and managed on the Tezos blockchain. Everyone can see the results of every proposal that is submitted and every vote the StakerDAO Council makes. The five members of the StakerDAO Council are elected annually through a Tezos on-chain vote of STKR token holders.\",",
									"  \"website\": \"https://stakerdao.com/\",",
									"  \"slug\": \"stakerdao\",",
									"  \"authors\": [",
									"    \"Staker Services Ltd\"",
									"  ],",
									"  \"social_links\": [",
									"    \"https://twitter.com/stakerdao\",",
									"    \"https://t.me/stakercommunity\",",
									"    \"https://linkedin.com/company/stakerdao\"",
									"  ],",
									"  \"interfaces\": [",
									"    \"FA1\"",
									"  ],",
									"  \"categories\": [",
									"    \"DAO\",",
									"    \"Token\"",
									"  ],",
									"  \"soon\": false,",
									"  \"logo\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/stakerdao/stakerdao_logo.jpg\",",
									"  \"cover\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/stakerdao/stakerdao_cover.png\",",
									"  \"screenshots\": [",
									"    {",
									"      \"type\": \"desktop\",",
									"      \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/stakerdao/stakerdao_screen_1.png\"",
									"    }",
									"  ],",
									"  \"contracts\": [",
									"    {",
									"      \"network\": \"mainnet\",",
									"      \"address\": \"KT1EctCuorV2NfVb1XTQgvzJ88MQtWP8cMMv\",",
									"      \"alias\": \"StakerDAO\",",
									"      \"release_date\": \"2020-01-06T03:46:32Z\"",
									"    },",
									"    {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1SxyJctfkEJoHmDA4Vr4DoFexdgdiFp785\",",
									"         \"alias\": \"STKR Farm XTZ/kUSD LP\",",
									"        \"release_date\": \"2021-06-11T02:05:26Z\"",
									"    },",
									"    {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1Jib9AmhYdbnef2F97uEHtApk2GhuHMQBq\",",
									"         \"alias\": \"STKR Farm XTZ/STKR LP\",",
									"        \"release_date\": \"2021-06-11T01:58:26Z\"",
									"    },",
									"    {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1EAvfbUsed9tbdVzaJKcLM2BSkv7q9oDG1\",",
									"        \"alias\": \"STKR Farm XTZ/wXTZ LP\",",
									"        \"release_date\": \"2021-06-11T02:04:26Z\"",
									"    },",
									"    {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1AEfeckNbdEYwaMKkytBwPJPycz7jdSGea\",",
									"         \"alias\": \"STKR \",",
									"        \"release_date\": \"2021-03-01T04:28:06Z\"",
									"    }",
									"  ],",
									"    \"tokens\": [",
									"        {",
									"            \"contract\": \"KT1AEfeckNbdEYwaMKkytBwPJPycz7jdSGea\",",
									"            \"network\": \"mainnet\",",
									"            \"timestamp\": \"2018-06-30T00:00:00Z\",",
									"            \"token_id\": 0,",
									"            \"symbol\": \"STKR\",",
									"            \"name\": \"STKR\",",
									"            \"decimals\": 18,",
									"            \"is_transferable\": true,",
									"            \"supply\": \"305100000000000000000000000\",",
									"            \"transfered\": 3.9109134734589525e+26",
									"        }",
									"    ]",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/stakerdao",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"stakerdao"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/token/ethtz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"ETHtez\");",
									"    pm.expect(dapp.short_description).to.eql(\"ETH-wrapped token\");",
									"    pm.expect(dapp.full_description).to.eql(\"ETHtez (ETHtz) is Ethereum currency, Ether (ETH), wrapped in a Tezos FA-standard token, enabling users to interact with a Tezos token that is priced to the value as ETH, yet without its high gas prices. Unlike interacting directly with ETH, which can incur massive gas fees, ETHtz users can enjoy the low-cost gas-efficiency of the Tezos network.\");",
									"    pm.expect(dapp.website).to.eql(\"https://ethtz.io\");",
									"    pm.expect(dapp.slug).to.eql(\"ethtz\");",
									"    pm.expect(dapp.authors).to.eql([\"Tezos Stable Technologies Ltd\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://twitter.com/ETH_Tez\",",
									"        \"https://github.com/StableTechnologies/ETHtz\",",
									"        \"https://www.reddit.com/r/ETHtz/\",",
									"        \"https://t.me/ETHtz\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql([\"FA1.2\"]);",
									"    pm.expect(dapp.categories).to.eql([\"Token\", \"Stable\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/ethtz/ethtz_logo.png\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/ethtz/ethtz_cover.png\");",
									"    pm.expect(dapp.contracts).to.eql([",
									"        {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT19at7rQUvyjxnZ2fBv7D9zc8rkyG7gAoU8\",",
									"        \"alias\": \"ETHtz\",",
									"        \"release_date\": \"2020-12-13T02:33:53Z\"",
									"        }",
									"    ]);",
									"",
									"    pm.expect(dapp.tokens.length).to.eql(1);",
									"    for (const token of dapp.tokens) {",
									"        pm.expect(token).to.have.property('contract');",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('token_id');",
									"        pm.expect(token).to.have.property('supply');",
									"        pm.expect(token).to.have.property('transfered');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/ethtz",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"ethtz"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/token/usdtz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"USDtez\");",
									"    pm.expect(dapp.short_description).to.eql(\"Hard-backed USD stablecoin\");",
									"    pm.expect(dapp.full_description).to.eql(\"USDtez (USDtz) is the first USD stablecoin on Tezos. USDtez is fully-backed 1-1 by FIAT,  and built to the Tezos FA token standard, providing a solvent, scalable, and financial DApp programmable source of liquidity for low-fee Tezos-based asset trading. The USDtez Reserve is regularly audited but also viewable in real time by users. Its collateral is diversified amongst multiple and strictly regulated FIAT-backed assets, further strengthening its 1-1 parity with the United States Dollar (USD).\");",
									"    pm.expect(dapp.website).to.eql(\"https://usdtz.com/\");",
									"    pm.expect(dapp.slug).to.eql(\"usdtz\");",
									"    pm.expect(dapp.authors).to.eql([\"Tezos Stable Technologies Ltd\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://twitter.com/usdtz\",",
									"        \"https://github.com/usdtz\",",
									"        \"https://www.reddit.com/r/USDTZ/\",",
									"        \"https://t.me/USDtezos\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql([\"FA1.2\"]);",
									"    pm.expect(dapp.categories).to.eql([\"Token\", \"Stable\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/usdtz/usdtz_logo.jpg\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/usdtz/usdtz_cover.png\");",
									"    pm.expect(dapp.contracts).to.eql([",
									"        {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1LN4LPSqTMS7Sd2CJw4bbDGRkMv2t68Fy9\",",
									"        \"alias\": \"USDtz\",",
									"        \"release_date\": \"2020-05-04T19:55:48Z\"",
									"        }",
									"    ]);",
									"",
									"    pm.expect(dapp.tokens.length).to.eql(1);",
									"    for (const token of dapp.tokens) {",
									"        pm.expect(token).to.have.property('contract');",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('token_id');",
									"        pm.expect(token).to.have.property('name');",
									"        pm.expect(token).to.have.property('symbol');",
									"        pm.expect(token).to.have.property('decimals');",
									"        pm.expect(token).to.have.property('supply');",
									"        pm.expect(token).to.have.property('transfered');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/usdtz",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"usdtz"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/token/tzbtc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"tzBTC\");",
									"    pm.expect(dapp.short_description).to.eql(\"Wrapped Bitcoin\");",
									"    pm.expect(dapp.full_description).to.eql(\"tzBTC brings the liquidity and battle-tested brand of Bitcoin (BTC) into the Tezos ecosystem, enabling BTC-backed use-cases on Tezos. Developers on Tezos can use tzBTC to enable novel financial applications on the Tezos blockchain. Usable In Tezos Smart Contracts As an asset on Tezos, tzBTC enables Tezos-based applications to use BTC with the full expressivity of Tezos smart contracts. tzBTC is implemented using the FA 1.2 asset standard on Tezos. No single-point-of-failure. The tzBTC system divides governance among a group of Keyholders. Keyholders can access via multi-signature wallets the underlying Bitcoin and oversee supply management by minting and burning the corresponding tzBTC. Gatekeepers interact directly with End-Users and ensure compliance with KYC \\u0026 AML documentation.\");",
									"    pm.expect(dapp.website).to.eql(\"https://tzbtc.io/\");",
									"    pm.expect(dapp.slug).to.eql(\"tzbtc\");",
									"    pm.expect(dapp.authors).to.eql([\"Bitcoin Association Switzerland\"]);",
									"    pm.expect(dapp.social_links).to.eql(null);",
									"    pm.expect(dapp.interfaces).to.eql([\"FA1.2\"]);",
									"    pm.expect(dapp.categories).to.eql([\"Token\", \"Wrapped\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbtc/tzbtc_logo.jpg\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tzbtc/tzbtc_cover.jpg\");",
									"    pm.expect(dapp.contracts).to.eql([",
									"        {",
									"        \"network\": \"mainnet\",",
									"        \"address\": \"KT1PWx2mnDueood7fEmfbBDKx1D9BAnnXitn\",",
									"        \"alias\": \"tzBTC\",",
									"        \"release_date\": \"2020-03-31T12:53:51Z\"",
									"        }",
									"    ]);",
									"",
									"    pm.expect(dapp.tokens.length).to.eql(1);",
									"    for (const token of dapp.tokens) {",
									"        pm.expect(token).to.have.property('contract');",
									"        pm.expect(token).to.have.property('network');",
									"        pm.expect(token).to.have.property('token_id');",
									"        pm.expect(token).to.have.property('supply');",
									"        pm.expect(token).to.have.property('transfered');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/tzbtc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"tzbtc"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/dex/atomex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"Atomex\");",
									"    pm.expect(dapp.short_description).to.eql(\"Hybrid cross-chain exchange\");",
									"    pm.expect(dapp.full_description).to.eql(\"Atomex — is a non-custodial crypto wallet with a built in Atomic swap decentralized exchange (DEX). You can store, use and swap cryptocurrencies from a different blockchain like Bitcoin (BTC), Ethereum (ETH), Litecoin (LTC), Tezos (XTZ), USDT (ERC20 token), tzBTC (Tezos wrapped Bitcoin token), TBTC and WBTC (Ethereum wrapped Bitcoin token) and other coins without intermediaries from your own HD wallet.\");",
									"    pm.expect(dapp.website).to.eql(\"https://atomex.me\");",
									"    pm.expect(dapp.slug).to.eql(\"atomex\");",
									"    pm.expect(dapp.authors).to.eql([\"Baking Bad\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://twitter.com/atomex_official\",",
									"        \"https://medium.com/@_MisterWalker_\",",
									"        \"https://www.youtube.com/channel/UCg-jUk-6MVEMSZ4Qhfrt40Q\",",
									"        \"https://t.me/atomex_official\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql(null);",
									"    pm.expect(dapp.categories).to.eql([\"DEX\", \"Cross-chain\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_logo.jpg\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_cover.jpg\");",
									"    pm.expect(dapp.screenshots).to.eql([",
									"        {",
									"            \"type\": \"desktop\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_screen_1.png\"",
									"        },",
									"        {",
									"            \"type\": \"desktop\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_screen_2.png\"",
									"        },",
									"        {",
									"            \"type\": \"desktop\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_screen_3.png\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_1.jpg\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_2.jpg\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_3.jpg\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_4.jpg\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_5.jpg\"",
									"        },",
									"        {",
									"            \"type\": \"mobile\",",
									"            \"link\": \"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/atomex/atomex_mobile_6.jpg\"",
									"        }",
									"    ]);",
									"    pm.expect(dapp.contracts).to.eql([",
									"        {",
									"            \"network\": \"mainnet\",",
									"            \"address\": \"KT1VG2WtYdSWz5E7chTeAdDPZNy2MpP8pTfL\",",
									"            \"alias\": \"Atomex\",",
									"            \"release_date\": \"2019-07-08T12:54:52Z\"",
									"        },",
									"        {",
									"            \"network\": \"mainnet\",",
									"            \"address\": \"KT1Ap287P1NzsnToSJdA4aqSNjPomRaHBZSr\",",
									"             \"alias\": \"Atomex tzBTC\",",
									"            \"release_date\": \"2020-04-08T11:37:32Z\"",
									"        },",
									"        {",
									"            \"network\": \"mainnet\",",
									"            \"address\": \"KT1EpQVwqLGSH7vMCWKJnq6Uxi851sEDbhWL\",",
									"            \"alias\": \"Atomex kUSD\",",
									"            \"release_date\": \"2021-02-24T16:28:18Z\"",
									"        }",
									"    ]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/atomex",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"atomex"
							]
						}
					},
					"response": []
				},
				{
					"name": "dapps/dex/tezex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response has all properties\", () => {",
									"    const dapp = pm.response.json();",
									"",
									"    pm.expect(dapp.name).to.eql(\"TEZEX Bridge\");",
									"    pm.expect(dapp.short_description).to.eql(\"Inter-chain token swaps\");",
									"    pm.expect(dapp.full_description).to.eql(\"TEZEX is a Tezos liquidity exchange expanding liquidity flow via inter-chain and intra-chain token trading. TEZEX Bridge enables cross-chain token swaps between Tezos tokens and tokens of other blockchains like Ethereum — that is, Ethereum ERC-standard tokens (e.g. ERC-20) can be swapped for Tezos FA-standard tokens (e.g. FA-1.2, FA-2.0).\");",
									"    pm.expect(dapp.website).to.eql(\"https://tezex.io/\");",
									"    pm.expect(dapp.slug).to.eql(\"tezex\");",
									"    pm.expect(dapp.authors).to.eql([\"Tezos Stable Technologies Ltd\"]);",
									"    pm.expect(dapp.social_links).to.eql([",
									"        \"https://t.me/tezexofficial\",",
									"        \"https://github.com/StableTechnologies/TEZEX\",",
									"        \"https://www.reddit.com/r/tezosexchange/\"",
									"    ]);",
									"    pm.expect(dapp.interfaces).to.eql([]);",
									"    pm.expect(dapp.categories).to.eql([\"DEX\", \"Cross-chain\"]);",
									"    pm.expect(dapp.soon).to.eql(false);",
									"    pm.expect(dapp.logo).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tezex/tezex_logo.png\");",
									"    pm.expect(dapp.cover).to.eql(\"https://bcd-static-assets.fra1.digitaloceanspaces.com/dapps/tezex/tezex_cover.png\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v1/dapps/tezex",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"dapps",
								"tezex"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response have no error\", function () {",
					"    pm.response.to.not.be.error;",
					"});",
					"",
					"pm.test(\"Response must be valid and have a body\", function () {",
					"    pm.response.to.be.ok;",
					"    pm.response.to.be.withBody;",
					"    pm.response.to.be.json;",
					"});",
					"",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	]
}