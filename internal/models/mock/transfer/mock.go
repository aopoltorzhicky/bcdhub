// Code generated by MockGen. DO NOT EDIT.
// Source: transfer/repository.go

// Package mock_transfer is a generated GoMock package.
package mock_transfer

import (
	transfer "github.com/baking-bad/bcdhub/internal/models/transfer"
	tzip "github.com/baking-bad/bcdhub/internal/models/tzip"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(ctx transfer.GetContext) (transfer.Pageable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(transfer.Pageable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx)
}

// GetAll mocks base method
func (m *MockRepository) GetAll(network string, level int64) ([]transfer.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", network, level)
	ret0, _ := ret[0].([]transfer.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll(network, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), network, level)
}

// GetTokenSupply mocks base method
func (m *MockRepository) GetTokenSupply(network, address string, tokenID int64) (transfer.TokenSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSupply", network, address, tokenID)
	ret0, _ := ret[0].(transfer.TokenSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenSupply indicates an expected call of GetTokenSupply
func (mr *MockRepositoryMockRecorder) GetTokenSupply(network, address, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSupply", reflect.TypeOf((*MockRepository)(nil).GetTokenSupply), network, address, tokenID)
}

// GetTokenVolumeSeries mocks base method
func (m *MockRepository) GetTokenVolumeSeries(network, period string, contracts []string, entrypoints []tzip.DAppContract, tokenID uint) ([][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenVolumeSeries", network, period, contracts, entrypoints, tokenID)
	ret0, _ := ret[0].([][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenVolumeSeries indicates an expected call of GetTokenVolumeSeries
func (mr *MockRepositoryMockRecorder) GetTokenVolumeSeries(network, period, contracts, entrypoints, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenVolumeSeries", reflect.TypeOf((*MockRepository)(nil).GetTokenVolumeSeries), network, period, contracts, entrypoints, tokenID)
}
