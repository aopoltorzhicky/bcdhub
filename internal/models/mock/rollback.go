// Code generated by MockGen. DO NOT EDIT.
// Source: rollback.go
//
// Generated by this command:
//
//	mockgen -source=rollback.go -destination=mock/rollback.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/baking-bad/bcdhub/internal/models"
	bigmapdiff "github.com/baking-bad/bcdhub/internal/models/bigmapdiff"
	contract "github.com/baking-bad/bcdhub/internal/models/contract"
	operation "github.com/baking-bad/bcdhub/internal/models/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockRollback is a mock of Rollback interface.
type MockRollback struct {
	ctrl     *gomock.Controller
	recorder *MockRollbackMockRecorder
}

// MockRollbackMockRecorder is the mock recorder for MockRollback.
type MockRollbackMockRecorder struct {
	mock *MockRollback
}

// NewMockRollback creates a new mock instance.
func NewMockRollback(ctrl *gomock.Controller) *MockRollback {
	mock := &MockRollback{ctrl: ctrl}
	mock.recorder = &MockRollbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollback) EXPECT() *MockRollbackMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockRollback) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRollbackMockRecorder) Commit() *RollbackCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRollback)(nil).Commit))
	return &RollbackCommitCall{Call: call}
}

// RollbackCommitCall wrap *gomock.Call
type RollbackCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackCommitCall) Return(arg0 error) *RollbackCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackCommitCall) Do(f func() error) *RollbackCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackCommitCall) DoAndReturn(f func() error) *RollbackCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAll mocks base method.
func (m *MockRollback) DeleteAll(ctx context.Context, model any, level int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, model, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRollbackMockRecorder) DeleteAll(ctx, model, level any) *RollbackDeleteAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRollback)(nil).DeleteAll), ctx, model, level)
	return &RollbackDeleteAllCall{Call: call}
}

// RollbackDeleteAllCall wrap *gomock.Call
type RollbackDeleteAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackDeleteAllCall) Return(arg0 error) *RollbackDeleteAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackDeleteAllCall) Do(f func(context.Context, any, int64) error) *RollbackDeleteAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackDeleteAllCall) DoAndReturn(f func(context.Context, any, int64) error) *RollbackDeleteAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteBigMapState mocks base method.
func (m *MockRollback) DeleteBigMapState(ctx context.Context, state bigmapdiff.BigMapState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBigMapState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBigMapState indicates an expected call of DeleteBigMapState.
func (mr *MockRollbackMockRecorder) DeleteBigMapState(ctx, state any) *RollbackDeleteBigMapStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBigMapState", reflect.TypeOf((*MockRollback)(nil).DeleteBigMapState), ctx, state)
	return &RollbackDeleteBigMapStateCall{Call: call}
}

// RollbackDeleteBigMapStateCall wrap *gomock.Call
type RollbackDeleteBigMapStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackDeleteBigMapStateCall) Return(arg0 error) *RollbackDeleteBigMapStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackDeleteBigMapStateCall) Do(f func(context.Context, bigmapdiff.BigMapState) error) *RollbackDeleteBigMapStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackDeleteBigMapStateCall) DoAndReturn(f func(context.Context, bigmapdiff.BigMapState) error) *RollbackDeleteBigMapStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteScriptsConstants mocks base method.
func (m *MockRollback) DeleteScriptsConstants(ctx context.Context, scriptIds, constantsIds []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScriptsConstants", ctx, scriptIds, constantsIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScriptsConstants indicates an expected call of DeleteScriptsConstants.
func (mr *MockRollbackMockRecorder) DeleteScriptsConstants(ctx, scriptIds, constantsIds any) *RollbackDeleteScriptsConstantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScriptsConstants", reflect.TypeOf((*MockRollback)(nil).DeleteScriptsConstants), ctx, scriptIds, constantsIds)
	return &RollbackDeleteScriptsConstantsCall{Call: call}
}

// RollbackDeleteScriptsConstantsCall wrap *gomock.Call
type RollbackDeleteScriptsConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackDeleteScriptsConstantsCall) Return(arg0 error) *RollbackDeleteScriptsConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackDeleteScriptsConstantsCall) Do(f func(context.Context, []int64, []int64) error) *RollbackDeleteScriptsConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackDeleteScriptsConstantsCall) DoAndReturn(f func(context.Context, []int64, []int64) error) *RollbackDeleteScriptsConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLastAction mocks base method.
func (m *MockRollback) GetLastAction(ctx context.Context, addressIds ...int64) ([]models.LastAction, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addressIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastAction", varargs...)
	ret0, _ := ret[0].([]models.LastAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastAction indicates an expected call of GetLastAction.
func (mr *MockRollbackMockRecorder) GetLastAction(ctx any, addressIds ...any) *RollbackGetLastActionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addressIds...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAction", reflect.TypeOf((*MockRollback)(nil).GetLastAction), varargs...)
	return &RollbackGetLastActionCall{Call: call}
}

// RollbackGetLastActionCall wrap *gomock.Call
type RollbackGetLastActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackGetLastActionCall) Return(arg0 []models.LastAction, arg1 error) *RollbackGetLastActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackGetLastActionCall) Do(f func(context.Context, ...int64) ([]models.LastAction, error)) *RollbackGetLastActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackGetLastActionCall) DoAndReturn(f func(context.Context, ...int64) ([]models.LastAction, error)) *RollbackGetLastActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperations mocks base method.
func (m *MockRollback) GetOperations(ctx context.Context, level int64) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", ctx, level)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockRollbackMockRecorder) GetOperations(ctx, level any) *RollbackGetOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockRollback)(nil).GetOperations), ctx, level)
	return &RollbackGetOperationsCall{Call: call}
}

// RollbackGetOperationsCall wrap *gomock.Call
type RollbackGetOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackGetOperationsCall) Return(arg0 []operation.Operation, arg1 error) *RollbackGetOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackGetOperationsCall) Do(f func(context.Context, int64) ([]operation.Operation, error)) *RollbackGetOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackGetOperationsCall) DoAndReturn(f func(context.Context, int64) ([]operation.Operation, error)) *RollbackGetOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GlobalConstants mocks base method.
func (m *MockRollback) GlobalConstants(ctx context.Context, level int64) ([]contract.GlobalConstant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalConstants", ctx, level)
	ret0, _ := ret[0].([]contract.GlobalConstant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalConstants indicates an expected call of GlobalConstants.
func (mr *MockRollbackMockRecorder) GlobalConstants(ctx, level any) *RollbackGlobalConstantsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalConstants", reflect.TypeOf((*MockRollback)(nil).GlobalConstants), ctx, level)
	return &RollbackGlobalConstantsCall{Call: call}
}

// RollbackGlobalConstantsCall wrap *gomock.Call
type RollbackGlobalConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackGlobalConstantsCall) Return(arg0 []contract.GlobalConstant, arg1 error) *RollbackGlobalConstantsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackGlobalConstantsCall) Do(f func(context.Context, int64) ([]contract.GlobalConstant, error)) *RollbackGlobalConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackGlobalConstantsCall) DoAndReturn(f func(context.Context, int64) ([]contract.GlobalConstant, error)) *RollbackGlobalConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastDiff mocks base method.
func (m *MockRollback) LastDiff(ctx context.Context, ptr int64, keyHash string, skipRemoved bool) (bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastDiff", ctx, ptr, keyHash, skipRemoved)
	ret0, _ := ret[0].(bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastDiff indicates an expected call of LastDiff.
func (mr *MockRollbackMockRecorder) LastDiff(ctx, ptr, keyHash, skipRemoved any) *RollbackLastDiffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastDiff", reflect.TypeOf((*MockRollback)(nil).LastDiff), ctx, ptr, keyHash, skipRemoved)
	return &RollbackLastDiffCall{Call: call}
}

// RollbackLastDiffCall wrap *gomock.Call
type RollbackLastDiffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackLastDiffCall) Return(arg0 bigmapdiff.BigMapDiff, arg1 error) *RollbackLastDiffCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackLastDiffCall) Do(f func(context.Context, int64, string, bool) (bigmapdiff.BigMapDiff, error)) *RollbackLastDiffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackLastDiffCall) DoAndReturn(f func(context.Context, int64, string, bool) (bigmapdiff.BigMapDiff, error)) *RollbackLastDiffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Protocols mocks base method.
func (m *MockRollback) Protocols(ctx context.Context, level int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protocols", ctx, level)
	ret0, _ := ret[0].(error)
	return ret0
}

// Protocols indicates an expected call of Protocols.
func (mr *MockRollbackMockRecorder) Protocols(ctx, level any) *RollbackProtocolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protocols", reflect.TypeOf((*MockRollback)(nil).Protocols), ctx, level)
	return &RollbackProtocolsCall{Call: call}
}

// RollbackProtocolsCall wrap *gomock.Call
type RollbackProtocolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackProtocolsCall) Return(arg0 error) *RollbackProtocolsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackProtocolsCall) Do(f func(context.Context, int64) error) *RollbackProtocolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackProtocolsCall) DoAndReturn(f func(context.Context, int64) error) *RollbackProtocolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockRollback) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRollbackMockRecorder) Rollback() *RollbackRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRollback)(nil).Rollback))
	return &RollbackRollbackCall{Call: call}
}

// RollbackRollbackCall wrap *gomock.Call
type RollbackRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackRollbackCall) Return(arg0 error) *RollbackRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackRollbackCall) Do(f func() error) *RollbackRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackRollbackCall) DoAndReturn(f func() error) *RollbackRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBigMapState mocks base method.
func (m *MockRollback) SaveBigMapState(ctx context.Context, state bigmapdiff.BigMapState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBigMapState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBigMapState indicates an expected call of SaveBigMapState.
func (mr *MockRollbackMockRecorder) SaveBigMapState(ctx, state any) *RollbackSaveBigMapStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBigMapState", reflect.TypeOf((*MockRollback)(nil).SaveBigMapState), ctx, state)
	return &RollbackSaveBigMapStateCall{Call: call}
}

// RollbackSaveBigMapStateCall wrap *gomock.Call
type RollbackSaveBigMapStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackSaveBigMapStateCall) Return(arg0 error) *RollbackSaveBigMapStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackSaveBigMapStateCall) Do(f func(context.Context, bigmapdiff.BigMapState) error) *RollbackSaveBigMapStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackSaveBigMapStateCall) DoAndReturn(f func(context.Context, bigmapdiff.BigMapState) error) *RollbackSaveBigMapStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Scripts mocks base method.
func (m *MockRollback) Scripts(ctx context.Context, level int64) ([]contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scripts", ctx, level)
	ret0, _ := ret[0].([]contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scripts indicates an expected call of Scripts.
func (mr *MockRollbackMockRecorder) Scripts(ctx, level any) *RollbackScriptsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scripts", reflect.TypeOf((*MockRollback)(nil).Scripts), ctx, level)
	return &RollbackScriptsCall{Call: call}
}

// RollbackScriptsCall wrap *gomock.Call
type RollbackScriptsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackScriptsCall) Return(arg0 []contract.Script, arg1 error) *RollbackScriptsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackScriptsCall) Do(f func(context.Context, int64) ([]contract.Script, error)) *RollbackScriptsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackScriptsCall) DoAndReturn(f func(context.Context, int64) ([]contract.Script, error)) *RollbackScriptsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StatesChangedAtLevel mocks base method.
func (m *MockRollback) StatesChangedAtLevel(ctx context.Context, level int64) ([]bigmapdiff.BigMapState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatesChangedAtLevel", ctx, level)
	ret0, _ := ret[0].([]bigmapdiff.BigMapState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatesChangedAtLevel indicates an expected call of StatesChangedAtLevel.
func (mr *MockRollbackMockRecorder) StatesChangedAtLevel(ctx, level any) *RollbackStatesChangedAtLevelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatesChangedAtLevel", reflect.TypeOf((*MockRollback)(nil).StatesChangedAtLevel), ctx, level)
	return &RollbackStatesChangedAtLevelCall{Call: call}
}

// RollbackStatesChangedAtLevelCall wrap *gomock.Call
type RollbackStatesChangedAtLevelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackStatesChangedAtLevelCall) Return(arg0 []bigmapdiff.BigMapState, arg1 error) *RollbackStatesChangedAtLevelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackStatesChangedAtLevelCall) Do(f func(context.Context, int64) ([]bigmapdiff.BigMapState, error)) *RollbackStatesChangedAtLevelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackStatesChangedAtLevelCall) DoAndReturn(f func(context.Context, int64) ([]bigmapdiff.BigMapState, error)) *RollbackStatesChangedAtLevelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAccountStats mocks base method.
func (m *MockRollback) UpdateAccountStats(ctx context.Context, accountId int64, lastAction time.Time, txCount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountStats", ctx, accountId, lastAction, txCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountStats indicates an expected call of UpdateAccountStats.
func (mr *MockRollbackMockRecorder) UpdateAccountStats(ctx, accountId, lastAction, txCount any) *RollbackUpdateAccountStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountStats", reflect.TypeOf((*MockRollback)(nil).UpdateAccountStats), ctx, accountId, lastAction, txCount)
	return &RollbackUpdateAccountStatsCall{Call: call}
}

// RollbackUpdateAccountStatsCall wrap *gomock.Call
type RollbackUpdateAccountStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RollbackUpdateAccountStatsCall) Return(arg0 error) *RollbackUpdateAccountStatsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RollbackUpdateAccountStatsCall) Do(f func(context.Context, int64, time.Time, int64) error) *RollbackUpdateAccountStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RollbackUpdateAccountStatsCall) DoAndReturn(f func(context.Context, int64, time.Time, int64) error) *RollbackUpdateAccountStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
