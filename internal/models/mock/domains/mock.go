// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/domains/repository.go

// Package domains is a generated GoMock package.
package domains

import (
	contract "github.com/baking-bad/bcdhub/internal/models/contract"
	model "github.com/baking-bad/bcdhub/internal/models/domains"
	transfer "github.com/baking-bad/bcdhub/internal/models/transfer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// TokenBalances mocks base method
func (m *MockRepository) TokenBalances(contract string, accountID, size, offset int64, sort string, hideZeroBalances bool) (model.TokenBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenBalances", contract, accountID, size, offset, sort, hideZeroBalances)
	ret0, _ := ret[0].(model.TokenBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenBalances indicates an expected call of TokenBalances
func (mr *MockRepositoryMockRecorder) TokenBalances(contract, accountID, size, offset, sort, hideZeroBalances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenBalances", reflect.TypeOf((*MockRepository)(nil).TokenBalances), contract, accountID, size, offset, sort, hideZeroBalances)
}

// Transfers mocks base method
func (m *MockRepository) Transfers(ctx transfer.GetContext) (model.TransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfers", ctx)
	ret0, _ := ret[0].(model.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfers indicates an expected call of Transfers
func (mr *MockRepositoryMockRecorder) Transfers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfers", reflect.TypeOf((*MockRepository)(nil).Transfers), ctx)
}

// BigMapDiffs mocks base method
func (m *MockRepository) BigMapDiffs(lastID, size int64) ([]model.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BigMapDiffs", lastID, size)
	ret0, _ := ret[0].([]model.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BigMapDiffs indicates an expected call of BigMapDiffs
func (mr *MockRepositoryMockRecorder) BigMapDiffs(lastID, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BigMapDiffs", reflect.TypeOf((*MockRepository)(nil).BigMapDiffs), lastID, size)
}

// Same mocks base method
func (m *MockRepository) Same(network string, c contract.Contract, limit, offset int) ([]model.Same, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Same", network, c, limit, offset)
	ret0, _ := ret[0].([]model.Same)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Same indicates an expected call of Same
func (mr *MockRepositoryMockRecorder) Same(network, c, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Same", reflect.TypeOf((*MockRepository)(nil).Same), network, c, limit, offset)
}

// SameCount mocks base method
func (m *MockRepository) SameCount(c contract.Contract) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SameCount", c)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SameCount indicates an expected call of SameCount
func (mr *MockRepositoryMockRecorder) SameCount(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SameCount", reflect.TypeOf((*MockRepository)(nil).SameCount), c)
}
