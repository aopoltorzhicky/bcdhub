// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../mock/contract/mock.go -package=contract -typed
//
// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	contract "github.com/baking-bad/bcdhub/internal/models/contract"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count() *RepositoryCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count))
	return &RepositoryCountCall{Call: call}
}

// RepositoryCountCall wrap *gomock.Call
type RepositoryCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryCountCall) Return(arg0 int, arg1 error) *RepositoryCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryCountCall) Do(f func() (int, error)) *RepositoryCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryCountCall) DoAndReturn(f func() (int, error)) *RepositoryCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindOne mocks base method.
func (m *MockRepository) FindOne(tags types.Tags) (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", tags)
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRepositoryMockRecorder) FindOne(tags any) *RepositoryFindOneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRepository)(nil).FindOne), tags)
	return &RepositoryFindOneCall{Call: call}
}

// RepositoryFindOneCall wrap *gomock.Call
type RepositoryFindOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryFindOneCall) Return(arg0 contract.Contract, arg1 error) *RepositoryFindOneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryFindOneCall) Do(f func(types.Tags) (contract.Contract, error)) *RepositoryFindOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryFindOneCall) DoAndReturn(f func(types.Tags) (contract.Contract, error)) *RepositoryFindOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRepository) Get(address string) (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", address)
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(address any) *RepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), address)
	return &RepositoryGetCall{Call: call}
}

// RepositoryGetCall wrap *gomock.Call
type RepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetCall) Return(arg0 contract.Contract, arg1 error) *RepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetCall) Do(f func(string) (contract.Contract, error)) *RepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetCall) DoAndReturn(f func(string) (contract.Contract, error)) *RepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(filters map[string]any) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", filters)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(filters any) *RepositoryGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), filters)
	return &RepositoryGetAllCall{Call: call}
}

// RepositoryGetAllCall wrap *gomock.Call
type RepositoryGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetAllCall) Return(arg0 []contract.Contract, arg1 error) *RepositoryGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetAllCall) Do(f func(map[string]any) ([]contract.Contract, error)) *RepositoryGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetAllCall) DoAndReturn(f func(map[string]any) ([]contract.Contract, error)) *RepositoryGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRandom mocks base method.
func (m *MockRepository) GetRandom() (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom")
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockRepositoryMockRecorder) GetRandom() *RepositoryGetRandomCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockRepository)(nil).GetRandom))
	return &RepositoryGetRandomCall{Call: call}
}

// RepositoryGetRandomCall wrap *gomock.Call
type RepositoryGetRandomCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetRandomCall) Return(arg0 contract.Contract, arg1 error) *RepositoryGetRandomCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetRandomCall) Do(f func() (contract.Contract, error)) *RepositoryGetRandomCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetRandomCall) DoAndReturn(f func() (contract.Contract, error)) *RepositoryGetRandomCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTokens mocks base method.
func (m *MockRepository) GetTokens(tokenInterface string, offset, size int64) ([]contract.Contract, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", tokenInterface, offset, size)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokens indicates an expected call of GetTokens.
func (mr *MockRepositoryMockRecorder) GetTokens(tokenInterface, offset, size any) *RepositoryGetTokensCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockRepository)(nil).GetTokens), tokenInterface, offset, size)
	return &RepositoryGetTokensCall{Call: call}
}

// RepositoryGetTokensCall wrap *gomock.Call
type RepositoryGetTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetTokensCall) Return(arg0 []contract.Contract, arg1 int64, arg2 error) *RepositoryGetTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetTokensCall) Do(f func(string, int64, int64) ([]contract.Contract, int64, error)) *RepositoryGetTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetTokensCall) DoAndReturn(f func(string, int64, int64) ([]contract.Contract, int64, error)) *RepositoryGetTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecentlyCalled mocks base method.
func (m *MockRepository) RecentlyCalled(offset, size int64) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentlyCalled", offset, size)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentlyCalled indicates an expected call of RecentlyCalled.
func (mr *MockRepositoryMockRecorder) RecentlyCalled(offset, size any) *RepositoryRecentlyCalledCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentlyCalled", reflect.TypeOf((*MockRepository)(nil).RecentlyCalled), offset, size)
	return &RepositoryRecentlyCalledCall{Call: call}
}

// RepositoryRecentlyCalledCall wrap *gomock.Call
type RepositoryRecentlyCalledCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryRecentlyCalledCall) Return(arg0 []contract.Contract, arg1 error) *RepositoryRecentlyCalledCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryRecentlyCalledCall) Do(f func(int64, int64) ([]contract.Contract, error)) *RepositoryRecentlyCalledCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryRecentlyCalledCall) DoAndReturn(f func(int64, int64) ([]contract.Contract, error)) *RepositoryRecentlyCalledCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Script mocks base method.
func (m *MockRepository) Script(address, symLink string) (contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Script", address, symLink)
	ret0, _ := ret[0].(contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Script indicates an expected call of Script.
func (mr *MockRepositoryMockRecorder) Script(address, symLink any) *RepositoryScriptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Script", reflect.TypeOf((*MockRepository)(nil).Script), address, symLink)
	return &RepositoryScriptCall{Call: call}
}

// RepositoryScriptCall wrap *gomock.Call
type RepositoryScriptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryScriptCall) Return(arg0 contract.Script, arg1 error) *RepositoryScriptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryScriptCall) Do(f func(string, string) (contract.Script, error)) *RepositoryScriptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryScriptCall) DoAndReturn(f func(string, string) (contract.Script, error)) *RepositoryScriptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScriptPart mocks base method.
func (m *MockRepository) ScriptPart(address, symLink, part string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptPart", address, symLink, part)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScriptPart indicates an expected call of ScriptPart.
func (mr *MockRepositoryMockRecorder) ScriptPart(address, symLink, part any) *RepositoryScriptPartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptPart", reflect.TypeOf((*MockRepository)(nil).ScriptPart), address, symLink, part)
	return &RepositoryScriptPartCall{Call: call}
}

// RepositoryScriptPartCall wrap *gomock.Call
type RepositoryScriptPartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryScriptPartCall) Return(arg0 []byte, arg1 error) *RepositoryScriptPartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryScriptPartCall) Do(f func(string, string, string) ([]byte, error)) *RepositoryScriptPartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryScriptPartCall) DoAndReturn(f func(string, string, string) ([]byte, error)) *RepositoryScriptPartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockScriptRepository is a mock of ScriptRepository interface.
type MockScriptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScriptRepositoryMockRecorder
}

// MockScriptRepositoryMockRecorder is the mock recorder for MockScriptRepository.
type MockScriptRepositoryMockRecorder struct {
	mock *MockScriptRepository
}

// NewMockScriptRepository creates a new mock instance.
func NewMockScriptRepository(ctrl *gomock.Controller) *MockScriptRepository {
	mock := &MockScriptRepository{ctrl: ctrl}
	mock.recorder = &MockScriptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptRepository) EXPECT() *MockScriptRepositoryMockRecorder {
	return m.recorder
}

// ByHash mocks base method.
func (m *MockScriptRepository) ByHash(hash string) (contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", hash)
	ret0, _ := ret[0].(contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash.
func (mr *MockScriptRepositoryMockRecorder) ByHash(hash any) *ScriptRepositoryByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockScriptRepository)(nil).ByHash), hash)
	return &ScriptRepositoryByHashCall{Call: call}
}

// ScriptRepositoryByHashCall wrap *gomock.Call
type ScriptRepositoryByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryByHashCall) Return(arg0 contract.Script, arg1 error) *ScriptRepositoryByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryByHashCall) Do(f func(string) (contract.Script, error)) *ScriptRepositoryByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryByHashCall) DoAndReturn(f func(string) (contract.Script, error)) *ScriptRepositoryByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code mocks base method.
func (m *MockScriptRepository) Code(id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Code indicates an expected call of Code.
func (mr *MockScriptRepositoryMockRecorder) Code(id any) *ScriptRepositoryCodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockScriptRepository)(nil).Code), id)
	return &ScriptRepositoryCodeCall{Call: call}
}

// ScriptRepositoryCodeCall wrap *gomock.Call
type ScriptRepositoryCodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryCodeCall) Return(arg0 []byte, arg1 error) *ScriptRepositoryCodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryCodeCall) Do(f func(int64) ([]byte, error)) *ScriptRepositoryCodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryCodeCall) DoAndReturn(f func(int64) ([]byte, error)) *ScriptRepositoryCodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScripts mocks base method.
func (m *MockScriptRepository) GetScripts(limit, offset int) ([]contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScripts", limit, offset)
	ret0, _ := ret[0].([]contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScripts indicates an expected call of GetScripts.
func (mr *MockScriptRepositoryMockRecorder) GetScripts(limit, offset any) *ScriptRepositoryGetScriptsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScripts", reflect.TypeOf((*MockScriptRepository)(nil).GetScripts), limit, offset)
	return &ScriptRepositoryGetScriptsCall{Call: call}
}

// ScriptRepositoryGetScriptsCall wrap *gomock.Call
type ScriptRepositoryGetScriptsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryGetScriptsCall) Return(arg0 []contract.Script, arg1 error) *ScriptRepositoryGetScriptsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryGetScriptsCall) Do(f func(int, int) ([]contract.Script, error)) *ScriptRepositoryGetScriptsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryGetScriptsCall) DoAndReturn(f func(int, int) ([]contract.Script, error)) *ScriptRepositoryGetScriptsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Parameter mocks base method.
func (m *MockScriptRepository) Parameter(id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameter", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parameter indicates an expected call of Parameter.
func (mr *MockScriptRepositoryMockRecorder) Parameter(id any) *ScriptRepositoryParameterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameter", reflect.TypeOf((*MockScriptRepository)(nil).Parameter), id)
	return &ScriptRepositoryParameterCall{Call: call}
}

// ScriptRepositoryParameterCall wrap *gomock.Call
type ScriptRepositoryParameterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryParameterCall) Return(arg0 []byte, arg1 error) *ScriptRepositoryParameterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryParameterCall) Do(f func(int64) ([]byte, error)) *ScriptRepositoryParameterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryParameterCall) DoAndReturn(f func(int64) ([]byte, error)) *ScriptRepositoryParameterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Storage mocks base method.
func (m *MockScriptRepository) Storage(id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockScriptRepositoryMockRecorder) Storage(id any) *ScriptRepositoryStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockScriptRepository)(nil).Storage), id)
	return &ScriptRepositoryStorageCall{Call: call}
}

// ScriptRepositoryStorageCall wrap *gomock.Call
type ScriptRepositoryStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryStorageCall) Return(arg0 []byte, arg1 error) *ScriptRepositoryStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryStorageCall) Do(f func(int64) ([]byte, error)) *ScriptRepositoryStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryStorageCall) DoAndReturn(f func(int64) ([]byte, error)) *ScriptRepositoryStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProjectID mocks base method.
func (m *MockScriptRepository) UpdateProjectID(script []contract.Script) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectID", script)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectID indicates an expected call of UpdateProjectID.
func (mr *MockScriptRepositoryMockRecorder) UpdateProjectID(script any) *ScriptRepositoryUpdateProjectIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectID", reflect.TypeOf((*MockScriptRepository)(nil).UpdateProjectID), script)
	return &ScriptRepositoryUpdateProjectIDCall{Call: call}
}

// ScriptRepositoryUpdateProjectIDCall wrap *gomock.Call
type ScriptRepositoryUpdateProjectIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryUpdateProjectIDCall) Return(arg0 error) *ScriptRepositoryUpdateProjectIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryUpdateProjectIDCall) Do(f func([]contract.Script) error) *ScriptRepositoryUpdateProjectIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryUpdateProjectIDCall) DoAndReturn(f func([]contract.Script) error) *ScriptRepositoryUpdateProjectIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Views mocks base method.
func (m *MockScriptRepository) Views(id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Views", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Views indicates an expected call of Views.
func (mr *MockScriptRepositoryMockRecorder) Views(id any) *ScriptRepositoryViewsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Views", reflect.TypeOf((*MockScriptRepository)(nil).Views), id)
	return &ScriptRepositoryViewsCall{Call: call}
}

// ScriptRepositoryViewsCall wrap *gomock.Call
type ScriptRepositoryViewsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ScriptRepositoryViewsCall) Return(arg0 []byte, arg1 error) *ScriptRepositoryViewsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ScriptRepositoryViewsCall) Do(f func(int64) ([]byte, error)) *ScriptRepositoryViewsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ScriptRepositoryViewsCall) DoAndReturn(f func(int64) ([]byte, error)) *ScriptRepositoryViewsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConstantRepository is a mock of ConstantRepository interface.
type MockConstantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConstantRepositoryMockRecorder
}

// MockConstantRepositoryMockRecorder is the mock recorder for MockConstantRepository.
type MockConstantRepositoryMockRecorder struct {
	mock *MockConstantRepository
}

// NewMockConstantRepository creates a new mock instance.
func NewMockConstantRepository(ctrl *gomock.Controller) *MockConstantRepository {
	mock := &MockConstantRepository{ctrl: ctrl}
	mock.recorder = &MockConstantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstantRepository) EXPECT() *MockConstantRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockConstantRepository) All(addresses ...string) ([]contract.GlobalConstant, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "All", varargs...)
	ret0, _ := ret[0].([]contract.GlobalConstant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockConstantRepositoryMockRecorder) All(addresses ...any) *ConstantRepositoryAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockConstantRepository)(nil).All), addresses...)
	return &ConstantRepositoryAllCall{Call: call}
}

// ConstantRepositoryAllCall wrap *gomock.Call
type ConstantRepositoryAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConstantRepositoryAllCall) Return(arg0 []contract.GlobalConstant, arg1 error) *ConstantRepositoryAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConstantRepositoryAllCall) Do(f func(...string) ([]contract.GlobalConstant, error)) *ConstantRepositoryAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConstantRepositoryAllCall) DoAndReturn(f func(...string) ([]contract.GlobalConstant, error)) *ConstantRepositoryAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContractList mocks base method.
func (m *MockConstantRepository) ContractList(address string, size, offset int64) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractList", address, size, offset)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractList indicates an expected call of ContractList.
func (mr *MockConstantRepositoryMockRecorder) ContractList(address, size, offset any) *ConstantRepositoryContractListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractList", reflect.TypeOf((*MockConstantRepository)(nil).ContractList), address, size, offset)
	return &ConstantRepositoryContractListCall{Call: call}
}

// ConstantRepositoryContractListCall wrap *gomock.Call
type ConstantRepositoryContractListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConstantRepositoryContractListCall) Return(arg0 []contract.Contract, arg1 error) *ConstantRepositoryContractListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConstantRepositoryContractListCall) Do(f func(string, int64, int64) ([]contract.Contract, error)) *ConstantRepositoryContractListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConstantRepositoryContractListCall) DoAndReturn(f func(string, int64, int64) ([]contract.Contract, error)) *ConstantRepositoryContractListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ForContract mocks base method.
func (m *MockConstantRepository) ForContract(address string, size, offset int64) ([]contract.GlobalConstant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForContract", address, size, offset)
	ret0, _ := ret[0].([]contract.GlobalConstant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForContract indicates an expected call of ForContract.
func (mr *MockConstantRepositoryMockRecorder) ForContract(address, size, offset any) *ConstantRepositoryForContractCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForContract", reflect.TypeOf((*MockConstantRepository)(nil).ForContract), address, size, offset)
	return &ConstantRepositoryForContractCall{Call: call}
}

// ConstantRepositoryForContractCall wrap *gomock.Call
type ConstantRepositoryForContractCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConstantRepositoryForContractCall) Return(arg0 []contract.GlobalConstant, arg1 error) *ConstantRepositoryForContractCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConstantRepositoryForContractCall) Do(f func(string, int64, int64) ([]contract.GlobalConstant, error)) *ConstantRepositoryForContractCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConstantRepositoryForContractCall) DoAndReturn(f func(string, int64, int64) ([]contract.GlobalConstant, error)) *ConstantRepositoryForContractCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockConstantRepository) Get(address string) (contract.GlobalConstant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", address)
	ret0, _ := ret[0].(contract.GlobalConstant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConstantRepositoryMockRecorder) Get(address any) *ConstantRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConstantRepository)(nil).Get), address)
	return &ConstantRepositoryGetCall{Call: call}
}

// ConstantRepositoryGetCall wrap *gomock.Call
type ConstantRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConstantRepositoryGetCall) Return(arg0 contract.GlobalConstant, arg1 error) *ConstantRepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConstantRepositoryGetCall) Do(f func(string) (contract.GlobalConstant, error)) *ConstantRepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConstantRepositoryGetCall) DoAndReturn(f func(string) (contract.GlobalConstant, error)) *ConstantRepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockConstantRepository) List(size, offset int64, orderBy, sort string) ([]contract.ListGlobalConstantItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", size, offset, orderBy, sort)
	ret0, _ := ret[0].([]contract.ListGlobalConstantItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConstantRepositoryMockRecorder) List(size, offset, orderBy, sort any) *ConstantRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConstantRepository)(nil).List), size, offset, orderBy, sort)
	return &ConstantRepositoryListCall{Call: call}
}

// ConstantRepositoryListCall wrap *gomock.Call
type ConstantRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConstantRepositoryListCall) Return(arg0 []contract.ListGlobalConstantItem, arg1 error) *ConstantRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConstantRepositoryListCall) Do(f func(int64, int64, string, string) ([]contract.ListGlobalConstantItem, error)) *ConstantRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConstantRepositoryListCall) DoAndReturn(f func(int64, int64, string, string) ([]contract.ListGlobalConstantItem, error)) *ConstantRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
