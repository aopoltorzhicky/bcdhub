// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/contract/repository.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	contract "github.com/baking-bad/bcdhub/internal/models/contract"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(network types.Network, address string) (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", network, address)
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), network, address)
}

// GetMany mocks base method
func (m *MockRepository) GetMany(by map[string]interface{}) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", by)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany
func (mr *MockRepositoryMockRecorder) GetMany(by interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockRepository)(nil).GetMany), by)
}

// GetRandom mocks base method
func (m *MockRepository) GetRandom(network types.Network) (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", network)
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom
func (mr *MockRepositoryMockRecorder) GetRandom(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockRepository)(nil).GetRandom), network)
}

// GetTokens mocks base method
func (m *MockRepository) GetTokens(network types.Network, tokenInterface string, offset, size int64) ([]contract.Contract, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", network, tokenInterface, offset, size)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokens indicates an expected call of GetTokens
func (mr *MockRepositoryMockRecorder) GetTokens(network, tokenInterface, offset, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockRepository)(nil).GetTokens), network, tokenInterface, offset, size)
}

// GetSameContracts mocks base method
func (m *MockRepository) GetSameContracts(contact contract.Contract, manager string, size, offset int64) (contract.SameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSameContracts", contact, manager, size, offset)
	ret0, _ := ret[0].(contract.SameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSameContracts indicates an expected call of GetSameContracts
func (mr *MockRepositoryMockRecorder) GetSameContracts(contact, manager, size, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSameContracts", reflect.TypeOf((*MockRepository)(nil).GetSameContracts), contact, manager, size, offset)
}

// GetSimilarContracts mocks base method
func (m *MockRepository) GetSimilarContracts(arg0 contract.Contract, arg1, arg2 int64) ([]contract.Similar, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]contract.Similar)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSimilarContracts indicates an expected call of GetSimilarContracts
func (mr *MockRepositoryMockRecorder) GetSimilarContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarContracts", reflect.TypeOf((*MockRepository)(nil).GetSimilarContracts), arg0, arg1, arg2)
}

// Stats mocks base method
func (m *MockRepository) Stats(c contract.Contract) (contract.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", c)
	ret0, _ := ret[0].(contract.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats
func (mr *MockRepositoryMockRecorder) Stats(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRepository)(nil).Stats), c)
}

// Script mocks base method
func (m *MockRepository) Script(network types.Network, address, symLink string) (contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Script", network, address, symLink)
	ret0, _ := ret[0].(contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Script indicates an expected call of Script
func (mr *MockRepositoryMockRecorder) Script(network, address, symLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Script", reflect.TypeOf((*MockRepository)(nil).Script), network, address, symLink)
}

// MockScriptRepository is a mock of ScriptRepository interface
type MockScriptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScriptRepositoryMockRecorder
}

// MockScriptRepositoryMockRecorder is the mock recorder for MockScriptRepository
type MockScriptRepositoryMockRecorder struct {
	mock *MockScriptRepository
}

// NewMockScriptRepository creates a new mock instance
func NewMockScriptRepository(ctrl *gomock.Controller) *MockScriptRepository {
	mock := &MockScriptRepository{ctrl: ctrl}
	mock.recorder = &MockScriptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScriptRepository) EXPECT() *MockScriptRepositoryMockRecorder {
	return m.recorder
}

// GetScripts mocks base method
func (m *MockScriptRepository) GetScripts(limit, offset int) ([]contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScripts", limit, offset)
	ret0, _ := ret[0].([]contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScripts indicates an expected call of GetScripts
func (mr *MockScriptRepositoryMockRecorder) GetScripts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScripts", reflect.TypeOf((*MockScriptRepository)(nil).GetScripts), limit, offset)
}

// ByHash mocks base method
func (m *MockScriptRepository) ByHash(hash string) (contract.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", hash)
	ret0, _ := ret[0].(contract.Script)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash
func (mr *MockScriptRepositoryMockRecorder) ByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockScriptRepository)(nil).ByHash), hash)
}

// UpdateProjectID mocks base method
func (m *MockScriptRepository) UpdateProjectID(script []contract.Script) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectID", script)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectID indicates an expected call of UpdateProjectID
func (mr *MockScriptRepositoryMockRecorder) UpdateProjectID(script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectID", reflect.TypeOf((*MockScriptRepository)(nil).UpdateProjectID), script)
}
