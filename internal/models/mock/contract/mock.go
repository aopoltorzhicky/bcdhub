// Code generated by MockGen. DO NOT EDIT.
// Source: contract/repository.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	contract "github.com/baking-bad/bcdhub/internal/models/contract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(arg0 map[string]interface{}) (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), arg0)
}

// GetMany mocks base method
func (m *MockRepository) GetMany(arg0 map[string]interface{}) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany
func (mr *MockRepositoryMockRecorder) GetMany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockRepository)(nil).GetMany), arg0)
}

// GetRandom mocks base method
func (m *MockRepository) GetRandom() (contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom")
	ret0, _ := ret[0].(contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom
func (mr *MockRepositoryMockRecorder) GetRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockRepository)(nil).GetRandom))
}

// GetMigrationsCount mocks base method
func (m *MockRepository) GetMigrationsCount(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationsCount indicates an expected call of GetMigrationsCount
func (mr *MockRepositoryMockRecorder) GetMigrationsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationsCount", reflect.TypeOf((*MockRepository)(nil).GetMigrationsCount), arg0, arg1)
}

// GetAddressesByNetworkAndLevel mocks base method
func (m *MockRepository) GetAddressesByNetworkAndLevel(arg0 string, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByNetworkAndLevel", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByNetworkAndLevel indicates an expected call of GetAddressesByNetworkAndLevel
func (mr *MockRepositoryMockRecorder) GetAddressesByNetworkAndLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByNetworkAndLevel", reflect.TypeOf((*MockRepository)(nil).GetAddressesByNetworkAndLevel), arg0, arg1)
}

// GetIDsByAddresses mocks base method
func (m *MockRepository) GetIDsByAddresses(arg0 []string, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDsByAddresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDsByAddresses indicates an expected call of GetIDsByAddresses
func (mr *MockRepositoryMockRecorder) GetIDsByAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDsByAddresses", reflect.TypeOf((*MockRepository)(nil).GetIDsByAddresses), arg0, arg1)
}

// GetByLevels mocks base method
func (m *MockRepository) GetByLevels(arg0 string, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLevels", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLevels indicates an expected call of GetByLevels
func (mr *MockRepositoryMockRecorder) GetByLevels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLevels", reflect.TypeOf((*MockRepository)(nil).GetByLevels), arg0, arg1, arg2)
}

// IsFA mocks base method
func (m *MockRepository) IsFA(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFA", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFA indicates an expected call of IsFA
func (mr *MockRepositoryMockRecorder) IsFA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFA", reflect.TypeOf((*MockRepository)(nil).IsFA), arg0, arg1)
}

// UpdateMigrationsCount mocks base method
func (m *MockRepository) UpdateMigrationsCount(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMigrationsCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMigrationsCount indicates an expected call of UpdateMigrationsCount
func (mr *MockRepositoryMockRecorder) UpdateMigrationsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationsCount", reflect.TypeOf((*MockRepository)(nil).UpdateMigrationsCount), arg0, arg1)
}

// GetByAddresses mocks base method
func (m *MockRepository) GetByAddresses(addresses []contract.Address) ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddresses", addresses)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddresses indicates an expected call of GetByAddresses
func (mr *MockRepositoryMockRecorder) GetByAddresses(addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddresses", reflect.TypeOf((*MockRepository)(nil).GetByAddresses), addresses)
}

// GetTokens mocks base method
func (m *MockRepository) GetTokens(arg0, arg1 string, arg2, arg3 int64) ([]contract.Contract, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokens indicates an expected call of GetTokens
func (mr *MockRepositoryMockRecorder) GetTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockRepository)(nil).GetTokens), arg0, arg1, arg2, arg3)
}

// GetProjectsLastContract mocks base method
func (m *MockRepository) GetProjectsLastContract() ([]contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsLastContract")
	ret0, _ := ret[0].([]contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsLastContract indicates an expected call of GetProjectsLastContract
func (mr *MockRepositoryMockRecorder) GetProjectsLastContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsLastContract", reflect.TypeOf((*MockRepository)(nil).GetProjectsLastContract))
}

// GetSameContracts mocks base method
func (m *MockRepository) GetSameContracts(arg0 contract.Contract, arg1, arg2 int64) (contract.SameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSameContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].(contract.SameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSameContracts indicates an expected call of GetSameContracts
func (mr *MockRepositoryMockRecorder) GetSameContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSameContracts", reflect.TypeOf((*MockRepository)(nil).GetSameContracts), arg0, arg1, arg2)
}

// GetSimilarContracts mocks base method
func (m *MockRepository) GetSimilarContracts(arg0 contract.Contract, arg1, arg2 int64) ([]contract.Similar, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]contract.Similar)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSimilarContracts indicates an expected call of GetSimilarContracts
func (mr *MockRepositoryMockRecorder) GetSimilarContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarContracts", reflect.TypeOf((*MockRepository)(nil).GetSimilarContracts), arg0, arg1, arg2)
}

// GetDiffTasks mocks base method
func (m *MockRepository) GetDiffTasks() ([]contract.DiffTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiffTasks")
	ret0, _ := ret[0].([]contract.DiffTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiffTasks indicates an expected call of GetDiffTasks
func (mr *MockRepositoryMockRecorder) GetDiffTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiffTasks", reflect.TypeOf((*MockRepository)(nil).GetDiffTasks))
}
