// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/baking-bad/bcdhub/internal/models"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGeneralRepository is a mock of GeneralRepository interface
type MockGeneralRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralRepositoryMockRecorder
}

// MockGeneralRepositoryMockRecorder is the mock recorder for MockGeneralRepository
type MockGeneralRepositoryMockRecorder struct {
	mock *MockGeneralRepository
}

// NewMockGeneralRepository creates a new mock instance
func NewMockGeneralRepository(ctrl *gomock.Controller) *MockGeneralRepository {
	mock := &MockGeneralRepository{ctrl: ctrl}
	mock.recorder = &MockGeneralRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeneralRepository) EXPECT() *MockGeneralRepositoryMockRecorder {
	return m.recorder
}

// CreateIndexes mocks base method
func (m *MockGeneralRepository) CreateIndexes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes
func (mr *MockGeneralRepositoryMockRecorder) CreateIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockGeneralRepository)(nil).CreateIndexes))
}

// DeleteIndices mocks base method
func (m *MockGeneralRepository) DeleteIndices(indices []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndices", indices)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndices indicates an expected call of DeleteIndices
func (mr *MockGeneralRepositoryMockRecorder) DeleteIndices(indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndices", reflect.TypeOf((*MockGeneralRepository)(nil).DeleteIndices), indices)
}

// DeleteByContract mocks base method
func (m *MockGeneralRepository) DeleteByContract(network types.Network, indices []string, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByContract", network, indices, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByContract indicates an expected call of DeleteByContract
func (mr *MockGeneralRepositoryMockRecorder) DeleteByContract(network, indices, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByContract", reflect.TypeOf((*MockGeneralRepository)(nil).DeleteByContract), network, indices, address)
}

// GetByID mocks base method
func (m *MockGeneralRepository) GetByID(output models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID
func (mr *MockGeneralRepositoryMockRecorder) GetByID(output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGeneralRepository)(nil).GetByID), output)
}

// GetByNetwork mocks base method
func (m *MockGeneralRepository) GetByNetwork(network types.Network, index string) ([]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetwork", network, index)
	ret0, _ := ret[0].([]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNetwork indicates an expected call of GetByNetwork
func (mr *MockGeneralRepositoryMockRecorder) GetByNetwork(network, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetwork", reflect.TypeOf((*MockGeneralRepository)(nil).GetByNetwork), network, index)
}

// UpdateDoc mocks base method
func (m *MockGeneralRepository) UpdateDoc(model models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoc", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoc indicates an expected call of UpdateDoc
func (mr *MockGeneralRepositoryMockRecorder) UpdateDoc(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoc", reflect.TypeOf((*MockGeneralRepository)(nil).UpdateDoc), model)
}

// UpdateFields mocks base method
func (m *MockGeneralRepository) UpdateFields(index string, id int64, data interface{}, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{index, id, data}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFields indicates an expected call of UpdateFields
func (mr *MockGeneralRepositoryMockRecorder) UpdateFields(index, id, data interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{index, id, data}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFields", reflect.TypeOf((*MockGeneralRepository)(nil).UpdateFields), varargs...)
}

// GetEvents mocks base method
func (m *MockGeneralRepository) GetEvents(arg0 []models.SubscriptionRequest, arg1, arg2 int64) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockGeneralRepositoryMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockGeneralRepository)(nil).GetEvents), arg0, arg1, arg2)
}

// GetNetworkCountStats mocks base method
func (m *MockGeneralRepository) GetNetworkCountStats(network types.Network) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkCountStats", network)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkCountStats indicates an expected call of GetNetworkCountStats
func (mr *MockGeneralRepositoryMockRecorder) GetNetworkCountStats(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkCountStats", reflect.TypeOf((*MockGeneralRepository)(nil).GetNetworkCountStats), network)
}

// GetDateHistogram mocks base method
func (m *MockGeneralRepository) GetDateHistogram(period string, opts ...models.HistogramOption) ([][]float64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{period}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDateHistogram", varargs...)
	ret0, _ := ret[0].([][]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateHistogram indicates an expected call of GetDateHistogram
func (mr *MockGeneralRepositoryMockRecorder) GetDateHistogram(period interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{period}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateHistogram", reflect.TypeOf((*MockGeneralRepository)(nil).GetDateHistogram), varargs...)
}

// GetStats mocks base method
func (m *MockGeneralRepository) GetStats(network types.Network) (map[string]*models.NetworkStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", network)
	ret0, _ := ret[0].(map[string]*models.NetworkStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockGeneralRepositoryMockRecorder) GetStats(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockGeneralRepository)(nil).GetStats), network)
}

// GetLanguagesForNetwork mocks base method
func (m *MockGeneralRepository) GetLanguagesForNetwork(network types.Network) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagesForNetwork", network)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagesForNetwork indicates an expected call of GetLanguagesForNetwork
func (mr *MockGeneralRepositoryMockRecorder) GetLanguagesForNetwork(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagesForNetwork", reflect.TypeOf((*MockGeneralRepository)(nil).GetLanguagesForNetwork), network)
}

// IsRecordNotFound mocks base method
func (m *MockGeneralRepository) IsRecordNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFound indicates an expected call of IsRecordNotFound
func (mr *MockGeneralRepositoryMockRecorder) IsRecordNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFound", reflect.TypeOf((*MockGeneralRepository)(nil).IsRecordNotFound), err)
}

// Save mocks base method
func (m *MockGeneralRepository) Save(items []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockGeneralRepositoryMockRecorder) Save(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGeneralRepository)(nil).Save), items)
}

// BulkDelete mocks base method
func (m *MockGeneralRepository) BulkDelete(arg0 []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockGeneralRepositoryMockRecorder) BulkDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockGeneralRepository)(nil).BulkDelete), arg0)
}

// SetAlias mocks base method
func (m *MockGeneralRepository) SetAlias(network types.Network, address, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlias", network, address, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlias indicates an expected call of SetAlias
func (mr *MockGeneralRepositoryMockRecorder) SetAlias(network, address, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlias", reflect.TypeOf((*MockGeneralRepository)(nil).SetAlias), network, address, alias)
}
