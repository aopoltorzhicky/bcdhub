// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/baking-bad/bcdhub/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGeneralRepository is a mock of GeneralRepository interface
type MockGeneralRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralRepositoryMockRecorder
}

// MockGeneralRepositoryMockRecorder is the mock recorder for MockGeneralRepository
type MockGeneralRepositoryMockRecorder struct {
	mock *MockGeneralRepository
}

// NewMockGeneralRepository creates a new mock instance
func NewMockGeneralRepository(ctrl *gomock.Controller) *MockGeneralRepository {
	mock := &MockGeneralRepository{ctrl: ctrl}
	mock.recorder = &MockGeneralRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeneralRepository) EXPECT() *MockGeneralRepositoryMockRecorder {
	return m.recorder
}

// CreateTables mocks base method
func (m *MockGeneralRepository) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables
func (mr *MockGeneralRepositoryMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockGeneralRepository)(nil).CreateTables))
}

// DeleteByContract mocks base method
func (m *MockGeneralRepository) DeleteByContract(indices []string, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByContract", indices, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByContract indicates an expected call of DeleteByContract
func (mr *MockGeneralRepositoryMockRecorder) DeleteByContract(indices, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByContract", reflect.TypeOf((*MockGeneralRepository)(nil).DeleteByContract), indices, address)
}

// GetByID mocks base method
func (m *MockGeneralRepository) GetByID(output models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID
func (mr *MockGeneralRepositoryMockRecorder) GetByID(output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGeneralRepository)(nil).GetByID), output)
}

// GetAll mocks base method
func (m *MockGeneralRepository) GetAll(index string) ([]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", index)
	ret0, _ := ret[0].([]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockGeneralRepositoryMockRecorder) GetAll(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGeneralRepository)(nil).GetAll), index)
}

// UpdateDoc mocks base method
func (m *MockGeneralRepository) UpdateDoc(model models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoc", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoc indicates an expected call of UpdateDoc
func (mr *MockGeneralRepositoryMockRecorder) UpdateDoc(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoc", reflect.TypeOf((*MockGeneralRepository)(nil).UpdateDoc), model)
}

// IsRecordNotFound mocks base method
func (m *MockGeneralRepository) IsRecordNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFound indicates an expected call of IsRecordNotFound
func (mr *MockGeneralRepositoryMockRecorder) IsRecordNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFound", reflect.TypeOf((*MockGeneralRepository)(nil).IsRecordNotFound), err)
}

// Save mocks base method
func (m *MockGeneralRepository) Save(ctx context.Context, items []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockGeneralRepositoryMockRecorder) Save(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGeneralRepository)(nil).Save), ctx, items)
}

// BulkDelete mocks base method
func (m *MockGeneralRepository) BulkDelete(arg0 context.Context, arg1 []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockGeneralRepositoryMockRecorder) BulkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockGeneralRepository)(nil).BulkDelete), arg0, arg1)
}

// TablesExist mocks base method
func (m *MockGeneralRepository) TablesExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TablesExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TablesExist indicates an expected call of TablesExist
func (mr *MockGeneralRepositoryMockRecorder) TablesExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TablesExist", reflect.TypeOf((*MockGeneralRepository)(nil).TablesExist))
}

// Drop mocks base method
func (m *MockGeneralRepository) Drop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop
func (mr *MockGeneralRepositoryMockRecorder) Drop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockGeneralRepository)(nil).Drop), ctx)
}
