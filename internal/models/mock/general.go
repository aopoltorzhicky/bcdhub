// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/baking-bad/bcdhub/internal/models"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGeneralRepository is a mock of GeneralRepository interface
type MockGeneralRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralRepositoryMockRecorder
}

// MockGeneralRepositoryMockRecorder is the mock recorder for MockGeneralRepository
type MockGeneralRepositoryMockRecorder struct {
	mock *MockGeneralRepository
}

// NewMockGeneralRepository creates a new mock instance
func NewMockGeneralRepository(ctrl *gomock.Controller) *MockGeneralRepository {
	mock := &MockGeneralRepository{ctrl: ctrl}
	mock.recorder = &MockGeneralRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeneralRepository) EXPECT() *MockGeneralRepositoryMockRecorder {
	return m.recorder
}

// CreateTables mocks base method
func (m *MockGeneralRepository) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables
func (mr *MockGeneralRepositoryMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockGeneralRepository)(nil).CreateTables))
}

// DeleteTables mocks base method
func (m *MockGeneralRepository) DeleteTables(indices []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTables", indices)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTables indicates an expected call of DeleteTables
func (mr *MockGeneralRepositoryMockRecorder) DeleteTables(indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTables", reflect.TypeOf((*MockGeneralRepository)(nil).DeleteTables), indices)
}

// DeleteByContract mocks base method
func (m *MockGeneralRepository) DeleteByContract(network types.Network, indices []string, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByContract", network, indices, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByContract indicates an expected call of DeleteByContract
func (mr *MockGeneralRepositoryMockRecorder) DeleteByContract(network, indices, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByContract", reflect.TypeOf((*MockGeneralRepository)(nil).DeleteByContract), network, indices, address)
}

// GetByID mocks base method
func (m *MockGeneralRepository) GetByID(output models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID
func (mr *MockGeneralRepositoryMockRecorder) GetByID(output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGeneralRepository)(nil).GetByID), output)
}

// GetByNetwork mocks base method
func (m *MockGeneralRepository) GetByNetwork(network types.Network, index string) ([]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetwork", network, index)
	ret0, _ := ret[0].([]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNetwork indicates an expected call of GetByNetwork
func (mr *MockGeneralRepositoryMockRecorder) GetByNetwork(network, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetwork", reflect.TypeOf((*MockGeneralRepository)(nil).GetByNetwork), network, index)
}

// UpdateDoc mocks base method
func (m *MockGeneralRepository) UpdateDoc(model models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoc", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoc indicates an expected call of UpdateDoc
func (mr *MockGeneralRepositoryMockRecorder) UpdateDoc(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoc", reflect.TypeOf((*MockGeneralRepository)(nil).UpdateDoc), model)
}

// IsRecordNotFound mocks base method
func (m *MockGeneralRepository) IsRecordNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecordNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecordNotFound indicates an expected call of IsRecordNotFound
func (mr *MockGeneralRepositoryMockRecorder) IsRecordNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecordNotFound", reflect.TypeOf((*MockGeneralRepository)(nil).IsRecordNotFound), err)
}

// Save mocks base method
func (m *MockGeneralRepository) Save(ctx context.Context, items []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockGeneralRepositoryMockRecorder) Save(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGeneralRepository)(nil).Save), ctx, items)
}

// BulkDelete mocks base method
func (m *MockGeneralRepository) BulkDelete(arg0 context.Context, arg1 []models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockGeneralRepositoryMockRecorder) BulkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockGeneralRepository)(nil).BulkDelete), arg0, arg1)
}

// MockStatistics is a mock of Statistics interface
type MockStatistics struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsMockRecorder
}

// MockStatisticsMockRecorder is the mock recorder for MockStatistics
type MockStatisticsMockRecorder struct {
	mock *MockStatistics
}

// NewMockStatistics creates a new mock instance
func NewMockStatistics(ctrl *gomock.Controller) *MockStatistics {
	mock := &MockStatistics{ctrl: ctrl}
	mock.recorder = &MockStatisticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatistics) EXPECT() *MockStatisticsMockRecorder {
	return m.recorder
}

// NetworkCountStats mocks base method
func (m *MockStatistics) NetworkCountStats(network types.Network) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkCountStats", network)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCountStats indicates an expected call of NetworkCountStats
func (mr *MockStatisticsMockRecorder) NetworkCountStats(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCountStats", reflect.TypeOf((*MockStatistics)(nil).NetworkCountStats), network)
}

// Histogram mocks base method
func (m *MockStatistics) Histogram(period string, opts ...models.HistogramOption) ([][]float64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{period}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Histogram", varargs...)
	ret0, _ := ret[0].([][]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Histogram indicates an expected call of Histogram
func (mr *MockStatisticsMockRecorder) Histogram(period interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{period}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockStatistics)(nil).Histogram), varargs...)
}

// NetworkStats mocks base method
func (m *MockStatistics) NetworkStats(network types.Network) (map[string]*models.NetworkStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkStats", network)
	ret0, _ := ret[0].(map[string]*models.NetworkStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkStats indicates an expected call of NetworkStats
func (mr *MockStatisticsMockRecorder) NetworkStats(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkStats", reflect.TypeOf((*MockStatistics)(nil).NetworkStats), network)
}
