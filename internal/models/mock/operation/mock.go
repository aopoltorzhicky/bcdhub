// Code generated by MockGen. DO NOT EDIT.
// Source: operation/repository.go

// Package mock_operation is a generated GoMock package.
package mock_operation

import (
	operation "github.com/baking-bad/bcdhub/internal/models/operation"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByContract mocks base method
func (m *MockRepository) GetByContract(network, address string, size uint64, filters map[string]interface{}) (operation.Pageable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContract", network, address, size, filters)
	ret0, _ := ret[0].(operation.Pageable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContract indicates an expected call of GetByContract
func (mr *MockRepositoryMockRecorder) GetByContract(network, address, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContract", reflect.TypeOf((*MockRepository)(nil).GetByContract), network, address, size, filters)
}

// GetStats mocks base method
func (m *MockRepository) GetStats(network, address string) (operation.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", network, address)
	ret0, _ := ret[0].(operation.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats
func (mr *MockRepositoryMockRecorder) GetStats(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRepository)(nil).GetStats), network, address)
}

// Last mocks base method
func (m *MockRepository) Last(network, address string, indexedTime int64) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", network, address, indexedTime)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockRepositoryMockRecorder) Last(network, address, indexedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockRepository)(nil).Last), network, address, indexedTime)
}

// Get mocks base method
func (m *MockRepository) Get(filter map[string]interface{}, size int64, sort bool) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filter, size, sort)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(filter, size, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), filter, size, sort)
}

// GetContract24HoursVolume mocks base method
func (m *MockRepository) GetContract24HoursVolume(network, address string, entrypoints []string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract24HoursVolume", network, address, entrypoints)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract24HoursVolume indicates an expected call of GetContract24HoursVolume
func (mr *MockRepositoryMockRecorder) GetContract24HoursVolume(network, address, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract24HoursVolume", reflect.TypeOf((*MockRepository)(nil).GetContract24HoursVolume), network, address, entrypoints)
}

// GetTokensStats mocks base method
func (m *MockRepository) GetTokensStats(network string, addresses, entrypoints []string) (map[string]operation.TokenUsageStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensStats", network, addresses, entrypoints)
	ret0, _ := ret[0].(map[string]operation.TokenUsageStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokensStats indicates an expected call of GetTokensStats
func (mr *MockRepositoryMockRecorder) GetTokensStats(network, addresses, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensStats", reflect.TypeOf((*MockRepository)(nil).GetTokensStats), network, addresses, entrypoints)
}

// GetParticipatingContracts mocks base method
func (m *MockRepository) GetParticipatingContracts(network string, fromLevel, toLevel int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipatingContracts", network, fromLevel, toLevel)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipatingContracts indicates an expected call of GetParticipatingContracts
func (mr *MockRepositoryMockRecorder) GetParticipatingContracts(network, fromLevel, toLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipatingContracts", reflect.TypeOf((*MockRepository)(nil).GetParticipatingContracts), network, fromLevel, toLevel)
}

// RecalcStats mocks base method
func (m *MockRepository) RecalcStats(network, address string) (operation.ContractStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalcStats", network, address)
	ret0, _ := ret[0].(operation.ContractStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecalcStats indicates an expected call of RecalcStats
func (mr *MockRepositoryMockRecorder) RecalcStats(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalcStats", reflect.TypeOf((*MockRepository)(nil).RecalcStats), network, address)
}

// GetDAppStats mocks base method
func (m *MockRepository) GetDAppStats(arg0 string, arg1 []string, arg2 string) (operation.DAppStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(operation.DAppStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppStats indicates an expected call of GetDAppStats
func (mr *MockRepositoryMockRecorder) GetDAppStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppStats", reflect.TypeOf((*MockRepository)(nil).GetDAppStats), arg0, arg1, arg2)
}
