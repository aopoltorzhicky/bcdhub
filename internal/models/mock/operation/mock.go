// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/operation/repository.go

// Package operation is a generated GoMock package.
package operation

import (
	account "github.com/baking-bad/bcdhub/internal/models/account"
	model "github.com/baking-bad/bcdhub/internal/models/operation"
	types "github.com/baking-bad/bcdhub/internal/models/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByAccount mocks base method
func (m *MockRepository) GetByAccount(acc account.Account, size uint64, filters map[string]interface{}) (model.Pageable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccount", acc, size, filters)
	ret0, _ := ret[0].(model.Pageable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccount indicates an expected call of GetByAccount
func (mr *MockRepositoryMockRecorder) GetByAccount(acc, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccount", reflect.TypeOf((*MockRepository)(nil).GetByAccount), acc, size, filters)
}

// Last mocks base method
func (m *MockRepository) Last(filter map[string]interface{}, lastID int64) (model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", filter, lastID)
	ret0, _ := ret[0].(model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockRepositoryMockRecorder) Last(filter, lastID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockRepository)(nil).Last), filter, lastID)
}

// Get mocks base method
func (m *MockRepository) Get(filter map[string]interface{}, size int64, sort bool) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filter, size, sort)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(filter, size, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), filter, size, sort)
}

// GetContract24HoursVolume mocks base method
func (m *MockRepository) GetContract24HoursVolume(network types.Network, address string, entrypoints []string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract24HoursVolume", network, address, entrypoints)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract24HoursVolume indicates an expected call of GetContract24HoursVolume
func (mr *MockRepositoryMockRecorder) GetContract24HoursVolume(network, address, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract24HoursVolume", reflect.TypeOf((*MockRepository)(nil).GetContract24HoursVolume), network, address, entrypoints)
}

// GetTokensStats mocks base method
func (m *MockRepository) GetTokensStats(network types.Network, addresses, entrypoints []string) (map[string]model.TokenUsageStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensStats", network, addresses, entrypoints)
	ret0, _ := ret[0].(map[string]model.TokenUsageStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokensStats indicates an expected call of GetTokensStats
func (mr *MockRepositoryMockRecorder) GetTokensStats(network, addresses, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensStats", reflect.TypeOf((*MockRepository)(nil).GetTokensStats), network, addresses, entrypoints)
}

// GetDAppStats mocks base method
func (m *MockRepository) GetDAppStats(network types.Network, addresses []string, period string) (model.DAppStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppStats", network, addresses, period)
	ret0, _ := ret[0].(model.DAppStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppStats indicates an expected call of GetDAppStats
func (mr *MockRepositoryMockRecorder) GetDAppStats(network, addresses, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppStats", reflect.TypeOf((*MockRepository)(nil).GetDAppStats), network, addresses, period)
}

// GetByIDs mocks base method
func (m *MockRepository) GetByIDs(ids ...int64) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockRepositoryMockRecorder) GetByIDs(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockRepository)(nil).GetByIDs), ids...)
}
