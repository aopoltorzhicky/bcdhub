// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/operation/repository.go

// Package operation is a generated GoMock package.
package operation

import (
	account "github.com/baking-bad/bcdhub/internal/models/account"
	model "github.com/baking-bad/bcdhub/internal/models/operation"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByAccount mocks base method
func (m *MockRepository) GetByAccount(acc account.Account, size uint64, filters map[string]interface{}) (model.Pageable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccount", acc, size, filters)
	ret0, _ := ret[0].(model.Pageable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccount indicates an expected call of GetByAccount
func (mr *MockRepositoryMockRecorder) GetByAccount(acc, size, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccount", reflect.TypeOf((*MockRepository)(nil).GetByAccount), acc, size, filters)
}

// Last mocks base method
func (m *MockRepository) Last(filter map[string]interface{}, lastID int64) (model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", filter, lastID)
	ret0, _ := ret[0].(model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockRepositoryMockRecorder) Last(filter, lastID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockRepository)(nil).Last), filter, lastID)
}

// GetByHash mocks base method
func (m *MockRepository) GetByHash(hash string) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", hash)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash
func (mr *MockRepositoryMockRecorder) GetByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockRepository)(nil).GetByHash), hash)
}

// GetByHashAndCounter mocks base method
func (m *MockRepository) GetByHashAndCounter(hash string, counter int64) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHashAndCounter", hash, counter)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHashAndCounter indicates an expected call of GetByHashAndCounter
func (mr *MockRepositoryMockRecorder) GetByHashAndCounter(hash, counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHashAndCounter", reflect.TypeOf((*MockRepository)(nil).GetByHashAndCounter), hash, counter)
}

// GetImplicitOperation mocks base method
func (m *MockRepository) GetImplicitOperation(counter int64) (model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImplicitOperation", counter)
	ret0, _ := ret[0].(model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImplicitOperation indicates an expected call of GetImplicitOperation
func (mr *MockRepositoryMockRecorder) GetImplicitOperation(counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImplicitOperation", reflect.TypeOf((*MockRepository)(nil).GetImplicitOperation), counter)
}

// OPG mocks base method
func (m *MockRepository) OPG(address string, size, lastID int64) ([]model.OPG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPG", address, size, lastID)
	ret0, _ := ret[0].([]model.OPG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OPG indicates an expected call of OPG
func (mr *MockRepositoryMockRecorder) OPG(address, size, lastID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPG", reflect.TypeOf((*MockRepository)(nil).OPG), address, size, lastID)
}

// Origination mocks base method
func (m *MockRepository) Origination(accountID int64) (model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origination", accountID)
	ret0, _ := ret[0].(model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Origination indicates an expected call of Origination
func (mr *MockRepositoryMockRecorder) Origination(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origination", reflect.TypeOf((*MockRepository)(nil).Origination), accountID)
}

// Get mocks base method
func (m *MockRepository) Get(filter map[string]interface{}, size int64, sort bool) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filter, size, sort)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(filter, size, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), filter, size, sort)
}

// GetByIDs mocks base method
func (m *MockRepository) GetByIDs(ids ...int64) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockRepositoryMockRecorder) GetByIDs(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockRepository)(nil).GetByIDs), ids...)
}

// GetByID mocks base method
func (m *MockRepository) GetByID(id int64) (model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// ListEvents mocks base method
func (m *MockRepository) ListEvents(accountID, size, offset int64) ([]model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", accountID, size, offset)
	ret0, _ := ret[0].([]model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents
func (mr *MockRepositoryMockRecorder) ListEvents(accountID, size, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockRepository)(nil).ListEvents), accountID, size, offset)
}

// EventsCount mocks base method
func (m *MockRepository) EventsCount(accountID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsCount", accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsCount indicates an expected call of EventsCount
func (mr *MockRepositoryMockRecorder) EventsCount(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsCount", reflect.TypeOf((*MockRepository)(nil).EventsCount), accountID)
}

// ContractStats mocks base method
func (m *MockRepository) ContractStats(address string) (model.ContractStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStats", address)
	ret0, _ := ret[0].(model.ContractStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractStats indicates an expected call of ContractStats
func (mr *MockRepositoryMockRecorder) ContractStats(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStats", reflect.TypeOf((*MockRepository)(nil).ContractStats), address)
}
