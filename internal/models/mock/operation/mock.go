// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../mock/operation/mock.go -package=operation -typed
//
// Package operation is a generated GoMock package.
package operation

import (
	context "context"
	reflect "reflect"

	account "github.com/baking-bad/bcdhub/internal/models/account"
	operation "github.com/baking-bad/bcdhub/internal/models/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ContractStats mocks base method.
func (m *MockRepository) ContractStats(ctx context.Context, address string) (operation.ContractStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractStats", ctx, address)
	ret0, _ := ret[0].(operation.ContractStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractStats indicates an expected call of ContractStats.
func (mr *MockRepositoryMockRecorder) ContractStats(ctx, address any) *RepositoryContractStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractStats", reflect.TypeOf((*MockRepository)(nil).ContractStats), ctx, address)
	return &RepositoryContractStatsCall{Call: call}
}

// RepositoryContractStatsCall wrap *gomock.Call
type RepositoryContractStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryContractStatsCall) Return(arg0 operation.ContractStats, arg1 error) *RepositoryContractStatsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryContractStatsCall) Do(f func(context.Context, string) (operation.ContractStats, error)) *RepositoryContractStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryContractStatsCall) DoAndReturn(f func(context.Context, string) (operation.ContractStats, error)) *RepositoryContractStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EventsCount mocks base method.
func (m *MockRepository) EventsCount(ctx context.Context, accountID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsCount", ctx, accountID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsCount indicates an expected call of EventsCount.
func (mr *MockRepositoryMockRecorder) EventsCount(ctx, accountID any) *RepositoryEventsCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsCount", reflect.TypeOf((*MockRepository)(nil).EventsCount), ctx, accountID)
	return &RepositoryEventsCountCall{Call: call}
}

// RepositoryEventsCountCall wrap *gomock.Call
type RepositoryEventsCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryEventsCountCall) Return(arg0 int, arg1 error) *RepositoryEventsCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryEventsCountCall) Do(f func(context.Context, int64) (int, error)) *RepositoryEventsCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryEventsCountCall) DoAndReturn(f func(context.Context, int64) (int, error)) *RepositoryEventsCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, filter map[string]any, size int64, sort bool) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter, size, sort)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, filter, size, sort any) *RepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, filter, size, sort)
	return &RepositoryGetCall{Call: call}
}

// RepositoryGetCall wrap *gomock.Call
type RepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetCall) Return(arg0 []operation.Operation, arg1 error) *RepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetCall) Do(f func(context.Context, map[string]any, int64, bool) ([]operation.Operation, error)) *RepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetCall) DoAndReturn(f func(context.Context, map[string]any, int64, bool) ([]operation.Operation, error)) *RepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByAccount mocks base method.
func (m *MockRepository) GetByAccount(ctx context.Context, acc account.Account, size uint64, filters map[string]any) (operation.Pageable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccount", ctx, acc, size, filters)
	ret0, _ := ret[0].(operation.Pageable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccount indicates an expected call of GetByAccount.
func (mr *MockRepositoryMockRecorder) GetByAccount(ctx, acc, size, filters any) *RepositoryGetByAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccount", reflect.TypeOf((*MockRepository)(nil).GetByAccount), ctx, acc, size, filters)
	return &RepositoryGetByAccountCall{Call: call}
}

// RepositoryGetByAccountCall wrap *gomock.Call
type RepositoryGetByAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetByAccountCall) Return(arg0 operation.Pageable, arg1 error) *RepositoryGetByAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetByAccountCall) Do(f func(context.Context, account.Account, uint64, map[string]any) (operation.Pageable, error)) *RepositoryGetByAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetByAccountCall) DoAndReturn(f func(context.Context, account.Account, uint64, map[string]any) (operation.Pageable, error)) *RepositoryGetByAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByHash mocks base method.
func (m *MockRepository) GetByHash(ctx context.Context, hash []byte) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", ctx, hash)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockRepositoryMockRecorder) GetByHash(ctx, hash any) *RepositoryGetByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockRepository)(nil).GetByHash), ctx, hash)
	return &RepositoryGetByHashCall{Call: call}
}

// RepositoryGetByHashCall wrap *gomock.Call
type RepositoryGetByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetByHashCall) Return(arg0 []operation.Operation, arg1 error) *RepositoryGetByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetByHashCall) Do(f func(context.Context, []byte) ([]operation.Operation, error)) *RepositoryGetByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetByHashCall) DoAndReturn(f func(context.Context, []byte) ([]operation.Operation, error)) *RepositoryGetByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByHashAndCounter mocks base method.
func (m *MockRepository) GetByHashAndCounter(ctx context.Context, hash []byte, counter int64) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHashAndCounter", ctx, hash, counter)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHashAndCounter indicates an expected call of GetByHashAndCounter.
func (mr *MockRepositoryMockRecorder) GetByHashAndCounter(ctx, hash, counter any) *RepositoryGetByHashAndCounterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHashAndCounter", reflect.TypeOf((*MockRepository)(nil).GetByHashAndCounter), ctx, hash, counter)
	return &RepositoryGetByHashAndCounterCall{Call: call}
}

// RepositoryGetByHashAndCounterCall wrap *gomock.Call
type RepositoryGetByHashAndCounterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetByHashAndCounterCall) Return(arg0 []operation.Operation, arg1 error) *RepositoryGetByHashAndCounterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetByHashAndCounterCall) Do(f func(context.Context, []byte, int64) ([]operation.Operation, error)) *RepositoryGetByHashAndCounterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetByHashAndCounterCall) DoAndReturn(f func(context.Context, []byte, int64) ([]operation.Operation, error)) *RepositoryGetByHashAndCounterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id int64) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *RepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
	return &RepositoryGetByIDCall{Call: call}
}

// RepositoryGetByIDCall wrap *gomock.Call
type RepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetByIDCall) Return(arg0 operation.Operation, arg1 error) *RepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetByIDCall) Do(f func(context.Context, int64) (operation.Operation, error)) *RepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetByIDCall) DoAndReturn(f func(context.Context, int64) (operation.Operation, error)) *RepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetImplicitOperation mocks base method.
func (m *MockRepository) GetImplicitOperation(ctx context.Context, counter int64) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImplicitOperation", ctx, counter)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImplicitOperation indicates an expected call of GetImplicitOperation.
func (mr *MockRepositoryMockRecorder) GetImplicitOperation(ctx, counter any) *RepositoryGetImplicitOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImplicitOperation", reflect.TypeOf((*MockRepository)(nil).GetImplicitOperation), ctx, counter)
	return &RepositoryGetImplicitOperationCall{Call: call}
}

// RepositoryGetImplicitOperationCall wrap *gomock.Call
type RepositoryGetImplicitOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetImplicitOperationCall) Return(arg0 operation.Operation, arg1 error) *RepositoryGetImplicitOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetImplicitOperationCall) Do(f func(context.Context, int64) (operation.Operation, error)) *RepositoryGetImplicitOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetImplicitOperationCall) DoAndReturn(f func(context.Context, int64) (operation.Operation, error)) *RepositoryGetImplicitOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Last mocks base method.
func (m *MockRepository) Last(ctx context.Context, filter map[string]any, lastID int64) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", ctx, filter, lastID)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockRepositoryMockRecorder) Last(ctx, filter, lastID any) *RepositoryLastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockRepository)(nil).Last), ctx, filter, lastID)
	return &RepositoryLastCall{Call: call}
}

// RepositoryLastCall wrap *gomock.Call
type RepositoryLastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryLastCall) Return(arg0 operation.Operation, arg1 error) *RepositoryLastCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryLastCall) Do(f func(context.Context, map[string]any, int64) (operation.Operation, error)) *RepositoryLastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryLastCall) DoAndReturn(f func(context.Context, map[string]any, int64) (operation.Operation, error)) *RepositoryLastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEvents mocks base method.
func (m *MockRepository) ListEvents(ctx context.Context, accountID, size, offset int64) ([]operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", ctx, accountID, size, offset)
	ret0, _ := ret[0].([]operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockRepositoryMockRecorder) ListEvents(ctx, accountID, size, offset any) *RepositoryListEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockRepository)(nil).ListEvents), ctx, accountID, size, offset)
	return &RepositoryListEventsCall{Call: call}
}

// RepositoryListEventsCall wrap *gomock.Call
type RepositoryListEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryListEventsCall) Return(arg0 []operation.Operation, arg1 error) *RepositoryListEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryListEventsCall) Do(f func(context.Context, int64, int64, int64) ([]operation.Operation, error)) *RepositoryListEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryListEventsCall) DoAndReturn(f func(context.Context, int64, int64, int64) ([]operation.Operation, error)) *RepositoryListEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OPG mocks base method.
func (m *MockRepository) OPG(ctx context.Context, address string, size, lastID int64) ([]operation.OPG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPG", ctx, address, size, lastID)
	ret0, _ := ret[0].([]operation.OPG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OPG indicates an expected call of OPG.
func (mr *MockRepositoryMockRecorder) OPG(ctx, address, size, lastID any) *RepositoryOPGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPG", reflect.TypeOf((*MockRepository)(nil).OPG), ctx, address, size, lastID)
	return &RepositoryOPGCall{Call: call}
}

// RepositoryOPGCall wrap *gomock.Call
type RepositoryOPGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryOPGCall) Return(arg0 []operation.OPG, arg1 error) *RepositoryOPGCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryOPGCall) Do(f func(context.Context, string, int64, int64) ([]operation.OPG, error)) *RepositoryOPGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryOPGCall) DoAndReturn(f func(context.Context, string, int64, int64) ([]operation.OPG, error)) *RepositoryOPGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Origination mocks base method.
func (m *MockRepository) Origination(ctx context.Context, accountID int64) (operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origination", ctx, accountID)
	ret0, _ := ret[0].(operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Origination indicates an expected call of Origination.
func (mr *MockRepositoryMockRecorder) Origination(ctx, accountID any) *RepositoryOriginationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origination", reflect.TypeOf((*MockRepository)(nil).Origination), ctx, accountID)
	return &RepositoryOriginationCall{Call: call}
}

// RepositoryOriginationCall wrap *gomock.Call
type RepositoryOriginationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryOriginationCall) Return(arg0 operation.Operation, arg1 error) *RepositoryOriginationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryOriginationCall) Do(f func(context.Context, int64) (operation.Operation, error)) *RepositoryOriginationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryOriginationCall) DoAndReturn(f func(context.Context, int64) (operation.Operation, error)) *RepositoryOriginationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
