// Code generated by MockGen. DO NOT EDIT.
// Source: bigmapdiff/repository.go

// Package mock_bigmapdiff is a generated GoMock package.
package mock_bigmapdiff

import (
	bigmapdiff "github.com/baking-bad/bcdhub/internal/models/bigmapdiff"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(ctx bigmapdiff.GetContext) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx)
}

// GetByAddress mocks base method
func (m *MockRepository) GetByAddress(arg0, arg1 string) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", arg0, arg1)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockRepositoryMockRecorder) GetByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockRepository)(nil).GetByAddress), arg0, arg1)
}

// GetByOperationID mocks base method
func (m *MockRepository) GetByOperationID(arg0 string) ([]*bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOperationID", arg0)
	ret0, _ := ret[0].([]*bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOperationID indicates an expected call of GetByOperationID
func (mr *MockRepositoryMockRecorder) GetByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOperationID", reflect.TypeOf((*MockRepository)(nil).GetByOperationID), arg0)
}

// GetByPtr mocks base method
func (m *MockRepository) GetByPtr(arg0, arg1 string, arg2 int64) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPtr", arg0, arg1, arg2)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPtr indicates an expected call of GetByPtr
func (mr *MockRepositoryMockRecorder) GetByPtr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPtr", reflect.TypeOf((*MockRepository)(nil).GetByPtr), arg0, arg1, arg2)
}

// GetByPtrAndKeyHash mocks base method
func (m *MockRepository) GetByPtrAndKeyHash(arg0 int64, arg1, arg2 string, arg3, arg4 int64) ([]bigmapdiff.BigMapDiff, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPtrAndKeyHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByPtrAndKeyHash indicates an expected call of GetByPtrAndKeyHash
func (mr *MockRepositoryMockRecorder) GetByPtrAndKeyHash(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPtrAndKeyHash", reflect.TypeOf((*MockRepository)(nil).GetByPtrAndKeyHash), arg0, arg1, arg2, arg3, arg4)
}

// GetForAddress mocks base method
func (m *MockRepository) GetForAddress(arg0 string) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForAddress", arg0)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForAddress indicates an expected call of GetForAddress
func (mr *MockRepositoryMockRecorder) GetForAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForAddress", reflect.TypeOf((*MockRepository)(nil).GetForAddress), arg0)
}

// GetValuesByKey mocks base method
func (m *MockRepository) GetValuesByKey(arg0 string) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesByKey", arg0)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesByKey indicates an expected call of GetValuesByKey
func (mr *MockRepositoryMockRecorder) GetValuesByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesByKey", reflect.TypeOf((*MockRepository)(nil).GetValuesByKey), arg0)
}

// GetUniqueByOperationID mocks base method
func (m *MockRepository) GetUniqueByOperationID(arg0 string) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqueByOperationID", arg0)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqueByOperationID indicates an expected call of GetUniqueByOperationID
func (mr *MockRepositoryMockRecorder) GetUniqueByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqueByOperationID", reflect.TypeOf((*MockRepository)(nil).GetUniqueByOperationID), arg0)
}

// Count mocks base method
func (m *MockRepository) Count(network string, ptr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", network, ptr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockRepositoryMockRecorder) Count(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), network, ptr)
}

// CurrentByKey mocks base method
func (m *MockRepository) CurrentByKey(network, keyHash string, ptr int64) (bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentByKey", network, keyHash, ptr)
	ret0, _ := ret[0].(bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentByKey indicates an expected call of CurrentByKey
func (mr *MockRepositoryMockRecorder) CurrentByKey(network, keyHash, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentByKey", reflect.TypeOf((*MockRepository)(nil).CurrentByKey), network, keyHash, ptr)
}

// Previous mocks base method
func (m *MockRepository) Previous(arg0 []bigmapdiff.BigMapDiff, arg1 int64, arg2 string) ([]bigmapdiff.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous", arg0, arg1, arg2)
	ret0, _ := ret[0].([]bigmapdiff.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Previous indicates an expected call of Previous
func (mr *MockRepositoryMockRecorder) Previous(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockRepository)(nil).Previous), arg0, arg1, arg2)
}
