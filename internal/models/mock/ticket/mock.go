// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/ticket/repository.go

// Package mock_ticket is a generated GoMock package.
package ticket

import (
	reflect "reflect"

	model "github.com/baking-bad/bcdhub/internal/models/ticket"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ForOperation mocks base method.
func (m *MockRepository) ForOperation(operationId int64) ([]model.TicketUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForOperation", operationId)
	ret0, _ := ret[0].([]model.TicketUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForOperation indicates an expected call of ForOperation.
func (mr *MockRepositoryMockRecorder) ForOperation(operationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForOperation", reflect.TypeOf((*MockRepository)(nil).ForOperation), operationId)
}

// Get mocks base method.
func (m *MockRepository) Get(ticketer string, limit, offset int64) ([]model.TicketUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ticketer, limit, offset)
	ret0, _ := ret[0].([]model.TicketUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ticketer, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ticketer, limit, offset)
}

// Has mocks base method.
func (m *MockRepository) Has(contractID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", contractID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockRepositoryMockRecorder) Has(contractID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRepository)(nil).Has), contractID)
}
