// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../mock/ticket/mock.go -package=ticket -typed
//
// Package ticket is a generated GoMock package.
package ticket

import (
	reflect "reflect"

	ticket "github.com/baking-bad/bcdhub/internal/models/ticket"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ForOperation mocks base method.
func (m *MockRepository) ForOperation(operationId int64) ([]ticket.TicketUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForOperation", operationId)
	ret0, _ := ret[0].([]ticket.TicketUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForOperation indicates an expected call of ForOperation.
func (mr *MockRepositoryMockRecorder) ForOperation(operationId any) *RepositoryForOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForOperation", reflect.TypeOf((*MockRepository)(nil).ForOperation), operationId)
	return &RepositoryForOperationCall{Call: call}
}

// RepositoryForOperationCall wrap *gomock.Call
type RepositoryForOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryForOperationCall) Return(arg0 []ticket.TicketUpdate, arg1 error) *RepositoryForOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryForOperationCall) Do(f func(int64) ([]ticket.TicketUpdate, error)) *RepositoryForOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryForOperationCall) DoAndReturn(f func(int64) ([]ticket.TicketUpdate, error)) *RepositoryForOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRepository) Get(ticketer string, limit, offset int64) ([]ticket.TicketUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ticketer, limit, offset)
	ret0, _ := ret[0].([]ticket.TicketUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ticketer, limit, offset any) *RepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ticketer, limit, offset)
	return &RepositoryGetCall{Call: call}
}

// RepositoryGetCall wrap *gomock.Call
type RepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryGetCall) Return(arg0 []ticket.TicketUpdate, arg1 error) *RepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryGetCall) Do(f func(string, int64, int64) ([]ticket.TicketUpdate, error)) *RepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryGetCall) DoAndReturn(f func(string, int64, int64) ([]ticket.TicketUpdate, error)) *RepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Has mocks base method.
func (m *MockRepository) Has(contractID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", contractID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockRepositoryMockRecorder) Has(contractID any) *RepositoryHasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockRepository)(nil).Has), contractID)
	return &RepositoryHasCall{Call: call}
}

// RepositoryHasCall wrap *gomock.Call
type RepositoryHasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepositoryHasCall) Return(arg0 bool, arg1 error) *RepositoryHasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepositoryHasCall) Do(f func(int64) (bool, error)) *RepositoryHasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepositoryHasCall) DoAndReturn(f func(int64) (bool, error)) *RepositoryHasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
