// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_elastic is a generated GoMock package.
package mock_elastic

import (
	elastic "github.com/baking-bad/bcdhub/internal/elastic"
	search "github.com/baking-bad/bcdhub/internal/elastic/search"
	models "github.com/baking-bad/bcdhub/internal/models"
	tzip "github.com/baking-bad/bcdhub/internal/models/tzip"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockModel is a mock of Model interface
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// GetQueues mocks base method
func (m *MockModel) GetQueues() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueues")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetQueues indicates an expected call of GetQueues
func (mr *MockModelMockRecorder) GetQueues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueues", reflect.TypeOf((*MockModel)(nil).GetQueues))
}

// MarshalToQueue mocks base method
func (m *MockModel) MarshalToQueue() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalToQueue")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalToQueue indicates an expected call of MarshalToQueue
func (mr *MockModelMockRecorder) MarshalToQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalToQueue", reflect.TypeOf((*MockModel)(nil).MarshalToQueue))
}

// GetID mocks base method
func (m *MockModel) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockModelMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockModel)(nil).GetID))
}

// GetIndex mocks base method
func (m *MockModel) GetIndex() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIndex indicates an expected call of GetIndex
func (mr *MockModelMockRecorder) GetIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockModel)(nil).GetIndex))
}

// MockIGeneral is a mock of IGeneral interface
type MockIGeneral struct {
	ctrl     *gomock.Controller
	recorder *MockIGeneralMockRecorder
}

// MockIGeneralMockRecorder is the mock recorder for MockIGeneral
type MockIGeneralMockRecorder struct {
	mock *MockIGeneral
}

// NewMockIGeneral creates a new mock instance
func NewMockIGeneral(ctrl *gomock.Controller) *MockIGeneral {
	mock := &MockIGeneral{ctrl: ctrl}
	mock.recorder = &MockIGeneralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGeneral) EXPECT() *MockIGeneralMockRecorder {
	return m.recorder
}

// CreateIndexes mocks base method
func (m *MockIGeneral) CreateIndexes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes
func (mr *MockIGeneralMockRecorder) CreateIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockIGeneral)(nil).CreateIndexes))
}

// DeleteIndices mocks base method
func (m *MockIGeneral) DeleteIndices(indices []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndices", indices)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndices indicates an expected call of DeleteIndices
func (mr *MockIGeneralMockRecorder) DeleteIndices(indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndices", reflect.TypeOf((*MockIGeneral)(nil).DeleteIndices), indices)
}

// DeleteByLevelAndNetwork mocks base method
func (m *MockIGeneral) DeleteByLevelAndNetwork(arg0 []string, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLevelAndNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByLevelAndNetwork indicates an expected call of DeleteByLevelAndNetwork
func (mr *MockIGeneralMockRecorder) DeleteByLevelAndNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLevelAndNetwork", reflect.TypeOf((*MockIGeneral)(nil).DeleteByLevelAndNetwork), arg0, arg1, arg2)
}

// DeleteByContract mocks base method
func (m *MockIGeneral) DeleteByContract(indices []string, network, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByContract", indices, network, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByContract indicates an expected call of DeleteByContract
func (mr *MockIGeneralMockRecorder) DeleteByContract(indices, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByContract", reflect.TypeOf((*MockIGeneral)(nil).DeleteByContract), indices, network, address)
}

// GetAll mocks base method
func (m *MockIGeneral) GetAll(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockIGeneralMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIGeneral)(nil).GetAll), arg0)
}

// GetByID mocks base method
func (m *MockIGeneral) GetByID(arg0 elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID
func (mr *MockIGeneralMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIGeneral)(nil).GetByID), arg0)
}

// GetByIDs mocks base method
func (m *MockIGeneral) GetByIDs(output interface{}, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{output}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockIGeneralMockRecorder) GetByIDs(output interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{output}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockIGeneral)(nil).GetByIDs), varargs...)
}

// GetByNetwork mocks base method
func (m *MockIGeneral) GetByNetwork(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByNetwork indicates an expected call of GetByNetwork
func (mr *MockIGeneralMockRecorder) GetByNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetwork", reflect.TypeOf((*MockIGeneral)(nil).GetByNetwork), arg0, arg1)
}

// GetByNetworkWithSort mocks base method
func (m *MockIGeneral) GetByNetworkWithSort(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetworkWithSort", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByNetworkWithSort indicates an expected call of GetByNetworkWithSort
func (mr *MockIGeneralMockRecorder) GetByNetworkWithSort(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetworkWithSort", reflect.TypeOf((*MockIGeneral)(nil).GetByNetworkWithSort), arg0, arg1, arg2, arg3)
}

// UpdateDoc mocks base method
func (m *MockIGeneral) UpdateDoc(model elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoc", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoc indicates an expected call of UpdateDoc
func (mr *MockIGeneralMockRecorder) UpdateDoc(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoc", reflect.TypeOf((*MockIGeneral)(nil).UpdateDoc), model)
}

// UpdateFields mocks base method
func (m *MockIGeneral) UpdateFields(arg0, arg1 string, arg2 interface{}, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFields indicates an expected call of UpdateFields
func (mr *MockIGeneralMockRecorder) UpdateFields(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFields", reflect.TypeOf((*MockIGeneral)(nil).UpdateFields), varargs...)
}

// MockIBalanceUpdate is a mock of IBalanceUpdate interface
type MockIBalanceUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceUpdateMockRecorder
}

// MockIBalanceUpdateMockRecorder is the mock recorder for MockIBalanceUpdate
type MockIBalanceUpdateMockRecorder struct {
	mock *MockIBalanceUpdate
}

// NewMockIBalanceUpdate creates a new mock instance
func NewMockIBalanceUpdate(ctrl *gomock.Controller) *MockIBalanceUpdate {
	mock := &MockIBalanceUpdate{ctrl: ctrl}
	mock.recorder = &MockIBalanceUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBalanceUpdate) EXPECT() *MockIBalanceUpdateMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockIBalanceUpdate) GetBalance(network, address string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", network, address)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockIBalanceUpdateMockRecorder) GetBalance(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIBalanceUpdate)(nil).GetBalance), network, address)
}

// MockIBigMap is a mock of IBigMap interface
type MockIBigMap struct {
	ctrl     *gomock.Controller
	recorder *MockIBigMapMockRecorder
}

// MockIBigMapMockRecorder is the mock recorder for MockIBigMap
type MockIBigMapMockRecorder struct {
	mock *MockIBigMap
}

// NewMockIBigMap creates a new mock instance
func NewMockIBigMap(ctrl *gomock.Controller) *MockIBigMap {
	mock := &MockIBigMap{ctrl: ctrl}
	mock.recorder = &MockIBigMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBigMap) EXPECT() *MockIBigMapMockRecorder {
	return m.recorder
}

// GetBigMapKey mocks base method
func (m *MockIBigMap) GetBigMapKey(network, keyHash string, ptr int64) (elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapKey", network, keyHash, ptr)
	ret0, _ := ret[0].(elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapKey indicates an expected call of GetBigMapKey
func (mr *MockIBigMapMockRecorder) GetBigMapKey(network, keyHash, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapKey", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapKey), network, keyHash, ptr)
}

// GetBigMapKeys mocks base method
func (m *MockIBigMap) GetBigMapKeys(ctx elastic.GetBigMapKeysContext) ([]elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapKeys", ctx)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapKeys indicates an expected call of GetBigMapKeys
func (mr *MockIBigMapMockRecorder) GetBigMapKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapKeys", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapKeys), ctx)
}

// GetBigMapsForAddress mocks base method
func (m *MockIBigMap) GetBigMapsForAddress(arg0, arg1 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapsForAddress", arg0, arg1)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapsForAddress indicates an expected call of GetBigMapsForAddress
func (mr *MockIBigMapMockRecorder) GetBigMapsForAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapsForAddress", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapsForAddress), arg0, arg1)
}

// GetBigMapHistory mocks base method
func (m *MockIBigMap) GetBigMapHistory(arg0 int64, arg1 string) ([]models.BigMapAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapHistory", arg0, arg1)
	ret0, _ := ret[0].([]models.BigMapAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapHistory indicates an expected call of GetBigMapHistory
func (mr *MockIBigMapMockRecorder) GetBigMapHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapHistory", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapHistory), arg0, arg1)
}

// GetBigMapValuesByKey mocks base method
func (m *MockIBigMap) GetBigMapValuesByKey(arg0 string) ([]elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapValuesByKey", arg0)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapValuesByKey indicates an expected call of GetBigMapValuesByKey
func (mr *MockIBigMapMockRecorder) GetBigMapValuesByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapValuesByKey", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapValuesByKey), arg0)
}

// GetBigMapDiffsCount mocks base method
func (m *MockIBigMap) GetBigMapDiffsCount(network string, ptr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsCount", network, ptr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsCount indicates an expected call of GetBigMapDiffsCount
func (mr *MockIBigMapMockRecorder) GetBigMapDiffsCount(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsCount", reflect.TypeOf((*MockIBigMap)(nil).GetBigMapDiffsCount), network, ptr)
}

// MockIBigMapDiff is a mock of IBigMapDiff interface
type MockIBigMapDiff struct {
	ctrl     *gomock.Controller
	recorder *MockIBigMapDiffMockRecorder
}

// MockIBigMapDiffMockRecorder is the mock recorder for MockIBigMapDiff
type MockIBigMapDiffMockRecorder struct {
	mock *MockIBigMapDiff
}

// NewMockIBigMapDiff creates a new mock instance
func NewMockIBigMapDiff(ctrl *gomock.Controller) *MockIBigMapDiff {
	mock := &MockIBigMapDiff{ctrl: ctrl}
	mock.recorder = &MockIBigMapDiffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBigMapDiff) EXPECT() *MockIBigMapDiffMockRecorder {
	return m.recorder
}

// GetBigMapDiffsForAddress mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsForAddress(arg0 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsForAddress", arg0)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsForAddress indicates an expected call of GetBigMapDiffsForAddress
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsForAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsForAddress", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsForAddress), arg0)
}

// GetBigMapDiffsPrevious mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsPrevious(arg0 []models.BigMapDiff, arg1 int64, arg2 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsPrevious", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsPrevious indicates an expected call of GetBigMapDiffsPrevious
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsPrevious(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsPrevious", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsPrevious), arg0, arg1, arg2)
}

// GetBigMapDiffsUniqueByOperationID mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsUniqueByOperationID(arg0 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsUniqueByOperationID", arg0)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsUniqueByOperationID indicates an expected call of GetBigMapDiffsUniqueByOperationID
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsUniqueByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsUniqueByOperationID", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsUniqueByOperationID), arg0)
}

// GetBigMapDiffsByPtrAndKeyHash mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsByPtrAndKeyHash(arg0 int64, arg1, arg2 string, arg3, arg4 int64) ([]elastic.BigMapDiff, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByPtrAndKeyHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBigMapDiffsByPtrAndKeyHash indicates an expected call of GetBigMapDiffsByPtrAndKeyHash
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsByPtrAndKeyHash(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByPtrAndKeyHash", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsByPtrAndKeyHash), arg0, arg1, arg2, arg3, arg4)
}

// GetBigMapDiffsByOperationID mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsByOperationID(arg0 string) ([]*models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByOperationID", arg0)
	ret0, _ := ret[0].([]*models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsByOperationID indicates an expected call of GetBigMapDiffsByOperationID
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByOperationID", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsByOperationID), arg0)
}

// GetBigMapDiffsByPtr mocks base method
func (m *MockIBigMapDiff) GetBigMapDiffsByPtr(arg0, arg1 string, arg2 int64) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByPtr", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsByPtr indicates an expected call of GetBigMapDiffsByPtr
func (mr *MockIBigMapDiffMockRecorder) GetBigMapDiffsByPtr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByPtr", reflect.TypeOf((*MockIBigMapDiff)(nil).GetBigMapDiffsByPtr), arg0, arg1, arg2)
}

// MockIBlock is a mock of IBlock interface
type MockIBlock struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockMockRecorder
}

// MockIBlockMockRecorder is the mock recorder for MockIBlock
type MockIBlockMockRecorder struct {
	mock *MockIBlock
}

// NewMockIBlock creates a new mock instance
func NewMockIBlock(ctrl *gomock.Controller) *MockIBlock {
	mock := &MockIBlock{ctrl: ctrl}
	mock.recorder = &MockIBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBlock) EXPECT() *MockIBlockMockRecorder {
	return m.recorder
}

// GetBlock mocks base method
func (m *MockIBlock) GetBlock(arg0 string, arg1 int64) (models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1)
	ret0, _ := ret[0].(models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockIBlockMockRecorder) GetBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockIBlock)(nil).GetBlock), arg0, arg1)
}

// GetLastBlock mocks base method
func (m *MockIBlock) GetLastBlock(arg0 string) (models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock", arg0)
	ret0, _ := ret[0].(models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock
func (mr *MockIBlockMockRecorder) GetLastBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockIBlock)(nil).GetLastBlock), arg0)
}

// GetLastBlocks mocks base method
func (m *MockIBlock) GetLastBlocks() ([]models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlocks")
	ret0, _ := ret[0].([]models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlocks indicates an expected call of GetLastBlocks
func (mr *MockIBlockMockRecorder) GetLastBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlocks", reflect.TypeOf((*MockIBlock)(nil).GetLastBlocks))
}

// GetNetworkAlias mocks base method
func (m *MockIBlock) GetNetworkAlias(chainID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAlias", chainID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAlias indicates an expected call of GetNetworkAlias
func (mr *MockIBlockMockRecorder) GetNetworkAlias(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAlias", reflect.TypeOf((*MockIBlock)(nil).GetNetworkAlias), chainID)
}

// MockIBulk is a mock of IBulk interface
type MockIBulk struct {
	ctrl     *gomock.Controller
	recorder *MockIBulkMockRecorder
}

// MockIBulkMockRecorder is the mock recorder for MockIBulk
type MockIBulkMockRecorder struct {
	mock *MockIBulk
}

// NewMockIBulk creates a new mock instance
func NewMockIBulk(ctrl *gomock.Controller) *MockIBulk {
	mock := &MockIBulk{ctrl: ctrl}
	mock.recorder = &MockIBulkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBulk) EXPECT() *MockIBulkMockRecorder {
	return m.recorder
}

// BulkInsert mocks base method
func (m *MockIBulk) BulkInsert(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert
func (mr *MockIBulkMockRecorder) BulkInsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockIBulk)(nil).BulkInsert), arg0)
}

// BulkUpdate mocks base method
func (m *MockIBulk) BulkUpdate(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate
func (mr *MockIBulkMockRecorder) BulkUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockIBulk)(nil).BulkUpdate), arg0)
}

// BulkDelete mocks base method
func (m *MockIBulk) BulkDelete(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockIBulkMockRecorder) BulkDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockIBulk)(nil).BulkDelete), arg0)
}

// BulkRemoveField mocks base method
func (m *MockIBulk) BulkRemoveField(arg0 string, arg1 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkRemoveField", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkRemoveField indicates an expected call of BulkRemoveField
func (mr *MockIBulkMockRecorder) BulkRemoveField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkRemoveField", reflect.TypeOf((*MockIBulk)(nil).BulkRemoveField), arg0, arg1)
}

// BulkUpdateField mocks base method
func (m *MockIBulk) BulkUpdateField(where []models.Contract, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{where}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkUpdateField", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateField indicates an expected call of BulkUpdateField
func (mr *MockIBulkMockRecorder) BulkUpdateField(where interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{where}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateField", reflect.TypeOf((*MockIBulk)(nil).BulkUpdateField), varargs...)
}

// MockIContract is a mock of IContract interface
type MockIContract struct {
	ctrl     *gomock.Controller
	recorder *MockIContractMockRecorder
}

// MockIContractMockRecorder is the mock recorder for MockIContract
type MockIContractMockRecorder struct {
	mock *MockIContract
}

// NewMockIContract creates a new mock instance
func NewMockIContract(ctrl *gomock.Controller) *MockIContract {
	mock := &MockIContract{ctrl: ctrl}
	mock.recorder = &MockIContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContract) EXPECT() *MockIContractMockRecorder {
	return m.recorder
}

// GetContract mocks base method
func (m *MockIContract) GetContract(arg0 map[string]interface{}) (models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", arg0)
	ret0, _ := ret[0].(models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract
func (mr *MockIContractMockRecorder) GetContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockIContract)(nil).GetContract), arg0)
}

// GetContractRandom mocks base method
func (m *MockIContract) GetContractRandom() (models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractRandom")
	ret0, _ := ret[0].(models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractRandom indicates an expected call of GetContractRandom
func (mr *MockIContractMockRecorder) GetContractRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractRandom", reflect.TypeOf((*MockIContract)(nil).GetContractRandom))
}

// GetContractMigrationStats mocks base method
func (m *MockIContract) GetContractMigrationStats(arg0, arg1 string) (elastic.ContractMigrationsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractMigrationStats", arg0, arg1)
	ret0, _ := ret[0].(elastic.ContractMigrationsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractMigrationStats indicates an expected call of GetContractMigrationStats
func (mr *MockIContractMockRecorder) GetContractMigrationStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMigrationStats", reflect.TypeOf((*MockIContract)(nil).GetContractMigrationStats), arg0, arg1)
}

// GetContractAddressesByNetworkAndLevel mocks base method
func (m *MockIContract) GetContractAddressesByNetworkAndLevel(arg0 string, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddressesByNetworkAndLevel", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractAddressesByNetworkAndLevel indicates an expected call of GetContractAddressesByNetworkAndLevel
func (mr *MockIContractMockRecorder) GetContractAddressesByNetworkAndLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddressesByNetworkAndLevel", reflect.TypeOf((*MockIContract)(nil).GetContractAddressesByNetworkAndLevel), arg0, arg1)
}

// GetContracts mocks base method
func (m *MockIContract) GetContracts(arg0 map[string]interface{}) ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContracts", arg0)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContracts indicates an expected call of GetContracts
func (mr *MockIContractMockRecorder) GetContracts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockIContract)(nil).GetContracts), arg0)
}

// GetContractsIDByAddress mocks base method
func (m *MockIContract) GetContractsIDByAddress(arg0 []string, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsIDByAddress", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsIDByAddress indicates an expected call of GetContractsIDByAddress
func (mr *MockIContractMockRecorder) GetContractsIDByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsIDByAddress", reflect.TypeOf((*MockIContract)(nil).GetContractsIDByAddress), arg0, arg1)
}

// GetAffectedContracts mocks base method
func (m *MockIContract) GetAffectedContracts(arg0 string, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffectedContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffectedContracts indicates an expected call of GetAffectedContracts
func (mr *MockIContractMockRecorder) GetAffectedContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffectedContracts", reflect.TypeOf((*MockIContract)(nil).GetAffectedContracts), arg0, arg1, arg2)
}

// IsFAContract mocks base method
func (m *MockIContract) IsFAContract(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFAContract", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFAContract indicates an expected call of IsFAContract
func (mr *MockIContractMockRecorder) IsFAContract(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFAContract", reflect.TypeOf((*MockIContract)(nil).IsFAContract), arg0, arg1)
}

// RecalcContractStats mocks base method
func (m *MockIContract) RecalcContractStats(arg0, arg1 string) (elastic.ContractStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalcContractStats", arg0, arg1)
	ret0, _ := ret[0].(elastic.ContractStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecalcContractStats indicates an expected call of RecalcContractStats
func (mr *MockIContractMockRecorder) RecalcContractStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalcContractStats", reflect.TypeOf((*MockIContract)(nil).RecalcContractStats), arg0, arg1)
}

// UpdateContractMigrationsCount mocks base method
func (m *MockIContract) UpdateContractMigrationsCount(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractMigrationsCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractMigrationsCount indicates an expected call of UpdateContractMigrationsCount
func (mr *MockIContractMockRecorder) UpdateContractMigrationsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractMigrationsCount", reflect.TypeOf((*MockIContract)(nil).UpdateContractMigrationsCount), arg0, arg1)
}

// GetDAppStats mocks base method
func (m *MockIContract) GetDAppStats(arg0 string, arg1 []string, arg2 string) (elastic.DAppStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(elastic.DAppStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppStats indicates an expected call of GetDAppStats
func (mr *MockIContractMockRecorder) GetDAppStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppStats", reflect.TypeOf((*MockIContract)(nil).GetDAppStats), arg0, arg1, arg2)
}

// GetContractsByAddresses mocks base method
func (m *MockIContract) GetContractsByAddresses(addresses []elastic.Address) ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByAddresses", addresses)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByAddresses indicates an expected call of GetContractsByAddresses
func (mr *MockIContractMockRecorder) GetContractsByAddresses(addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByAddresses", reflect.TypeOf((*MockIContract)(nil).GetContractsByAddresses), addresses)
}

// MockIDomains is a mock of IDomains interface
type MockIDomains struct {
	ctrl     *gomock.Controller
	recorder *MockIDomainsMockRecorder
}

// MockIDomainsMockRecorder is the mock recorder for MockIDomains
type MockIDomainsMockRecorder struct {
	mock *MockIDomains
}

// NewMockIDomains creates a new mock instance
func NewMockIDomains(ctrl *gomock.Controller) *MockIDomains {
	mock := &MockIDomains{ctrl: ctrl}
	mock.recorder = &MockIDomainsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDomains) EXPECT() *MockIDomainsMockRecorder {
	return m.recorder
}

// ListDomains mocks base method
func (m *MockIDomains) ListDomains(network string, size, offset int64) (elastic.DomainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", network, size, offset)
	ret0, _ := ret[0].(elastic.DomainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockIDomainsMockRecorder) ListDomains(network, size, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockIDomains)(nil).ListDomains), network, size, offset)
}

// ResolveDomainByAddress mocks base method
func (m *MockIDomains) ResolveDomainByAddress(network, address string) (*models.TezosDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDomainByAddress", network, address)
	ret0, _ := ret[0].(*models.TezosDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDomainByAddress indicates an expected call of ResolveDomainByAddress
func (mr *MockIDomainsMockRecorder) ResolveDomainByAddress(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDomainByAddress", reflect.TypeOf((*MockIDomains)(nil).ResolveDomainByAddress), network, address)
}

// MockIEvents is a mock of IEvents interface
type MockIEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIEventsMockRecorder
}

// MockIEventsMockRecorder is the mock recorder for MockIEvents
type MockIEventsMockRecorder struct {
	mock *MockIEvents
}

// NewMockIEvents creates a new mock instance
func NewMockIEvents(ctrl *gomock.Controller) *MockIEvents {
	mock := &MockIEvents{ctrl: ctrl}
	mock.recorder = &MockIEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEvents) EXPECT() *MockIEventsMockRecorder {
	return m.recorder
}

// GetEvents mocks base method
func (m *MockIEvents) GetEvents(arg0 []elastic.SubscriptionRequest, arg1, arg2 int64) ([]elastic.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]elastic.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockIEventsMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockIEvents)(nil).GetEvents), arg0, arg1, arg2)
}

// MockIMigrations is a mock of IMigrations interface
type MockIMigrations struct {
	ctrl     *gomock.Controller
	recorder *MockIMigrationsMockRecorder
}

// MockIMigrationsMockRecorder is the mock recorder for MockIMigrations
type MockIMigrationsMockRecorder struct {
	mock *MockIMigrations
}

// NewMockIMigrations creates a new mock instance
func NewMockIMigrations(ctrl *gomock.Controller) *MockIMigrations {
	mock := &MockIMigrations{ctrl: ctrl}
	mock.recorder = &MockIMigrationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMigrations) EXPECT() *MockIMigrationsMockRecorder {
	return m.recorder
}

// GetMigrations mocks base method
func (m *MockIMigrations) GetMigrations(arg0, arg1 string) ([]models.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrations", arg0, arg1)
	ret0, _ := ret[0].([]models.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrations indicates an expected call of GetMigrations
func (mr *MockIMigrationsMockRecorder) GetMigrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrations", reflect.TypeOf((*MockIMigrations)(nil).GetMigrations), arg0, arg1)
}

// MockIOperations is a mock of IOperations interface
type MockIOperations struct {
	ctrl     *gomock.Controller
	recorder *MockIOperationsMockRecorder
}

// MockIOperationsMockRecorder is the mock recorder for MockIOperations
type MockIOperationsMockRecorder struct {
	mock *MockIOperations
}

// NewMockIOperations creates a new mock instance
func NewMockIOperations(ctrl *gomock.Controller) *MockIOperations {
	mock := &MockIOperations{ctrl: ctrl}
	mock.recorder = &MockIOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOperations) EXPECT() *MockIOperationsMockRecorder {
	return m.recorder
}

// GetOperationsForContract mocks base method
func (m *MockIOperations) GetOperationsForContract(arg0, arg1 string, arg2 uint64, arg3 map[string]interface{}) (elastic.PageableOperations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsForContract", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(elastic.PageableOperations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsForContract indicates an expected call of GetOperationsForContract
func (mr *MockIOperationsMockRecorder) GetOperationsForContract(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForContract", reflect.TypeOf((*MockIOperations)(nil).GetOperationsForContract), arg0, arg1, arg2, arg3)
}

// GetLastOperation mocks base method
func (m *MockIOperations) GetLastOperation(arg0, arg1 string, arg2 int64) (models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOperation indicates an expected call of GetLastOperation
func (mr *MockIOperationsMockRecorder) GetLastOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOperation", reflect.TypeOf((*MockIOperations)(nil).GetLastOperation), arg0, arg1, arg2)
}

// GetOperationsStats mocks base method
func (m *MockIOperations) GetOperationsStats(network, address string) (elastic.OperationsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsStats", network, address)
	ret0, _ := ret[0].(elastic.OperationsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsStats indicates an expected call of GetOperationsStats
func (mr *MockIOperationsMockRecorder) GetOperationsStats(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsStats", reflect.TypeOf((*MockIOperations)(nil).GetOperationsStats), network, address)
}

// GetOperations mocks base method
func (m *MockIOperations) GetOperations(filter map[string]interface{}, size int64, sort bool) ([]models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", filter, size, sort)
	ret0, _ := ret[0].([]models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations
func (mr *MockIOperationsMockRecorder) GetOperations(filter, size, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockIOperations)(nil).GetOperations), filter, size, sort)
}

// GetContract24HoursVolume mocks base method
func (m *MockIOperations) GetContract24HoursVolume(network, address string, entrypoints []string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract24HoursVolume", network, address, entrypoints)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract24HoursVolume indicates an expected call of GetContract24HoursVolume
func (mr *MockIOperationsMockRecorder) GetContract24HoursVolume(network, address, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract24HoursVolume", reflect.TypeOf((*MockIOperations)(nil).GetContract24HoursVolume), network, address, entrypoints)
}

// MockIProjects is a mock of IProjects interface
type MockIProjects struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectsMockRecorder
}

// MockIProjectsMockRecorder is the mock recorder for MockIProjects
type MockIProjectsMockRecorder struct {
	mock *MockIProjects
}

// NewMockIProjects creates a new mock instance
func NewMockIProjects(ctrl *gomock.Controller) *MockIProjects {
	mock := &MockIProjects{ctrl: ctrl}
	mock.recorder = &MockIProjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIProjects) EXPECT() *MockIProjectsMockRecorder {
	return m.recorder
}

// GetProjectsLastContract mocks base method
func (m *MockIProjects) GetProjectsLastContract() ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsLastContract")
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsLastContract indicates an expected call of GetProjectsLastContract
func (mr *MockIProjectsMockRecorder) GetProjectsLastContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsLastContract", reflect.TypeOf((*MockIProjects)(nil).GetProjectsLastContract))
}

// GetSameContracts mocks base method
func (m *MockIProjects) GetSameContracts(arg0 models.Contract, arg1, arg2 int64) (elastic.SameContractsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSameContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].(elastic.SameContractsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSameContracts indicates an expected call of GetSameContracts
func (mr *MockIProjectsMockRecorder) GetSameContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSameContracts", reflect.TypeOf((*MockIProjects)(nil).GetSameContracts), arg0, arg1, arg2)
}

// GetSimilarContracts mocks base method
func (m *MockIProjects) GetSimilarContracts(arg0 models.Contract, arg1, arg2 int64) ([]elastic.SimilarContract, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]elastic.SimilarContract)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSimilarContracts indicates an expected call of GetSimilarContracts
func (mr *MockIProjectsMockRecorder) GetSimilarContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarContracts", reflect.TypeOf((*MockIProjects)(nil).GetSimilarContracts), arg0, arg1, arg2)
}

// GetDiffTasks mocks base method
func (m *MockIProjects) GetDiffTasks() ([]elastic.DiffTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiffTasks")
	ret0, _ := ret[0].([]elastic.DiffTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiffTasks indicates an expected call of GetDiffTasks
func (mr *MockIProjectsMockRecorder) GetDiffTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiffTasks", reflect.TypeOf((*MockIProjects)(nil).GetDiffTasks))
}

// MockIProtocol is a mock of IProtocol interface
type MockIProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockIProtocolMockRecorder
}

// MockIProtocolMockRecorder is the mock recorder for MockIProtocol
type MockIProtocolMockRecorder struct {
	mock *MockIProtocol
}

// NewMockIProtocol creates a new mock instance
func NewMockIProtocol(ctrl *gomock.Controller) *MockIProtocol {
	mock := &MockIProtocol{ctrl: ctrl}
	mock.recorder = &MockIProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIProtocol) EXPECT() *MockIProtocolMockRecorder {
	return m.recorder
}

// GetProtocol mocks base method
func (m *MockIProtocol) GetProtocol(arg0, arg1 string, arg2 int64) (models.Protocol, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Protocol)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocol indicates an expected call of GetProtocol
func (mr *MockIProtocolMockRecorder) GetProtocol(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockIProtocol)(nil).GetProtocol), arg0, arg1, arg2)
}

// GetSymLinks mocks base method
func (m *MockIProtocol) GetSymLinks(arg0 string, arg1 int64) (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymLinks", arg0, arg1)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymLinks indicates an expected call of GetSymLinks
func (mr *MockIProtocolMockRecorder) GetSymLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymLinks", reflect.TypeOf((*MockIProtocol)(nil).GetSymLinks), arg0, arg1)
}

// MockISearch is a mock of ISearch interface
type MockISearch struct {
	ctrl     *gomock.Controller
	recorder *MockISearchMockRecorder
}

// MockISearchMockRecorder is the mock recorder for MockISearch
type MockISearchMockRecorder struct {
	mock *MockISearch
}

// NewMockISearch creates a new mock instance
func NewMockISearch(ctrl *gomock.Controller) *MockISearch {
	mock := &MockISearch{ctrl: ctrl}
	mock.recorder = &MockISearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISearch) EXPECT() *MockISearchMockRecorder {
	return m.recorder
}

// SearchByText mocks base method
func (m *MockISearch) SearchByText(arg0 string, arg1 int64, arg2 []string, arg3 map[string]interface{}, arg4 bool) (search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByText", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByText indicates an expected call of SearchByText
func (mr *MockISearchMockRecorder) SearchByText(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByText", reflect.TypeOf((*MockISearch)(nil).SearchByText), arg0, arg1, arg2, arg3, arg4)
}

// MockISnapshot is a mock of ISnapshot interface
type MockISnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockISnapshotMockRecorder
}

// MockISnapshotMockRecorder is the mock recorder for MockISnapshot
type MockISnapshotMockRecorder struct {
	mock *MockISnapshot
}

// NewMockISnapshot creates a new mock instance
func NewMockISnapshot(ctrl *gomock.Controller) *MockISnapshot {
	mock := &MockISnapshot{ctrl: ctrl}
	mock.recorder = &MockISnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISnapshot) EXPECT() *MockISnapshotMockRecorder {
	return m.recorder
}

// CreateAWSRepository mocks base method
func (m *MockISnapshot) CreateAWSRepository(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAWSRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAWSRepository indicates an expected call of CreateAWSRepository
func (mr *MockISnapshotMockRecorder) CreateAWSRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAWSRepository", reflect.TypeOf((*MockISnapshot)(nil).CreateAWSRepository), arg0, arg1, arg2)
}

// ListRepositories mocks base method
func (m *MockISnapshot) ListRepositories() ([]elastic.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories")
	ret0, _ := ret[0].([]elastic.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockISnapshotMockRecorder) ListRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockISnapshot)(nil).ListRepositories))
}

// CreateSnapshots mocks base method
func (m *MockISnapshot) CreateSnapshots(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshots indicates an expected call of CreateSnapshots
func (mr *MockISnapshotMockRecorder) CreateSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshots", reflect.TypeOf((*MockISnapshot)(nil).CreateSnapshots), arg0, arg1, arg2)
}

// RestoreSnapshots mocks base method
func (m *MockISnapshot) RestoreSnapshots(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSnapshots indicates an expected call of RestoreSnapshots
func (mr *MockISnapshotMockRecorder) RestoreSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshots", reflect.TypeOf((*MockISnapshot)(nil).RestoreSnapshots), arg0, arg1, arg2)
}

// ListSnapshots mocks base method
func (m *MockISnapshot) ListSnapshots(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockISnapshotMockRecorder) ListSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockISnapshot)(nil).ListSnapshots), arg0)
}

// SetSnapshotPolicy mocks base method
func (m *MockISnapshot) SetSnapshotPolicy(arg0, arg1, arg2, arg3 string, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotPolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotPolicy indicates an expected call of SetSnapshotPolicy
func (mr *MockISnapshotMockRecorder) SetSnapshotPolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotPolicy", reflect.TypeOf((*MockISnapshot)(nil).SetSnapshotPolicy), arg0, arg1, arg2, arg3, arg4)
}

// GetAllPolicies mocks base method
func (m *MockISnapshot) GetAllPolicies() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPolicies")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPolicies indicates an expected call of GetAllPolicies
func (mr *MockISnapshotMockRecorder) GetAllPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPolicies", reflect.TypeOf((*MockISnapshot)(nil).GetAllPolicies))
}

// GetMappings mocks base method
func (m *MockISnapshot) GetMappings(arg0 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappings", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMappings indicates an expected call of GetMappings
func (mr *MockISnapshotMockRecorder) GetMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMappings", reflect.TypeOf((*MockISnapshot)(nil).GetMappings), arg0)
}

// CreateMapping mocks base method
func (m *MockISnapshot) CreateMapping(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMapping indicates an expected call of CreateMapping
func (mr *MockISnapshotMockRecorder) CreateMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapping", reflect.TypeOf((*MockISnapshot)(nil).CreateMapping), arg0, arg1)
}

// ReloadSecureSettings mocks base method
func (m *MockISnapshot) ReloadSecureSettings() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSecureSettings")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSecureSettings indicates an expected call of ReloadSecureSettings
func (mr *MockISnapshotMockRecorder) ReloadSecureSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSecureSettings", reflect.TypeOf((*MockISnapshot)(nil).ReloadSecureSettings))
}

// MockIStats is a mock of IStats interface
type MockIStats struct {
	ctrl     *gomock.Controller
	recorder *MockIStatsMockRecorder
}

// MockIStatsMockRecorder is the mock recorder for MockIStats
type MockIStatsMockRecorder struct {
	mock *MockIStats
}

// NewMockIStats creates a new mock instance
func NewMockIStats(ctrl *gomock.Controller) *MockIStats {
	mock := &MockIStats{ctrl: ctrl}
	mock.recorder = &MockIStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStats) EXPECT() *MockIStatsMockRecorder {
	return m.recorder
}

// GetNetworkCountStats mocks base method
func (m *MockIStats) GetNetworkCountStats(arg0 string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkCountStats", arg0)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkCountStats indicates an expected call of GetNetworkCountStats
func (mr *MockIStatsMockRecorder) GetNetworkCountStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkCountStats", reflect.TypeOf((*MockIStats)(nil).GetNetworkCountStats), arg0)
}

// GetDateHistogram mocks base method
func (m *MockIStats) GetDateHistogram(period string, opts ...elastic.HistogramOption) ([][]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{period}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDateHistogram", varargs...)
	ret0, _ := ret[0].([][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateHistogram indicates an expected call of GetDateHistogram
func (mr *MockIStatsMockRecorder) GetDateHistogram(period interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{period}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateHistogram", reflect.TypeOf((*MockIStats)(nil).GetDateHistogram), varargs...)
}

// GetCallsCountByNetwork mocks base method
func (m *MockIStats) GetCallsCountByNetwork() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallsCountByNetwork")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallsCountByNetwork indicates an expected call of GetCallsCountByNetwork
func (mr *MockIStatsMockRecorder) GetCallsCountByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallsCountByNetwork", reflect.TypeOf((*MockIStats)(nil).GetCallsCountByNetwork))
}

// GetContractStatsByNetwork mocks base method
func (m *MockIStats) GetContractStatsByNetwork() (map[string]elastic.ContractCountStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatsByNetwork")
	ret0, _ := ret[0].(map[string]elastic.ContractCountStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatsByNetwork indicates an expected call of GetContractStatsByNetwork
func (mr *MockIStatsMockRecorder) GetContractStatsByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatsByNetwork", reflect.TypeOf((*MockIStats)(nil).GetContractStatsByNetwork))
}

// GetFACountByNetwork mocks base method
func (m *MockIStats) GetFACountByNetwork() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFACountByNetwork")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFACountByNetwork indicates an expected call of GetFACountByNetwork
func (mr *MockIStatsMockRecorder) GetFACountByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFACountByNetwork", reflect.TypeOf((*MockIStats)(nil).GetFACountByNetwork))
}

// GetLanguagesForNetwork mocks base method
func (m *MockIStats) GetLanguagesForNetwork(network string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagesForNetwork", network)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagesForNetwork indicates an expected call of GetLanguagesForNetwork
func (mr *MockIStatsMockRecorder) GetLanguagesForNetwork(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagesForNetwork", reflect.TypeOf((*MockIStats)(nil).GetLanguagesForNetwork), network)
}

// MockITokens is a mock of ITokens interface
type MockITokens struct {
	ctrl     *gomock.Controller
	recorder *MockITokensMockRecorder
}

// MockITokensMockRecorder is the mock recorder for MockITokens
type MockITokensMockRecorder struct {
	mock *MockITokens
}

// NewMockITokens creates a new mock instance
func NewMockITokens(ctrl *gomock.Controller) *MockITokens {
	mock := &MockITokens{ctrl: ctrl}
	mock.recorder = &MockITokensMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITokens) EXPECT() *MockITokensMockRecorder {
	return m.recorder
}

// GetTokens mocks base method
func (m *MockITokens) GetTokens(arg0, arg1 string, arg2, arg3 int64) ([]models.Contract, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokens indicates an expected call of GetTokens
func (mr *MockITokensMockRecorder) GetTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockITokens)(nil).GetTokens), arg0, arg1, arg2, arg3)
}

// GetTokensStats mocks base method
func (m *MockITokens) GetTokensStats(arg0 string, arg1, arg2 []string) (map[string]elastic.TokenUsageStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]elastic.TokenUsageStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokensStats indicates an expected call of GetTokensStats
func (mr *MockITokensMockRecorder) GetTokensStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensStats", reflect.TypeOf((*MockITokens)(nil).GetTokensStats), arg0, arg1, arg2)
}

// GetTokenVolumeSeries mocks base method
func (m *MockITokens) GetTokenVolumeSeries(arg0, arg1 string, arg2 []string, arg3 []tzip.DAppContract, arg4 uint) ([][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenVolumeSeries", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenVolumeSeries indicates an expected call of GetTokenVolumeSeries
func (mr *MockITokensMockRecorder) GetTokenVolumeSeries(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenVolumeSeries", reflect.TypeOf((*MockITokens)(nil).GetTokenVolumeSeries), arg0, arg1, arg2, arg3, arg4)
}

// GetBalances mocks base method
func (m *MockITokens) GetBalances(arg0, arg1 string, arg2 int64, arg3 ...elastic.TokenBalance) (map[elastic.TokenBalance]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBalances", varargs...)
	ret0, _ := ret[0].(map[elastic.TokenBalance]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances
func (mr *MockITokensMockRecorder) GetBalances(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockITokens)(nil).GetBalances), varargs...)
}

// GetAccountBalances mocks base method
func (m *MockITokens) GetAccountBalances(arg0, arg1 string) ([]models.TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", arg0, arg1)
	ret0, _ := ret[0].([]models.TokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances
func (mr *MockITokensMockRecorder) GetAccountBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockITokens)(nil).GetAccountBalances), arg0, arg1)
}

// GetTokenSupply mocks base method
func (m *MockITokens) GetTokenSupply(network, address string, tokenID int64) (elastic.TokenSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSupply", network, address, tokenID)
	ret0, _ := ret[0].(elastic.TokenSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenSupply indicates an expected call of GetTokenSupply
func (mr *MockITokensMockRecorder) GetTokenSupply(network, address, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSupply", reflect.TypeOf((*MockITokens)(nil).GetTokenSupply), network, address, tokenID)
}

// GetTransfers mocks base method
func (m *MockITokens) GetTransfers(ctx elastic.GetTransfersContext) (elastic.TransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", ctx)
	ret0, _ := ret[0].(elastic.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers
func (mr *MockITokensMockRecorder) GetTransfers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockITokens)(nil).GetTransfers), ctx)
}

// GetAllTransfers mocks base method
func (m *MockITokens) GetAllTransfers(network string, level int64) ([]models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransfers", network, level)
	ret0, _ := ret[0].([]models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransfers indicates an expected call of GetAllTransfers
func (mr *MockITokensMockRecorder) GetAllTransfers(network, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransfers", reflect.TypeOf((*MockITokens)(nil).GetAllTransfers), network, level)
}

// UpdateTokenBalances mocks base method
func (m *MockITokens) UpdateTokenBalances(updates []*models.TokenBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenBalances", updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenBalances indicates an expected call of UpdateTokenBalances
func (mr *MockITokensMockRecorder) UpdateTokenBalances(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenBalances", reflect.TypeOf((*MockITokens)(nil).UpdateTokenBalances), updates)
}

// GetHolders mocks base method
func (m *MockITokens) GetHolders(network, contract string, tokenID int64) ([]models.TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolders", network, contract, tokenID)
	ret0, _ := ret[0].([]models.TokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolders indicates an expected call of GetHolders
func (mr *MockITokensMockRecorder) GetHolders(network, contract, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolders", reflect.TypeOf((*MockITokens)(nil).GetHolders), network, contract, tokenID)
}

// GetToken24HoursVolume mocks base method
func (m *MockITokens) GetToken24HoursVolume(network, contract string, initiators, entrypoints []string, tokenID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken24HoursVolume", network, contract, initiators, entrypoints, tokenID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken24HoursVolume indicates an expected call of GetToken24HoursVolume
func (mr *MockITokensMockRecorder) GetToken24HoursVolume(network, contract, initiators, entrypoints, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken24HoursVolume", reflect.TypeOf((*MockITokens)(nil).GetToken24HoursVolume), network, contract, initiators, entrypoints, tokenID)
}

// MockITZIP is a mock of ITZIP interface
type MockITZIP struct {
	ctrl     *gomock.Controller
	recorder *MockITZIPMockRecorder
}

// MockITZIPMockRecorder is the mock recorder for MockITZIP
type MockITZIPMockRecorder struct {
	mock *MockITZIP
}

// NewMockITZIP creates a new mock instance
func NewMockITZIP(ctrl *gomock.Controller) *MockITZIP {
	mock := &MockITZIP{ctrl: ctrl}
	mock.recorder = &MockITZIPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITZIP) EXPECT() *MockITZIPMockRecorder {
	return m.recorder
}

// GetTZIP mocks base method
func (m *MockITZIP) GetTZIP(network, address string) (models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZIP", network, address)
	ret0, _ := ret[0].(models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTZIP indicates an expected call of GetTZIP
func (mr *MockITZIPMockRecorder) GetTZIP(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZIP", reflect.TypeOf((*MockITZIP)(nil).GetTZIP), network, address)
}

// GetTZIPWithEvents mocks base method
func (m *MockITZIP) GetTZIPWithEvents() ([]models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZIPWithEvents")
	ret0, _ := ret[0].([]models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTZIPWithEvents indicates an expected call of GetTZIPWithEvents
func (mr *MockITZIPMockRecorder) GetTZIPWithEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZIPWithEvents", reflect.TypeOf((*MockITZIP)(nil).GetTZIPWithEvents))
}

// GetTokenMetadata mocks base method
func (m *MockITZIP) GetTokenMetadata(ctx elastic.GetTokenMetadataContext) ([]elastic.TokenMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadata", ctx)
	ret0, _ := ret[0].([]elastic.TokenMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenMetadata indicates an expected call of GetTokenMetadata
func (mr *MockITZIPMockRecorder) GetTokenMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadata", reflect.TypeOf((*MockITZIP)(nil).GetTokenMetadata), ctx)
}

// GetDApps mocks base method
func (m *MockITZIP) GetDApps() ([]tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDApps")
	ret0, _ := ret[0].([]tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDApps indicates an expected call of GetDApps
func (mr *MockITZIPMockRecorder) GetDApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDApps", reflect.TypeOf((*MockITZIP)(nil).GetDApps))
}

// GetDAppBySlug mocks base method
func (m *MockITZIP) GetDAppBySlug(slug string) (*tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppBySlug", slug)
	ret0, _ := ret[0].(*tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppBySlug indicates an expected call of GetDAppBySlug
func (mr *MockITZIPMockRecorder) GetDAppBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppBySlug", reflect.TypeOf((*MockITZIP)(nil).GetDAppBySlug), slug)
}

// GetBySlug mocks base method
func (m *MockITZIP) GetBySlug(slug string) (*models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", slug)
	ret0, _ := ret[0].(*models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug
func (mr *MockITZIPMockRecorder) GetBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockITZIP)(nil).GetBySlug), slug)
}

// GetAliases mocks base method
func (m *MockITZIP) GetAliases(network string) ([]models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", network)
	ret0, _ := ret[0].([]models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases
func (mr *MockITZIPMockRecorder) GetAliases(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockITZIP)(nil).GetAliases), network)
}

// GetAliasesMap mocks base method
func (m *MockITZIP) GetAliasesMap(network string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasesMap", network)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasesMap indicates an expected call of GetAliasesMap
func (mr *MockITZIPMockRecorder) GetAliasesMap(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasesMap", reflect.TypeOf((*MockITZIP)(nil).GetAliasesMap), network)
}

// GetAlias mocks base method
func (m *MockITZIP) GetAlias(network, address string) (*models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", network, address)
	ret0, _ := ret[0].(*models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockITZIPMockRecorder) GetAlias(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockITZIP)(nil).GetAlias), network, address)
}

// MockIElastic is a mock of IElastic interface
type MockIElastic struct {
	ctrl     *gomock.Controller
	recorder *MockIElasticMockRecorder
}

// MockIElasticMockRecorder is the mock recorder for MockIElastic
type MockIElasticMockRecorder struct {
	mock *MockIElastic
}

// NewMockIElastic creates a new mock instance
func NewMockIElastic(ctrl *gomock.Controller) *MockIElastic {
	mock := &MockIElastic{ctrl: ctrl}
	mock.recorder = &MockIElasticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIElastic) EXPECT() *MockIElasticMockRecorder {
	return m.recorder
}

// CreateIndexes mocks base method
func (m *MockIElastic) CreateIndexes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes
func (mr *MockIElasticMockRecorder) CreateIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockIElastic)(nil).CreateIndexes))
}

// DeleteIndices mocks base method
func (m *MockIElastic) DeleteIndices(indices []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndices", indices)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndices indicates an expected call of DeleteIndices
func (mr *MockIElasticMockRecorder) DeleteIndices(indices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndices", reflect.TypeOf((*MockIElastic)(nil).DeleteIndices), indices)
}

// DeleteByLevelAndNetwork mocks base method
func (m *MockIElastic) DeleteByLevelAndNetwork(arg0 []string, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLevelAndNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByLevelAndNetwork indicates an expected call of DeleteByLevelAndNetwork
func (mr *MockIElasticMockRecorder) DeleteByLevelAndNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLevelAndNetwork", reflect.TypeOf((*MockIElastic)(nil).DeleteByLevelAndNetwork), arg0, arg1, arg2)
}

// DeleteByContract mocks base method
func (m *MockIElastic) DeleteByContract(indices []string, network, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByContract", indices, network, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByContract indicates an expected call of DeleteByContract
func (mr *MockIElasticMockRecorder) DeleteByContract(indices, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByContract", reflect.TypeOf((*MockIElastic)(nil).DeleteByContract), indices, network, address)
}

// GetAll mocks base method
func (m *MockIElastic) GetAll(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockIElasticMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIElastic)(nil).GetAll), arg0)
}

// GetByID mocks base method
func (m *MockIElastic) GetByID(arg0 elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID
func (mr *MockIElasticMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIElastic)(nil).GetByID), arg0)
}

// GetByIDs mocks base method
func (m *MockIElastic) GetByIDs(output interface{}, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{output}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockIElasticMockRecorder) GetByIDs(output interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{output}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockIElastic)(nil).GetByIDs), varargs...)
}

// GetByNetwork mocks base method
func (m *MockIElastic) GetByNetwork(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByNetwork indicates an expected call of GetByNetwork
func (mr *MockIElasticMockRecorder) GetByNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetwork", reflect.TypeOf((*MockIElastic)(nil).GetByNetwork), arg0, arg1)
}

// GetByNetworkWithSort mocks base method
func (m *MockIElastic) GetByNetworkWithSort(arg0, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNetworkWithSort", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByNetworkWithSort indicates an expected call of GetByNetworkWithSort
func (mr *MockIElasticMockRecorder) GetByNetworkWithSort(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNetworkWithSort", reflect.TypeOf((*MockIElastic)(nil).GetByNetworkWithSort), arg0, arg1, arg2, arg3)
}

// UpdateDoc mocks base method
func (m *MockIElastic) UpdateDoc(model elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoc", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoc indicates an expected call of UpdateDoc
func (mr *MockIElasticMockRecorder) UpdateDoc(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoc", reflect.TypeOf((*MockIElastic)(nil).UpdateDoc), model)
}

// UpdateFields mocks base method
func (m *MockIElastic) UpdateFields(arg0, arg1 string, arg2 interface{}, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFields", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFields indicates an expected call of UpdateFields
func (mr *MockIElasticMockRecorder) UpdateFields(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFields", reflect.TypeOf((*MockIElastic)(nil).UpdateFields), varargs...)
}

// GetBalance mocks base method
func (m *MockIElastic) GetBalance(network, address string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", network, address)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockIElasticMockRecorder) GetBalance(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIElastic)(nil).GetBalance), network, address)
}

// GetBigMapKey mocks base method
func (m *MockIElastic) GetBigMapKey(network, keyHash string, ptr int64) (elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapKey", network, keyHash, ptr)
	ret0, _ := ret[0].(elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapKey indicates an expected call of GetBigMapKey
func (mr *MockIElasticMockRecorder) GetBigMapKey(network, keyHash, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapKey", reflect.TypeOf((*MockIElastic)(nil).GetBigMapKey), network, keyHash, ptr)
}

// GetBigMapKeys mocks base method
func (m *MockIElastic) GetBigMapKeys(ctx elastic.GetBigMapKeysContext) ([]elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapKeys", ctx)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapKeys indicates an expected call of GetBigMapKeys
func (mr *MockIElasticMockRecorder) GetBigMapKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapKeys", reflect.TypeOf((*MockIElastic)(nil).GetBigMapKeys), ctx)
}

// GetBigMapsForAddress mocks base method
func (m *MockIElastic) GetBigMapsForAddress(arg0, arg1 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapsForAddress", arg0, arg1)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapsForAddress indicates an expected call of GetBigMapsForAddress
func (mr *MockIElasticMockRecorder) GetBigMapsForAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapsForAddress", reflect.TypeOf((*MockIElastic)(nil).GetBigMapsForAddress), arg0, arg1)
}

// GetBigMapHistory mocks base method
func (m *MockIElastic) GetBigMapHistory(arg0 int64, arg1 string) ([]models.BigMapAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapHistory", arg0, arg1)
	ret0, _ := ret[0].([]models.BigMapAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapHistory indicates an expected call of GetBigMapHistory
func (mr *MockIElasticMockRecorder) GetBigMapHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapHistory", reflect.TypeOf((*MockIElastic)(nil).GetBigMapHistory), arg0, arg1)
}

// GetBigMapValuesByKey mocks base method
func (m *MockIElastic) GetBigMapValuesByKey(arg0 string) ([]elastic.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapValuesByKey", arg0)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapValuesByKey indicates an expected call of GetBigMapValuesByKey
func (mr *MockIElasticMockRecorder) GetBigMapValuesByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapValuesByKey", reflect.TypeOf((*MockIElastic)(nil).GetBigMapValuesByKey), arg0)
}

// GetBigMapDiffsCount mocks base method
func (m *MockIElastic) GetBigMapDiffsCount(network string, ptr int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsCount", network, ptr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsCount indicates an expected call of GetBigMapDiffsCount
func (mr *MockIElasticMockRecorder) GetBigMapDiffsCount(network, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsCount", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsCount), network, ptr)
}

// GetBigMapDiffsForAddress mocks base method
func (m *MockIElastic) GetBigMapDiffsForAddress(arg0 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsForAddress", arg0)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsForAddress indicates an expected call of GetBigMapDiffsForAddress
func (mr *MockIElasticMockRecorder) GetBigMapDiffsForAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsForAddress", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsForAddress), arg0)
}

// GetBigMapDiffsPrevious mocks base method
func (m *MockIElastic) GetBigMapDiffsPrevious(arg0 []models.BigMapDiff, arg1 int64, arg2 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsPrevious", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsPrevious indicates an expected call of GetBigMapDiffsPrevious
func (mr *MockIElasticMockRecorder) GetBigMapDiffsPrevious(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsPrevious", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsPrevious), arg0, arg1, arg2)
}

// GetBigMapDiffsUniqueByOperationID mocks base method
func (m *MockIElastic) GetBigMapDiffsUniqueByOperationID(arg0 string) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsUniqueByOperationID", arg0)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsUniqueByOperationID indicates an expected call of GetBigMapDiffsUniqueByOperationID
func (mr *MockIElasticMockRecorder) GetBigMapDiffsUniqueByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsUniqueByOperationID", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsUniqueByOperationID), arg0)
}

// GetBigMapDiffsByPtrAndKeyHash mocks base method
func (m *MockIElastic) GetBigMapDiffsByPtrAndKeyHash(arg0 int64, arg1, arg2 string, arg3, arg4 int64) ([]elastic.BigMapDiff, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByPtrAndKeyHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]elastic.BigMapDiff)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBigMapDiffsByPtrAndKeyHash indicates an expected call of GetBigMapDiffsByPtrAndKeyHash
func (mr *MockIElasticMockRecorder) GetBigMapDiffsByPtrAndKeyHash(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByPtrAndKeyHash", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsByPtrAndKeyHash), arg0, arg1, arg2, arg3, arg4)
}

// GetBigMapDiffsByOperationID mocks base method
func (m *MockIElastic) GetBigMapDiffsByOperationID(arg0 string) ([]*models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByOperationID", arg0)
	ret0, _ := ret[0].([]*models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsByOperationID indicates an expected call of GetBigMapDiffsByOperationID
func (mr *MockIElasticMockRecorder) GetBigMapDiffsByOperationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByOperationID", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsByOperationID), arg0)
}

// GetBigMapDiffsByPtr mocks base method
func (m *MockIElastic) GetBigMapDiffsByPtr(arg0, arg1 string, arg2 int64) ([]models.BigMapDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigMapDiffsByPtr", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.BigMapDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigMapDiffsByPtr indicates an expected call of GetBigMapDiffsByPtr
func (mr *MockIElasticMockRecorder) GetBigMapDiffsByPtr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigMapDiffsByPtr", reflect.TypeOf((*MockIElastic)(nil).GetBigMapDiffsByPtr), arg0, arg1, arg2)
}

// GetBlock mocks base method
func (m *MockIElastic) GetBlock(arg0 string, arg1 int64) (models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1)
	ret0, _ := ret[0].(models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockIElasticMockRecorder) GetBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockIElastic)(nil).GetBlock), arg0, arg1)
}

// GetLastBlock mocks base method
func (m *MockIElastic) GetLastBlock(arg0 string) (models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock", arg0)
	ret0, _ := ret[0].(models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock
func (mr *MockIElasticMockRecorder) GetLastBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockIElastic)(nil).GetLastBlock), arg0)
}

// GetLastBlocks mocks base method
func (m *MockIElastic) GetLastBlocks() ([]models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlocks")
	ret0, _ := ret[0].([]models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlocks indicates an expected call of GetLastBlocks
func (mr *MockIElasticMockRecorder) GetLastBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlocks", reflect.TypeOf((*MockIElastic)(nil).GetLastBlocks))
}

// GetNetworkAlias mocks base method
func (m *MockIElastic) GetNetworkAlias(chainID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAlias", chainID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAlias indicates an expected call of GetNetworkAlias
func (mr *MockIElasticMockRecorder) GetNetworkAlias(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAlias", reflect.TypeOf((*MockIElastic)(nil).GetNetworkAlias), chainID)
}

// BulkInsert mocks base method
func (m *MockIElastic) BulkInsert(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert
func (mr *MockIElasticMockRecorder) BulkInsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockIElastic)(nil).BulkInsert), arg0)
}

// BulkUpdate mocks base method
func (m *MockIElastic) BulkUpdate(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate
func (mr *MockIElasticMockRecorder) BulkUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockIElastic)(nil).BulkUpdate), arg0)
}

// BulkDelete mocks base method
func (m *MockIElastic) BulkDelete(arg0 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockIElasticMockRecorder) BulkDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockIElastic)(nil).BulkDelete), arg0)
}

// BulkRemoveField mocks base method
func (m *MockIElastic) BulkRemoveField(arg0 string, arg1 []elastic.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkRemoveField", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkRemoveField indicates an expected call of BulkRemoveField
func (mr *MockIElasticMockRecorder) BulkRemoveField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkRemoveField", reflect.TypeOf((*MockIElastic)(nil).BulkRemoveField), arg0, arg1)
}

// BulkUpdateField mocks base method
func (m *MockIElastic) BulkUpdateField(where []models.Contract, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{where}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkUpdateField", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateField indicates an expected call of BulkUpdateField
func (mr *MockIElasticMockRecorder) BulkUpdateField(where interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{where}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateField", reflect.TypeOf((*MockIElastic)(nil).BulkUpdateField), varargs...)
}

// GetContract mocks base method
func (m *MockIElastic) GetContract(arg0 map[string]interface{}) (models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", arg0)
	ret0, _ := ret[0].(models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract
func (mr *MockIElasticMockRecorder) GetContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockIElastic)(nil).GetContract), arg0)
}

// GetContractRandom mocks base method
func (m *MockIElastic) GetContractRandom() (models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractRandom")
	ret0, _ := ret[0].(models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractRandom indicates an expected call of GetContractRandom
func (mr *MockIElasticMockRecorder) GetContractRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractRandom", reflect.TypeOf((*MockIElastic)(nil).GetContractRandom))
}

// GetContractMigrationStats mocks base method
func (m *MockIElastic) GetContractMigrationStats(arg0, arg1 string) (elastic.ContractMigrationsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractMigrationStats", arg0, arg1)
	ret0, _ := ret[0].(elastic.ContractMigrationsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractMigrationStats indicates an expected call of GetContractMigrationStats
func (mr *MockIElasticMockRecorder) GetContractMigrationStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMigrationStats", reflect.TypeOf((*MockIElastic)(nil).GetContractMigrationStats), arg0, arg1)
}

// GetContractAddressesByNetworkAndLevel mocks base method
func (m *MockIElastic) GetContractAddressesByNetworkAndLevel(arg0 string, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddressesByNetworkAndLevel", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractAddressesByNetworkAndLevel indicates an expected call of GetContractAddressesByNetworkAndLevel
func (mr *MockIElasticMockRecorder) GetContractAddressesByNetworkAndLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddressesByNetworkAndLevel", reflect.TypeOf((*MockIElastic)(nil).GetContractAddressesByNetworkAndLevel), arg0, arg1)
}

// GetContracts mocks base method
func (m *MockIElastic) GetContracts(arg0 map[string]interface{}) ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContracts", arg0)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContracts indicates an expected call of GetContracts
func (mr *MockIElasticMockRecorder) GetContracts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockIElastic)(nil).GetContracts), arg0)
}

// GetContractsIDByAddress mocks base method
func (m *MockIElastic) GetContractsIDByAddress(arg0 []string, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsIDByAddress", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsIDByAddress indicates an expected call of GetContractsIDByAddress
func (mr *MockIElasticMockRecorder) GetContractsIDByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsIDByAddress", reflect.TypeOf((*MockIElastic)(nil).GetContractsIDByAddress), arg0, arg1)
}

// GetAffectedContracts mocks base method
func (m *MockIElastic) GetAffectedContracts(arg0 string, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffectedContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffectedContracts indicates an expected call of GetAffectedContracts
func (mr *MockIElasticMockRecorder) GetAffectedContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffectedContracts", reflect.TypeOf((*MockIElastic)(nil).GetAffectedContracts), arg0, arg1, arg2)
}

// IsFAContract mocks base method
func (m *MockIElastic) IsFAContract(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFAContract", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFAContract indicates an expected call of IsFAContract
func (mr *MockIElasticMockRecorder) IsFAContract(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFAContract", reflect.TypeOf((*MockIElastic)(nil).IsFAContract), arg0, arg1)
}

// RecalcContractStats mocks base method
func (m *MockIElastic) RecalcContractStats(arg0, arg1 string) (elastic.ContractStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalcContractStats", arg0, arg1)
	ret0, _ := ret[0].(elastic.ContractStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecalcContractStats indicates an expected call of RecalcContractStats
func (mr *MockIElasticMockRecorder) RecalcContractStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalcContractStats", reflect.TypeOf((*MockIElastic)(nil).RecalcContractStats), arg0, arg1)
}

// UpdateContractMigrationsCount mocks base method
func (m *MockIElastic) UpdateContractMigrationsCount(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractMigrationsCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractMigrationsCount indicates an expected call of UpdateContractMigrationsCount
func (mr *MockIElasticMockRecorder) UpdateContractMigrationsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractMigrationsCount", reflect.TypeOf((*MockIElastic)(nil).UpdateContractMigrationsCount), arg0, arg1)
}

// GetDAppStats mocks base method
func (m *MockIElastic) GetDAppStats(arg0 string, arg1 []string, arg2 string) (elastic.DAppStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(elastic.DAppStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppStats indicates an expected call of GetDAppStats
func (mr *MockIElasticMockRecorder) GetDAppStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppStats", reflect.TypeOf((*MockIElastic)(nil).GetDAppStats), arg0, arg1, arg2)
}

// GetContractsByAddresses mocks base method
func (m *MockIElastic) GetContractsByAddresses(addresses []elastic.Address) ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByAddresses", addresses)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByAddresses indicates an expected call of GetContractsByAddresses
func (mr *MockIElasticMockRecorder) GetContractsByAddresses(addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByAddresses", reflect.TypeOf((*MockIElastic)(nil).GetContractsByAddresses), addresses)
}

// ListDomains mocks base method
func (m *MockIElastic) ListDomains(network string, size, offset int64) (elastic.DomainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", network, size, offset)
	ret0, _ := ret[0].(elastic.DomainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains
func (mr *MockIElasticMockRecorder) ListDomains(network, size, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockIElastic)(nil).ListDomains), network, size, offset)
}

// ResolveDomainByAddress mocks base method
func (m *MockIElastic) ResolveDomainByAddress(network, address string) (*models.TezosDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDomainByAddress", network, address)
	ret0, _ := ret[0].(*models.TezosDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDomainByAddress indicates an expected call of ResolveDomainByAddress
func (mr *MockIElasticMockRecorder) ResolveDomainByAddress(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDomainByAddress", reflect.TypeOf((*MockIElastic)(nil).ResolveDomainByAddress), network, address)
}

// GetEvents mocks base method
func (m *MockIElastic) GetEvents(arg0 []elastic.SubscriptionRequest, arg1, arg2 int64) ([]elastic.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]elastic.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockIElasticMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockIElastic)(nil).GetEvents), arg0, arg1, arg2)
}

// GetMigrations mocks base method
func (m *MockIElastic) GetMigrations(arg0, arg1 string) ([]models.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrations", arg0, arg1)
	ret0, _ := ret[0].([]models.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrations indicates an expected call of GetMigrations
func (mr *MockIElasticMockRecorder) GetMigrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrations", reflect.TypeOf((*MockIElastic)(nil).GetMigrations), arg0, arg1)
}

// GetOperationsForContract mocks base method
func (m *MockIElastic) GetOperationsForContract(arg0, arg1 string, arg2 uint64, arg3 map[string]interface{}) (elastic.PageableOperations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsForContract", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(elastic.PageableOperations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsForContract indicates an expected call of GetOperationsForContract
func (mr *MockIElasticMockRecorder) GetOperationsForContract(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForContract", reflect.TypeOf((*MockIElastic)(nil).GetOperationsForContract), arg0, arg1, arg2, arg3)
}

// GetLastOperation mocks base method
func (m *MockIElastic) GetLastOperation(arg0, arg1 string, arg2 int64) (models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOperation indicates an expected call of GetLastOperation
func (mr *MockIElasticMockRecorder) GetLastOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOperation", reflect.TypeOf((*MockIElastic)(nil).GetLastOperation), arg0, arg1, arg2)
}

// GetOperationsStats mocks base method
func (m *MockIElastic) GetOperationsStats(network, address string) (elastic.OperationsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsStats", network, address)
	ret0, _ := ret[0].(elastic.OperationsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsStats indicates an expected call of GetOperationsStats
func (mr *MockIElasticMockRecorder) GetOperationsStats(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsStats", reflect.TypeOf((*MockIElastic)(nil).GetOperationsStats), network, address)
}

// GetOperations mocks base method
func (m *MockIElastic) GetOperations(filter map[string]interface{}, size int64, sort bool) ([]models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations", filter, size, sort)
	ret0, _ := ret[0].([]models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations
func (mr *MockIElasticMockRecorder) GetOperations(filter, size, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockIElastic)(nil).GetOperations), filter, size, sort)
}

// GetContract24HoursVolume mocks base method
func (m *MockIElastic) GetContract24HoursVolume(network, address string, entrypoints []string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract24HoursVolume", network, address, entrypoints)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract24HoursVolume indicates an expected call of GetContract24HoursVolume
func (mr *MockIElasticMockRecorder) GetContract24HoursVolume(network, address, entrypoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract24HoursVolume", reflect.TypeOf((*MockIElastic)(nil).GetContract24HoursVolume), network, address, entrypoints)
}

// GetProjectsLastContract mocks base method
func (m *MockIElastic) GetProjectsLastContract() ([]models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsLastContract")
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsLastContract indicates an expected call of GetProjectsLastContract
func (mr *MockIElasticMockRecorder) GetProjectsLastContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsLastContract", reflect.TypeOf((*MockIElastic)(nil).GetProjectsLastContract))
}

// GetSameContracts mocks base method
func (m *MockIElastic) GetSameContracts(arg0 models.Contract, arg1, arg2 int64) (elastic.SameContractsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSameContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].(elastic.SameContractsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSameContracts indicates an expected call of GetSameContracts
func (mr *MockIElasticMockRecorder) GetSameContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSameContracts", reflect.TypeOf((*MockIElastic)(nil).GetSameContracts), arg0, arg1, arg2)
}

// GetSimilarContracts mocks base method
func (m *MockIElastic) GetSimilarContracts(arg0 models.Contract, arg1, arg2 int64) ([]elastic.SimilarContract, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilarContracts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]elastic.SimilarContract)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSimilarContracts indicates an expected call of GetSimilarContracts
func (mr *MockIElasticMockRecorder) GetSimilarContracts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilarContracts", reflect.TypeOf((*MockIElastic)(nil).GetSimilarContracts), arg0, arg1, arg2)
}

// GetDiffTasks mocks base method
func (m *MockIElastic) GetDiffTasks() ([]elastic.DiffTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiffTasks")
	ret0, _ := ret[0].([]elastic.DiffTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiffTasks indicates an expected call of GetDiffTasks
func (mr *MockIElasticMockRecorder) GetDiffTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiffTasks", reflect.TypeOf((*MockIElastic)(nil).GetDiffTasks))
}

// GetProtocol mocks base method
func (m *MockIElastic) GetProtocol(arg0, arg1 string, arg2 int64) (models.Protocol, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocol", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Protocol)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocol indicates an expected call of GetProtocol
func (mr *MockIElasticMockRecorder) GetProtocol(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocol", reflect.TypeOf((*MockIElastic)(nil).GetProtocol), arg0, arg1, arg2)
}

// GetSymLinks mocks base method
func (m *MockIElastic) GetSymLinks(arg0 string, arg1 int64) (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymLinks", arg0, arg1)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymLinks indicates an expected call of GetSymLinks
func (mr *MockIElasticMockRecorder) GetSymLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymLinks", reflect.TypeOf((*MockIElastic)(nil).GetSymLinks), arg0, arg1)
}

// SearchByText mocks base method
func (m *MockIElastic) SearchByText(arg0 string, arg1 int64, arg2 []string, arg3 map[string]interface{}, arg4 bool) (search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByText", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByText indicates an expected call of SearchByText
func (mr *MockIElasticMockRecorder) SearchByText(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByText", reflect.TypeOf((*MockIElastic)(nil).SearchByText), arg0, arg1, arg2, arg3, arg4)
}

// CreateAWSRepository mocks base method
func (m *MockIElastic) CreateAWSRepository(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAWSRepository", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAWSRepository indicates an expected call of CreateAWSRepository
func (mr *MockIElasticMockRecorder) CreateAWSRepository(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAWSRepository", reflect.TypeOf((*MockIElastic)(nil).CreateAWSRepository), arg0, arg1, arg2)
}

// ListRepositories mocks base method
func (m *MockIElastic) ListRepositories() ([]elastic.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories")
	ret0, _ := ret[0].([]elastic.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockIElasticMockRecorder) ListRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockIElastic)(nil).ListRepositories))
}

// CreateSnapshots mocks base method
func (m *MockIElastic) CreateSnapshots(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshots indicates an expected call of CreateSnapshots
func (mr *MockIElasticMockRecorder) CreateSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshots", reflect.TypeOf((*MockIElastic)(nil).CreateSnapshots), arg0, arg1, arg2)
}

// RestoreSnapshots mocks base method
func (m *MockIElastic) RestoreSnapshots(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreSnapshots indicates an expected call of RestoreSnapshots
func (mr *MockIElasticMockRecorder) RestoreSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshots", reflect.TypeOf((*MockIElastic)(nil).RestoreSnapshots), arg0, arg1, arg2)
}

// ListSnapshots mocks base method
func (m *MockIElastic) ListSnapshots(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockIElasticMockRecorder) ListSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockIElastic)(nil).ListSnapshots), arg0)
}

// SetSnapshotPolicy mocks base method
func (m *MockIElastic) SetSnapshotPolicy(arg0, arg1, arg2, arg3 string, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotPolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotPolicy indicates an expected call of SetSnapshotPolicy
func (mr *MockIElasticMockRecorder) SetSnapshotPolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotPolicy", reflect.TypeOf((*MockIElastic)(nil).SetSnapshotPolicy), arg0, arg1, arg2, arg3, arg4)
}

// GetAllPolicies mocks base method
func (m *MockIElastic) GetAllPolicies() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPolicies")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPolicies indicates an expected call of GetAllPolicies
func (mr *MockIElasticMockRecorder) GetAllPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPolicies", reflect.TypeOf((*MockIElastic)(nil).GetAllPolicies))
}

// GetMappings mocks base method
func (m *MockIElastic) GetMappings(arg0 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappings", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMappings indicates an expected call of GetMappings
func (mr *MockIElasticMockRecorder) GetMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMappings", reflect.TypeOf((*MockIElastic)(nil).GetMappings), arg0)
}

// CreateMapping mocks base method
func (m *MockIElastic) CreateMapping(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMapping indicates an expected call of CreateMapping
func (mr *MockIElasticMockRecorder) CreateMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapping", reflect.TypeOf((*MockIElastic)(nil).CreateMapping), arg0, arg1)
}

// ReloadSecureSettings mocks base method
func (m *MockIElastic) ReloadSecureSettings() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSecureSettings")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadSecureSettings indicates an expected call of ReloadSecureSettings
func (mr *MockIElasticMockRecorder) ReloadSecureSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSecureSettings", reflect.TypeOf((*MockIElastic)(nil).ReloadSecureSettings))
}

// GetNetworkCountStats mocks base method
func (m *MockIElastic) GetNetworkCountStats(arg0 string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkCountStats", arg0)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkCountStats indicates an expected call of GetNetworkCountStats
func (mr *MockIElasticMockRecorder) GetNetworkCountStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkCountStats", reflect.TypeOf((*MockIElastic)(nil).GetNetworkCountStats), arg0)
}

// GetDateHistogram mocks base method
func (m *MockIElastic) GetDateHistogram(period string, opts ...elastic.HistogramOption) ([][]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{period}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDateHistogram", varargs...)
	ret0, _ := ret[0].([][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateHistogram indicates an expected call of GetDateHistogram
func (mr *MockIElasticMockRecorder) GetDateHistogram(period interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{period}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateHistogram", reflect.TypeOf((*MockIElastic)(nil).GetDateHistogram), varargs...)
}

// GetCallsCountByNetwork mocks base method
func (m *MockIElastic) GetCallsCountByNetwork() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallsCountByNetwork")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallsCountByNetwork indicates an expected call of GetCallsCountByNetwork
func (mr *MockIElasticMockRecorder) GetCallsCountByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallsCountByNetwork", reflect.TypeOf((*MockIElastic)(nil).GetCallsCountByNetwork))
}

// GetContractStatsByNetwork mocks base method
func (m *MockIElastic) GetContractStatsByNetwork() (map[string]elastic.ContractCountStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatsByNetwork")
	ret0, _ := ret[0].(map[string]elastic.ContractCountStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatsByNetwork indicates an expected call of GetContractStatsByNetwork
func (mr *MockIElasticMockRecorder) GetContractStatsByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatsByNetwork", reflect.TypeOf((*MockIElastic)(nil).GetContractStatsByNetwork))
}

// GetFACountByNetwork mocks base method
func (m *MockIElastic) GetFACountByNetwork() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFACountByNetwork")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFACountByNetwork indicates an expected call of GetFACountByNetwork
func (mr *MockIElasticMockRecorder) GetFACountByNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFACountByNetwork", reflect.TypeOf((*MockIElastic)(nil).GetFACountByNetwork))
}

// GetLanguagesForNetwork mocks base method
func (m *MockIElastic) GetLanguagesForNetwork(network string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagesForNetwork", network)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguagesForNetwork indicates an expected call of GetLanguagesForNetwork
func (mr *MockIElasticMockRecorder) GetLanguagesForNetwork(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagesForNetwork", reflect.TypeOf((*MockIElastic)(nil).GetLanguagesForNetwork), network)
}

// GetTokens mocks base method
func (m *MockIElastic) GetTokens(arg0, arg1 string, arg2, arg3 int64) ([]models.Contract, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Contract)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokens indicates an expected call of GetTokens
func (mr *MockIElasticMockRecorder) GetTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockIElastic)(nil).GetTokens), arg0, arg1, arg2, arg3)
}

// GetTokensStats mocks base method
func (m *MockIElastic) GetTokensStats(arg0 string, arg1, arg2 []string) (map[string]elastic.TokenUsageStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]elastic.TokenUsageStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokensStats indicates an expected call of GetTokensStats
func (mr *MockIElasticMockRecorder) GetTokensStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensStats", reflect.TypeOf((*MockIElastic)(nil).GetTokensStats), arg0, arg1, arg2)
}

// GetTokenVolumeSeries mocks base method
func (m *MockIElastic) GetTokenVolumeSeries(arg0, arg1 string, arg2 []string, arg3 []tzip.DAppContract, arg4 uint) ([][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenVolumeSeries", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenVolumeSeries indicates an expected call of GetTokenVolumeSeries
func (mr *MockIElasticMockRecorder) GetTokenVolumeSeries(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenVolumeSeries", reflect.TypeOf((*MockIElastic)(nil).GetTokenVolumeSeries), arg0, arg1, arg2, arg3, arg4)
}

// GetBalances mocks base method
func (m *MockIElastic) GetBalances(arg0, arg1 string, arg2 int64, arg3 ...elastic.TokenBalance) (map[elastic.TokenBalance]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBalances", varargs...)
	ret0, _ := ret[0].(map[elastic.TokenBalance]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances
func (mr *MockIElasticMockRecorder) GetBalances(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockIElastic)(nil).GetBalances), varargs...)
}

// GetAccountBalances mocks base method
func (m *MockIElastic) GetAccountBalances(arg0, arg1 string) ([]models.TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", arg0, arg1)
	ret0, _ := ret[0].([]models.TokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances
func (mr *MockIElasticMockRecorder) GetAccountBalances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockIElastic)(nil).GetAccountBalances), arg0, arg1)
}

// GetTokenSupply mocks base method
func (m *MockIElastic) GetTokenSupply(network, address string, tokenID int64) (elastic.TokenSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSupply", network, address, tokenID)
	ret0, _ := ret[0].(elastic.TokenSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenSupply indicates an expected call of GetTokenSupply
func (mr *MockIElasticMockRecorder) GetTokenSupply(network, address, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSupply", reflect.TypeOf((*MockIElastic)(nil).GetTokenSupply), network, address, tokenID)
}

// GetTransfers mocks base method
func (m *MockIElastic) GetTransfers(ctx elastic.GetTransfersContext) (elastic.TransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", ctx)
	ret0, _ := ret[0].(elastic.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers
func (mr *MockIElasticMockRecorder) GetTransfers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockIElastic)(nil).GetTransfers), ctx)
}

// GetAllTransfers mocks base method
func (m *MockIElastic) GetAllTransfers(network string, level int64) ([]models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransfers", network, level)
	ret0, _ := ret[0].([]models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransfers indicates an expected call of GetAllTransfers
func (mr *MockIElasticMockRecorder) GetAllTransfers(network, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransfers", reflect.TypeOf((*MockIElastic)(nil).GetAllTransfers), network, level)
}

// UpdateTokenBalances mocks base method
func (m *MockIElastic) UpdateTokenBalances(updates []*models.TokenBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenBalances", updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenBalances indicates an expected call of UpdateTokenBalances
func (mr *MockIElasticMockRecorder) UpdateTokenBalances(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenBalances", reflect.TypeOf((*MockIElastic)(nil).UpdateTokenBalances), updates)
}

// GetHolders mocks base method
func (m *MockIElastic) GetHolders(network, contract string, tokenID int64) ([]models.TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolders", network, contract, tokenID)
	ret0, _ := ret[0].([]models.TokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolders indicates an expected call of GetHolders
func (mr *MockIElasticMockRecorder) GetHolders(network, contract, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolders", reflect.TypeOf((*MockIElastic)(nil).GetHolders), network, contract, tokenID)
}

// GetToken24HoursVolume mocks base method
func (m *MockIElastic) GetToken24HoursVolume(network, contract string, initiators, entrypoints []string, tokenID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken24HoursVolume", network, contract, initiators, entrypoints, tokenID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken24HoursVolume indicates an expected call of GetToken24HoursVolume
func (mr *MockIElasticMockRecorder) GetToken24HoursVolume(network, contract, initiators, entrypoints, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken24HoursVolume", reflect.TypeOf((*MockIElastic)(nil).GetToken24HoursVolume), network, contract, initiators, entrypoints, tokenID)
}

// GetTZIP mocks base method
func (m *MockIElastic) GetTZIP(network, address string) (models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZIP", network, address)
	ret0, _ := ret[0].(models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTZIP indicates an expected call of GetTZIP
func (mr *MockIElasticMockRecorder) GetTZIP(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZIP", reflect.TypeOf((*MockIElastic)(nil).GetTZIP), network, address)
}

// GetTZIPWithEvents mocks base method
func (m *MockIElastic) GetTZIPWithEvents() ([]models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTZIPWithEvents")
	ret0, _ := ret[0].([]models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTZIPWithEvents indicates an expected call of GetTZIPWithEvents
func (mr *MockIElasticMockRecorder) GetTZIPWithEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTZIPWithEvents", reflect.TypeOf((*MockIElastic)(nil).GetTZIPWithEvents))
}

// GetTokenMetadata mocks base method
func (m *MockIElastic) GetTokenMetadata(ctx elastic.GetTokenMetadataContext) ([]elastic.TokenMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadata", ctx)
	ret0, _ := ret[0].([]elastic.TokenMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenMetadata indicates an expected call of GetTokenMetadata
func (mr *MockIElasticMockRecorder) GetTokenMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadata", reflect.TypeOf((*MockIElastic)(nil).GetTokenMetadata), ctx)
}

// GetDApps mocks base method
func (m *MockIElastic) GetDApps() ([]tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDApps")
	ret0, _ := ret[0].([]tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDApps indicates an expected call of GetDApps
func (mr *MockIElasticMockRecorder) GetDApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDApps", reflect.TypeOf((*MockIElastic)(nil).GetDApps))
}

// GetDAppBySlug mocks base method
func (m *MockIElastic) GetDAppBySlug(slug string) (*tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppBySlug", slug)
	ret0, _ := ret[0].(*tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppBySlug indicates an expected call of GetDAppBySlug
func (mr *MockIElasticMockRecorder) GetDAppBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppBySlug", reflect.TypeOf((*MockIElastic)(nil).GetDAppBySlug), slug)
}

// GetBySlug mocks base method
func (m *MockIElastic) GetBySlug(slug string) (*models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", slug)
	ret0, _ := ret[0].(*models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug
func (mr *MockIElasticMockRecorder) GetBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockIElastic)(nil).GetBySlug), slug)
}

// GetAliases mocks base method
func (m *MockIElastic) GetAliases(network string) ([]models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", network)
	ret0, _ := ret[0].([]models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases
func (mr *MockIElasticMockRecorder) GetAliases(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockIElastic)(nil).GetAliases), network)
}

// GetAliasesMap mocks base method
func (m *MockIElastic) GetAliasesMap(network string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasesMap", network)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasesMap indicates an expected call of GetAliasesMap
func (mr *MockIElasticMockRecorder) GetAliasesMap(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasesMap", reflect.TypeOf((*MockIElastic)(nil).GetAliasesMap), network)
}

// GetAlias mocks base method
func (m *MockIElastic) GetAlias(network, address string) (*models.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", network, address)
	ret0, _ := ret[0].(*models.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockIElasticMockRecorder) GetAlias(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockIElastic)(nil).GetAlias), network, address)
}
