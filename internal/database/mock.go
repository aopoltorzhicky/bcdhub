// Code generated by MockGen. DO NOT EDIT.
// Source: go

// Package mock_database is a generated GoMock package.
package database

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetOrCreateAccount mocks base method
func (m *MockDB) GetOrCreateAccount(arg0 *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount
func (mr *MockDBMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockDB)(nil).GetOrCreateAccount), arg0)
}

// CreateAssessment mocks base method
func (m *MockDB) CreateAssessment(a *Assessments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessment", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAssessment indicates an expected call of CreateAssessment
func (mr *MockDBMockRecorder) CreateAssessment(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessment", reflect.TypeOf((*MockDB)(nil).CreateAssessment), a)
}

// CreateOrUpdateAssessment mocks base method
func (m *MockDB) CreateOrUpdateAssessment(a *Assessments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAssessment", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAssessment indicates an expected call of CreateOrUpdateAssessment
func (mr *MockDBMockRecorder) CreateOrUpdateAssessment(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAssessment", reflect.TypeOf((*MockDB)(nil).CreateOrUpdateAssessment), a)
}

// GetAssessmentsWithValue mocks base method
func (m *MockDB) GetAssessmentsWithValue(arg0, arg1, arg2 uint) ([]Assessments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentsWithValue", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Assessments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentsWithValue indicates an expected call of GetAssessmentsWithValue
func (mr *MockDBMockRecorder) GetAssessmentsWithValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentsWithValue", reflect.TypeOf((*MockDB)(nil).GetAssessmentsWithValue), arg0, arg1, arg2)
}

// GetUserCompletedAssesments mocks base method
func (m *MockDB) GetUserCompletedAssesments(userID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompletedAssesments", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCompletedAssesments indicates an expected call of GetUserCompletedAssesments
func (mr *MockDBMockRecorder) GetUserCompletedAssesments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompletedAssesments", reflect.TypeOf((*MockDB)(nil).GetUserCompletedAssesments), userID)
}

// ListCompilationTasks mocks base method
func (m *MockDB) ListCompilationTasks(userID, limit, offset uint, kind string) ([]CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompilationTasks", userID, limit, offset, kind)
	ret0, _ := ret[0].([]CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompilationTasks indicates an expected call of ListCompilationTasks
func (mr *MockDBMockRecorder) ListCompilationTasks(userID, limit, offset, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompilationTasks", reflect.TypeOf((*MockDB)(nil).ListCompilationTasks), userID, limit, offset, kind)
}

// GetCompilationTask mocks base method
func (m *MockDB) GetCompilationTask(taskID uint) (*CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationTask", taskID)
	ret0, _ := ret[0].(*CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompilationTask indicates an expected call of GetCompilationTask
func (mr *MockDBMockRecorder) GetCompilationTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationTask", reflect.TypeOf((*MockDB)(nil).GetCompilationTask), taskID)
}

// GetCompilationTaskBy mocks base method
func (m *MockDB) GetCompilationTaskBy(address, network, status string) (*CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationTaskBy", address, network, status)
	ret0, _ := ret[0].(*CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompilationTaskBy indicates an expected call of GetCompilationTaskBy
func (mr *MockDBMockRecorder) GetCompilationTaskBy(address, network, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationTaskBy", reflect.TypeOf((*MockDB)(nil).GetCompilationTaskBy), address, network, status)
}

// CreateCompilationTask mocks base method
func (m *MockDB) CreateCompilationTask(ct *CompilationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompilationTask", ct)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompilationTask indicates an expected call of CreateCompilationTask
func (mr *MockDBMockRecorder) CreateCompilationTask(ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompilationTask", reflect.TypeOf((*MockDB)(nil).CreateCompilationTask), ct)
}

// UpdateTaskStatus mocks base method
func (m *MockDB) UpdateTaskStatus(taskID uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", taskID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus
func (mr *MockDBMockRecorder) UpdateTaskStatus(taskID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockDB)(nil).UpdateTaskStatus), taskID, status)
}

// UpdateTaskResults mocks base method
func (m *MockDB) UpdateTaskResults(task *CompilationTask, status string, results []CompilationTaskResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskResults", task, status, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskResults indicates an expected call of UpdateTaskResults
func (mr *MockDBMockRecorder) UpdateTaskResults(task, status, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskResults", reflect.TypeOf((*MockDB)(nil).UpdateTaskResults), task, status, results)
}

// CountCompilationTasks mocks base method
func (m *MockDB) CountCompilationTasks(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompilationTasks", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCompilationTasks indicates an expected call of CountCompilationTasks
func (mr *MockDBMockRecorder) CountCompilationTasks(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompilationTasks", reflect.TypeOf((*MockDB)(nil).CountCompilationTasks), userID)
}

// ListDeployments mocks base method
func (m *MockDB) ListDeployments(userID, limit, offset uint) ([]Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", userID, limit, offset)
	ret0, _ := ret[0].([]Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockDBMockRecorder) ListDeployments(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockDB)(nil).ListDeployments), userID, limit, offset)
}

// CreateDeployment mocks base method
func (m *MockDB) CreateDeployment(dt *Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockDBMockRecorder) CreateDeployment(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDB)(nil).CreateDeployment), dt)
}

// GetDeploymentBy mocks base method
func (m *MockDB) GetDeploymentBy(opHash string) (*Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentBy", opHash)
	ret0, _ := ret[0].(*Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentBy indicates an expected call of GetDeploymentBy
func (mr *MockDBMockRecorder) GetDeploymentBy(opHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentBy", reflect.TypeOf((*MockDB)(nil).GetDeploymentBy), opHash)
}

// UpdateDeployment mocks base method
func (m *MockDB) UpdateDeployment(dt *Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockDBMockRecorder) UpdateDeployment(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDB)(nil).UpdateDeployment), dt)
}

// CountDeployments mocks base method
func (m *MockDB) CountDeployments(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDeployments", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDeployments indicates an expected call of CountDeployments
func (mr *MockDBMockRecorder) CountDeployments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDeployments", reflect.TypeOf((*MockDB)(nil).CountDeployments), userID)
}

// GetSubscription mocks base method
func (m *MockDB) GetSubscription(userID uint, address, network string) (Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", userID, address, network)
	ret0, _ := ret[0].(Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockDBMockRecorder) GetSubscription(userID, address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDB)(nil).GetSubscription), userID, address, network)
}

// GetSubscriptions mocks base method
func (m *MockDB) GetSubscriptions(address, network string) ([]Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", address, network)
	ret0, _ := ret[0].([]Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions
func (mr *MockDBMockRecorder) GetSubscriptions(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockDB)(nil).GetSubscriptions), address, network)
}

// ListSubscriptions mocks base method
func (m *MockDB) ListSubscriptions(userID uint) ([]Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", userID)
	ret0, _ := ret[0].([]Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions
func (mr *MockDBMockRecorder) ListSubscriptions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockDB)(nil).ListSubscriptions), userID)
}

// UpsertSubscription mocks base method
func (m *MockDB) UpsertSubscription(arg0 *Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSubscription indicates an expected call of UpsertSubscription
func (mr *MockDBMockRecorder) UpsertSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSubscription", reflect.TypeOf((*MockDB)(nil).UpsertSubscription), arg0)
}

// DeleteSubscription mocks base method
func (m *MockDB) DeleteSubscription(arg0 *Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (mr *MockDBMockRecorder) DeleteSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockDB)(nil).DeleteSubscription), arg0)
}

// GetSubscriptionsCount mocks base method
func (m *MockDB) GetSubscriptionsCount(address, network string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsCount", address, network)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsCount indicates an expected call of GetSubscriptionsCount
func (mr *MockDBMockRecorder) GetSubscriptionsCount(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsCount", reflect.TypeOf((*MockDB)(nil).GetSubscriptionsCount), address, network)
}

// GetOrCreateUser mocks base method
func (m *MockDB) GetOrCreateUser(arg0 *User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateUser indicates an expected call of GetOrCreateUser
func (mr *MockDBMockRecorder) GetOrCreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateUser", reflect.TypeOf((*MockDB)(nil).GetOrCreateUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockDB) GetUser(arg0 uint) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockDBMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDB)(nil).GetUser), arg0)
}

// UpdateUserMarkReadAt mocks base method
func (m *MockDB) UpdateUserMarkReadAt(arg0 uint, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMarkReadAt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMarkReadAt indicates an expected call of UpdateUserMarkReadAt
func (mr *MockDBMockRecorder) UpdateUserMarkReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMarkReadAt", reflect.TypeOf((*MockDB)(nil).UpdateUserMarkReadAt), arg0, arg1)
}

// ListVerifications mocks base method
func (m *MockDB) ListVerifications(userID, limit, offset uint) ([]Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVerifications", userID, limit, offset)
	ret0, _ := ret[0].([]Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVerifications indicates an expected call of ListVerifications
func (mr *MockDBMockRecorder) ListVerifications(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVerifications", reflect.TypeOf((*MockDB)(nil).ListVerifications), userID, limit, offset)
}

// CreateVerification mocks base method
func (m *MockDB) CreateVerification(v *Verification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerification", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVerification indicates an expected call of CreateVerification
func (mr *MockDBMockRecorder) CreateVerification(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerification", reflect.TypeOf((*MockDB)(nil).CreateVerification), v)
}

// GetVerificationBy mocks base method
func (m *MockDB) GetVerificationBy(address, network string) (*Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationBy", address, network)
	ret0, _ := ret[0].(*Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationBy indicates an expected call of GetVerificationBy
func (mr *MockDBMockRecorder) GetVerificationBy(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationBy", reflect.TypeOf((*MockDB)(nil).GetVerificationBy), address, network)
}

// CountVerifications mocks base method
func (m *MockDB) CountVerifications(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVerifications", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVerifications indicates an expected call of CountVerifications
func (mr *MockDBMockRecorder) CountVerifications(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVerifications", reflect.TypeOf((*MockDB)(nil).CountVerifications), userID)
}

// Close mocks base method
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// MockIAccount is a mock of IAccount interface
type MockIAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountMockRecorder
}

// MockIAccountMockRecorder is the mock recorder for MockIAccount
type MockIAccountMockRecorder struct {
	mock *MockIAccount
}

// NewMockIAccount creates a new mock instance
func NewMockIAccount(ctrl *gomock.Controller) *MockIAccount {
	mock := &MockIAccount{ctrl: ctrl}
	mock.recorder = &MockIAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccount) EXPECT() *MockIAccountMockRecorder {
	return m.recorder
}

// GetOrCreateAccount mocks base method
func (m *MockIAccount) GetOrCreateAccount(arg0 *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateAccount indicates an expected call of GetOrCreateAccount
func (mr *MockIAccountMockRecorder) GetOrCreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAccount", reflect.TypeOf((*MockIAccount)(nil).GetOrCreateAccount), arg0)
}

// MockIAssessment is a mock of IAssessment interface
type MockIAssessment struct {
	ctrl     *gomock.Controller
	recorder *MockIAssessmentMockRecorder
}

// MockIAssessmentMockRecorder is the mock recorder for MockIAssessment
type MockIAssessmentMockRecorder struct {
	mock *MockIAssessment
}

// NewMockIAssessment creates a new mock instance
func NewMockIAssessment(ctrl *gomock.Controller) *MockIAssessment {
	mock := &MockIAssessment{ctrl: ctrl}
	mock.recorder = &MockIAssessmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAssessment) EXPECT() *MockIAssessmentMockRecorder {
	return m.recorder
}

// CreateAssessment mocks base method
func (m *MockIAssessment) CreateAssessment(a *Assessments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessment", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAssessment indicates an expected call of CreateAssessment
func (mr *MockIAssessmentMockRecorder) CreateAssessment(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessment", reflect.TypeOf((*MockIAssessment)(nil).CreateAssessment), a)
}

// CreateOrUpdateAssessment mocks base method
func (m *MockIAssessment) CreateOrUpdateAssessment(a *Assessments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAssessment", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAssessment indicates an expected call of CreateOrUpdateAssessment
func (mr *MockIAssessmentMockRecorder) CreateOrUpdateAssessment(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAssessment", reflect.TypeOf((*MockIAssessment)(nil).CreateOrUpdateAssessment), a)
}

// GetAssessmentsWithValue mocks base method
func (m *MockIAssessment) GetAssessmentsWithValue(arg0, arg1, arg2 uint) ([]Assessments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentsWithValue", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Assessments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentsWithValue indicates an expected call of GetAssessmentsWithValue
func (mr *MockIAssessmentMockRecorder) GetAssessmentsWithValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentsWithValue", reflect.TypeOf((*MockIAssessment)(nil).GetAssessmentsWithValue), arg0, arg1, arg2)
}

// GetUserCompletedAssesments mocks base method
func (m *MockIAssessment) GetUserCompletedAssesments(userID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompletedAssesments", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCompletedAssesments indicates an expected call of GetUserCompletedAssesments
func (mr *MockIAssessmentMockRecorder) GetUserCompletedAssesments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompletedAssesments", reflect.TypeOf((*MockIAssessment)(nil).GetUserCompletedAssesments), userID)
}

// MockICompilationTask is a mock of ICompilationTask interface
type MockICompilationTask struct {
	ctrl     *gomock.Controller
	recorder *MockICompilationTaskMockRecorder
}

// MockICompilationTaskMockRecorder is the mock recorder for MockICompilationTask
type MockICompilationTaskMockRecorder struct {
	mock *MockICompilationTask
}

// NewMockICompilationTask creates a new mock instance
func NewMockICompilationTask(ctrl *gomock.Controller) *MockICompilationTask {
	mock := &MockICompilationTask{ctrl: ctrl}
	mock.recorder = &MockICompilationTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICompilationTask) EXPECT() *MockICompilationTaskMockRecorder {
	return m.recorder
}

// ListCompilationTasks mocks base method
func (m *MockICompilationTask) ListCompilationTasks(userID, limit, offset uint, kind string) ([]CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompilationTasks", userID, limit, offset, kind)
	ret0, _ := ret[0].([]CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompilationTasks indicates an expected call of ListCompilationTasks
func (mr *MockICompilationTaskMockRecorder) ListCompilationTasks(userID, limit, offset, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompilationTasks", reflect.TypeOf((*MockICompilationTask)(nil).ListCompilationTasks), userID, limit, offset, kind)
}

// GetCompilationTask mocks base method
func (m *MockICompilationTask) GetCompilationTask(taskID uint) (*CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationTask", taskID)
	ret0, _ := ret[0].(*CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompilationTask indicates an expected call of GetCompilationTask
func (mr *MockICompilationTaskMockRecorder) GetCompilationTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationTask", reflect.TypeOf((*MockICompilationTask)(nil).GetCompilationTask), taskID)
}

// GetCompilationTaskBy mocks base method
func (m *MockICompilationTask) GetCompilationTaskBy(address, network, status string) (*CompilationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationTaskBy", address, network, status)
	ret0, _ := ret[0].(*CompilationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompilationTaskBy indicates an expected call of GetCompilationTaskBy
func (mr *MockICompilationTaskMockRecorder) GetCompilationTaskBy(address, network, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationTaskBy", reflect.TypeOf((*MockICompilationTask)(nil).GetCompilationTaskBy), address, network, status)
}

// CreateCompilationTask mocks base method
func (m *MockICompilationTask) CreateCompilationTask(ct *CompilationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompilationTask", ct)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompilationTask indicates an expected call of CreateCompilationTask
func (mr *MockICompilationTaskMockRecorder) CreateCompilationTask(ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompilationTask", reflect.TypeOf((*MockICompilationTask)(nil).CreateCompilationTask), ct)
}

// UpdateTaskStatus mocks base method
func (m *MockICompilationTask) UpdateTaskStatus(taskID uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", taskID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus
func (mr *MockICompilationTaskMockRecorder) UpdateTaskStatus(taskID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockICompilationTask)(nil).UpdateTaskStatus), taskID, status)
}

// UpdateTaskResults mocks base method
func (m *MockICompilationTask) UpdateTaskResults(task *CompilationTask, status string, results []CompilationTaskResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskResults", task, status, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskResults indicates an expected call of UpdateTaskResults
func (mr *MockICompilationTaskMockRecorder) UpdateTaskResults(task, status, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskResults", reflect.TypeOf((*MockICompilationTask)(nil).UpdateTaskResults), task, status, results)
}

// CountCompilationTasks mocks base method
func (m *MockICompilationTask) CountCompilationTasks(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompilationTasks", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCompilationTasks indicates an expected call of CountCompilationTasks
func (mr *MockICompilationTaskMockRecorder) CountCompilationTasks(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompilationTasks", reflect.TypeOf((*MockICompilationTask)(nil).CountCompilationTasks), userID)
}

// MockIDeployment is a mock of IDeployment interface
type MockIDeployment struct {
	ctrl     *gomock.Controller
	recorder *MockIDeploymentMockRecorder
}

// MockIDeploymentMockRecorder is the mock recorder for MockIDeployment
type MockIDeploymentMockRecorder struct {
	mock *MockIDeployment
}

// NewMockIDeployment creates a new mock instance
func NewMockIDeployment(ctrl *gomock.Controller) *MockIDeployment {
	mock := &MockIDeployment{ctrl: ctrl}
	mock.recorder = &MockIDeploymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDeployment) EXPECT() *MockIDeploymentMockRecorder {
	return m.recorder
}

// ListDeployments mocks base method
func (m *MockIDeployment) ListDeployments(userID, limit, offset uint) ([]Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", userID, limit, offset)
	ret0, _ := ret[0].([]Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockIDeploymentMockRecorder) ListDeployments(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockIDeployment)(nil).ListDeployments), userID, limit, offset)
}

// CreateDeployment mocks base method
func (m *MockIDeployment) CreateDeployment(dt *Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockIDeploymentMockRecorder) CreateDeployment(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockIDeployment)(nil).CreateDeployment), dt)
}

// GetDeploymentBy mocks base method
func (m *MockIDeployment) GetDeploymentBy(opHash string) (*Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentBy", opHash)
	ret0, _ := ret[0].(*Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentBy indicates an expected call of GetDeploymentBy
func (mr *MockIDeploymentMockRecorder) GetDeploymentBy(opHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentBy", reflect.TypeOf((*MockIDeployment)(nil).GetDeploymentBy), opHash)
}

// UpdateDeployment mocks base method
func (m *MockIDeployment) UpdateDeployment(dt *Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", dt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockIDeploymentMockRecorder) UpdateDeployment(dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockIDeployment)(nil).UpdateDeployment), dt)
}

// CountDeployments mocks base method
func (m *MockIDeployment) CountDeployments(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDeployments", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDeployments indicates an expected call of CountDeployments
func (mr *MockIDeploymentMockRecorder) CountDeployments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDeployments", reflect.TypeOf((*MockIDeployment)(nil).CountDeployments), userID)
}

// MockISubscription is a mock of ISubscription interface
type MockISubscription struct {
	ctrl     *gomock.Controller
	recorder *MockISubscriptionMockRecorder
}

// MockISubscriptionMockRecorder is the mock recorder for MockISubscription
type MockISubscriptionMockRecorder struct {
	mock *MockISubscription
}

// NewMockISubscription creates a new mock instance
func NewMockISubscription(ctrl *gomock.Controller) *MockISubscription {
	mock := &MockISubscription{ctrl: ctrl}
	mock.recorder = &MockISubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISubscription) EXPECT() *MockISubscriptionMockRecorder {
	return m.recorder
}

// GetSubscription mocks base method
func (m *MockISubscription) GetSubscription(userID uint, address, network string) (Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", userID, address, network)
	ret0, _ := ret[0].(Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockISubscriptionMockRecorder) GetSubscription(userID, address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockISubscription)(nil).GetSubscription), userID, address, network)
}

// GetSubscriptions mocks base method
func (m *MockISubscription) GetSubscriptions(address, network string) ([]Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", address, network)
	ret0, _ := ret[0].([]Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions
func (mr *MockISubscriptionMockRecorder) GetSubscriptions(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockISubscription)(nil).GetSubscriptions), address, network)
}

// ListSubscriptions mocks base method
func (m *MockISubscription) ListSubscriptions(userID uint) ([]Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", userID)
	ret0, _ := ret[0].([]Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions
func (mr *MockISubscriptionMockRecorder) ListSubscriptions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockISubscription)(nil).ListSubscriptions), userID)
}

// UpsertSubscription mocks base method
func (m *MockISubscription) UpsertSubscription(arg0 *Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSubscription indicates an expected call of UpsertSubscription
func (mr *MockISubscriptionMockRecorder) UpsertSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSubscription", reflect.TypeOf((*MockISubscription)(nil).UpsertSubscription), arg0)
}

// DeleteSubscription mocks base method
func (m *MockISubscription) DeleteSubscription(arg0 *Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (mr *MockISubscriptionMockRecorder) DeleteSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockISubscription)(nil).DeleteSubscription), arg0)
}

// GetSubscriptionsCount mocks base method
func (m *MockISubscription) GetSubscriptionsCount(address, network string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsCount", address, network)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsCount indicates an expected call of GetSubscriptionsCount
func (mr *MockISubscriptionMockRecorder) GetSubscriptionsCount(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsCount", reflect.TypeOf((*MockISubscription)(nil).GetSubscriptionsCount), address, network)
}

// MockIUser is a mock of IUser interface
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// GetOrCreateUser mocks base method
func (m *MockIUser) GetOrCreateUser(arg0 *User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrCreateUser indicates an expected call of GetOrCreateUser
func (mr *MockIUserMockRecorder) GetOrCreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateUser", reflect.TypeOf((*MockIUser)(nil).GetOrCreateUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockIUser) GetUser(arg0 uint) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockIUserMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUser)(nil).GetUser), arg0)
}

// UpdateUserMarkReadAt mocks base method
func (m *MockIUser) UpdateUserMarkReadAt(arg0 uint, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMarkReadAt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMarkReadAt indicates an expected call of UpdateUserMarkReadAt
func (mr *MockIUserMockRecorder) UpdateUserMarkReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMarkReadAt", reflect.TypeOf((*MockIUser)(nil).UpdateUserMarkReadAt), arg0, arg1)
}

// MockIVerification is a mock of IVerification interface
type MockIVerification struct {
	ctrl     *gomock.Controller
	recorder *MockIVerificationMockRecorder
}

// MockIVerificationMockRecorder is the mock recorder for MockIVerification
type MockIVerificationMockRecorder struct {
	mock *MockIVerification
}

// NewMockIVerification creates a new mock instance
func NewMockIVerification(ctrl *gomock.Controller) *MockIVerification {
	mock := &MockIVerification{ctrl: ctrl}
	mock.recorder = &MockIVerificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIVerification) EXPECT() *MockIVerificationMockRecorder {
	return m.recorder
}

// ListVerifications mocks base method
func (m *MockIVerification) ListVerifications(userID, limit, offset uint) ([]Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVerifications", userID, limit, offset)
	ret0, _ := ret[0].([]Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVerifications indicates an expected call of ListVerifications
func (mr *MockIVerificationMockRecorder) ListVerifications(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVerifications", reflect.TypeOf((*MockIVerification)(nil).ListVerifications), userID, limit, offset)
}

// CreateVerification mocks base method
func (m *MockIVerification) CreateVerification(v *Verification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerification", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVerification indicates an expected call of CreateVerification
func (mr *MockIVerificationMockRecorder) CreateVerification(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerification", reflect.TypeOf((*MockIVerification)(nil).CreateVerification), v)
}

// GetVerificationBy mocks base method
func (m *MockIVerification) GetVerificationBy(address, network string) (*Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationBy", address, network)
	ret0, _ := ret[0].(*Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationBy indicates an expected call of GetVerificationBy
func (mr *MockIVerificationMockRecorder) GetVerificationBy(address, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationBy", reflect.TypeOf((*MockIVerification)(nil).GetVerificationBy), address, network)
}

// CountVerifications mocks base method
func (m *MockIVerification) CountVerifications(userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVerifications", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVerifications indicates an expected call of CountVerifications
func (mr *MockIVerificationMockRecorder) CountVerifications(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVerifications", reflect.TypeOf((*MockIVerification)(nil).CountVerifications), userID)
}
